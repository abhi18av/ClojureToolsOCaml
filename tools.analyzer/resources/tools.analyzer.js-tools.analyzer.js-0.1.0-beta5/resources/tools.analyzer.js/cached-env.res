{^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core {:ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :mappings {^{:arglists ([^{:end-column 34, :end-line 7086, :column 29, :line 7086, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7086, :column 34, :line 7086, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 7086, :column 53, :line 7086, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7086, :column 10, :line 7086, :file "cljs/core.cljs"} ->PersistentHashSet ^{:arglists ([^{:end-column 34, :end-line 7086, :column 29, :line 7086, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7086, :column 34, :line 7086, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 7086, :column 53, :line 7086, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7086, :column 10, :line 7086, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentHashSet [^{:end-column 34, :end-line 7086, :column 29, :line 7086, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7086, :column 34, :line 7086, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 7086, :column 53, :line 7086, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 7086, :column 29, :line 7086, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7086, :column 34, :line 7086, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 7086, :column 53, :line 7086, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7086, :column 10, :line 7086, :file "cljs/core.cljs"} ->PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 8857, :column 25, :line 8857, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8857, :column 33, :line 8857, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8857, :column 38, :line 8857, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8857, :column 10, :line 8857, :file "cljs/core.cljs"} ->ExceptionInfo ^{:arglists ([^{:end-column 33, :end-line 8857, :column 25, :line 8857, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8857, :column 33, :line 8857, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8857, :column 38, :line 8857, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8857, :column 10, :line 8857, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 33, :end-line 8857, :column 25, :line 8857, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8857, :column 33, :line 8857, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8857, :column 38, :line 8857, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 8857, :column 25, :line 8857, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8857, :column 33, :line 8857, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8857, :column 38, :line 8857, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8857, :column 10, :line 8857, :file "cljs/core.cljs"} ->ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8366, :column 4, :line 8366, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8366, :column 5, :line 8366, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8367, :column 4, :line 8367, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8367, :column 5, :line 8367, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8367, :column 7, :line 8367, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8367, :column 9, :line 8367, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} js->clj ^{:arglists (^{:end-column 7, :end-line 8366, :column 4, :line 8366, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8366, :column 5, :line 8366, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8367, :column 4, :line 8367, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8367, :column 5, :line 8367, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8367, :column 7, :line 8367, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8367, :column 9, :line 8367, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8366, :column 5, :line 8366, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 8367, :column 5, :line 8367, :file "cljs/core.cljs"} x & ^{:end-column 14, :end-line 8367, :column 9, :line 8367, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8366, :column 4, :line 8366, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8366, :column 5, :line 8366, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8367, :column 4, :line 8367, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8367, :column 5, :line 8367, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8367, :column 7, :line 8367, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8367, :column 9, :line 8367, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1593, :column 4, :line 1593, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1593, :column 5, :line 1593, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1593, :column 11, :line 1593, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1595, :column 11, :line 1595, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1595, :column 16, :line 1595, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1588, :column 7, :line 1588, :file "cljs/core.cljs"} sort-by ^{:arglists (^{:end-column 16, :end-line 1593, :column 4, :line 1593, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1593, :column 5, :line 1593, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1593, :column 11, :line 1593, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1595, :column 11, :line 1595, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1595, :column 16, :line 1595, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1588, :column 7, :line 1588, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 1593, :column 5, :line 1593, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1593, :column 11, :line 1593, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1595, :column 11, :line 1595, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1595, :column 16, :line 1595, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1593, :column 4, :line 1593, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1593, :column 5, :line 1593, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1593, :column 11, :line 1593, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1595, :column 11, :line 1595, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1595, :column 16, :line 1595, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1588, :column 7, :line 1588, :file "cljs/core.cljs"} sort-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 36, :end-line 356, :column 14, :line 356, :file "cljs/core.cljs"} ITransientAssociative ^{:impls (cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 36, :end-line 356, :column 14, :line 356, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 36, :end-line 356, :column 14, :line 356, :file "cljs/core.cljs"} ITransientAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 2124, :column 15, :line 2124, :file "cljs/core.cljs"} chunk-first ^{:arglists (^{:end-column 22, :end-line 2589, :column 19, :line 2589, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2589, :column 20, :line 2589, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2589, :column 7, :line 2589, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 2589, :column 20, :line 2589, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2589, :column 19, :line 2589, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2589, :column 20, :line 2589, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2589, :column 7, :line 2589, :file "cljs/core.cljs"} chunk-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 456, :column 27, :line 456, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 456, :column 28, :line 456, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 456, :column 8, :line 456, :file "cljs/core.cljs"} number, :end-column 27, :end-line 456, :column 15, :line 456, :file "cljs/core.cljs"} m3-hash-int ^{:arglists (^{:end-column 31, :end-line 456, :column 27, :line 456, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 456, :column 28, :line 456, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 456, :column 8, :line 456, :file "cljs/core.cljs"} number, :end-column 27, :end-line 456, :column 15, :line 456, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 456, :column 28, :line 456, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 456, :column 27, :line 456, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 456, :column 28, :line 456, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 456, :column 8, :line 456, :file "cljs/core.cljs"} number, :end-column 27, :end-line 456, :column 15, :line 456, :file "cljs/core.cljs"} m3-hash-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2986, :column 15, :line 2986, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2986, :column 16, :line 2986, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2986, :column 22, :line 2986, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2986, :column 7, :line 2986, :file "cljs/core.cljs"} stepper ^{:arglists (^{:end-column 27, :end-line 2986, :column 15, :line 2986, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2986, :column 16, :line 2986, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2986, :column 22, :line 2986, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2986, :column 7, :line 2986, :file "cljs/core.cljs"} {:arglists (^cljs.core/Stepper [^{:end-column 22, :end-line 2986, :column 16, :line 2986, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2986, :column 22, :line 2986, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2986, :column 15, :line 2986, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2986, :column 16, :line 2986, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2986, :column 22, :line 2986, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2986, :column 7, :line 2986, :file "cljs/core.cljs"} stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 407, :column 3, :line 407, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 407, :column 5, :line 407, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 407, :column 16, :line 407, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 404, :column 7, :line 404, :file "cljs/core.cljs"} pr-str* ^{:arglists (^{:end-column 20, :end-line 407, :column 3, :line 407, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 407, :column 5, :line 407, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 407, :column 16, :line 407, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 404, :column 7, :line 404, :file "cljs/core.cljs"} {:arglists ([^{:tag ^{:end-column 16, :end-line 407, :column 5, :line 407, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 407, :column 16, :line 407, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 407, :column 3, :line 407, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 407, :column 5, :line 407, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 407, :column 16, :line 407, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 404, :column 7, :line 404, :file "cljs/core.cljs"} pr-str*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8311, :column 3, :line 8311, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8311, :column 4, :line 8311, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8311, :column 10, :line 8311, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 16, :end-line 8307, :column 7, :line 8307, :file "cljs/core.cljs"} eduction ^{:arglists (^{:end-column 15, :end-line 8311, :column 3, :line 8311, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8311, :column 4, :line 8311, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8311, :column 10, :line 8311, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 16, :end-line 8307, :column 7, :line 8307, :file "cljs/core.cljs"} {:arglists (^cljs.core/Eduction [^{:end-column 10, :end-line 8311, :column 4, :line 8311, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8311, :column 10, :line 8311, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8311, :column 3, :line 8311, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8311, :column 4, :line 8311, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8311, :column 10, :line 8311, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 16, :end-line 8307, :column 7, :line 8307, :file "cljs/core.cljs"} eduction, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 3783, :column 4, :line 3783, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3783, :column 5, :line 3783, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3783, :column 13, :line 3783, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3783, :column 22, :line 3783, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3776, :column 7, :line 3776, :file "cljs/core.cljs"} tree-seq ^{:arglists (^{:end-column 27, :end-line 3783, :column 4, :line 3783, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3783, :column 5, :line 3783, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3783, :column 13, :line 3783, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3783, :column 22, :line 3783, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3776, :column 7, :line 3776, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 13, :end-line 3783, :column 5, :line 3783, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3783, :column 13, :line 3783, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3783, :column 22, :line 3783, :file "cljs/core.cljs"} root]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 3783, :column 4, :line 3783, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3783, :column 5, :line 3783, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3783, :column 13, :line 3783, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3783, :column 22, :line 3783, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3776, :column 7, :line 3776, :file "cljs/core.cljs"} tree-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 1877, :column 31, :line 1877, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1877, :column 32, :line 1877, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1877, :column 34, :line 1877, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1877, :column 7, :line 1877, :file "cljs/core.cljs"} unchecked-remainder-int ^{:arglists (^{:end-column 36, :end-line 1877, :column 31, :line 1877, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1877, :column 32, :line 1877, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1877, :column 34, :line 1877, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1877, :column 7, :line 1877, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1877, :column 32, :line 1877, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1877, :column 34, :line 1877, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 1877, :column 31, :line 1877, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1877, :column 32, :line 1877, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1877, :column 34, :line 1877, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1877, :column 7, :line 1877, :file "cljs/core.cljs"} unchecked-remainder-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 624, :column 3, :line 624, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 624, :column 4, :line 624, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 620, :column 12, :line 620, :file "cljs/core.cljs"} seq ^{:arglists (^{:end-column 9, :end-line 624, :column 3, :line 624, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 624, :column 4, :line 624, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 620, :column 12, :line 620, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 624, :column 4, :line 624, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 624, :column 3, :line 624, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 624, :column 4, :line 624, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 620, :column 12, :line 620, :file "cljs/core.cljs"} seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 193, :column 10, :line 193, :file "cljs/core.cljs"} reduce ^{:arglists (^{:end-column 12, :end-line 1632, :column 4, :line 1632, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1648, :column 4, :line 1648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1648, :column 5, :line 1648, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1648, :column 7, :line 1648, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1648, :column 11, :line 1648, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1622, :column 7, :line 1622, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1648, :column 5, :line 1648, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1648, :column 7, :line 1648, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1648, :column 11, :line 1648, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1632, :column 4, :line 1632, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1648, :column 4, :line 1648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1648, :column 5, :line 1648, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1648, :column 7, :line 1648, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1648, :column 11, :line 1648, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1622, :column 7, :line 1622, :file "cljs/core.cljs"} reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 18, :end-line 2935, :column 1, :line 2935, :file "cljs/core.cljs"} INIT ^{:end-column 18, :end-line 2935, :column 1, :line 2935, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 18, :end-line 2935, :column 1, :line 2935, :file "cljs/core.cljs"} INIT, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1483, :column 3, :line 1483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1483, :column 4, :line 1483, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1483, :column 9, :line 1483, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1477, :column 8, :line 1477, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1477, :column 16, :line 1477, :file "cljs/core.cljs"} contains? ^{:arglists (^{:end-column 11, :end-line 1483, :column 3, :line 1483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1483, :column 4, :line 1483, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1483, :column 9, :line 1483, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1477, :column 8, :line 1477, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1477, :column 16, :line 1477, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 1483, :column 4, :line 1483, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1483, :column 9, :line 1483, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1483, :column 3, :line 1483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1483, :column 4, :line 1483, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1483, :column 9, :line 1483, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1477, :column 8, :line 1477, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1477, :column 16, :line 1477, :file "cljs/core.cljs"} contains?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3138, :column 3, :line 3138, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3138, :column 4, :line 3138, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3138, :column 9, :line 3138, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3135, :column 8, :line 3135, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3135, :column 16, :line 3135, :file "cljs/core.cljs"} every? ^{:arglists (^{:end-column 14, :end-line 3138, :column 3, :line 3138, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3138, :column 4, :line 3138, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3138, :column 9, :line 3138, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3135, :column 8, :line 3135, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3135, :column 16, :line 3135, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3138, :column 4, :line 3138, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3138, :column 9, :line 3138, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3138, :column 3, :line 3138, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3138, :column 4, :line 3138, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3138, :column 9, :line 3138, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3135, :column 8, :line 3135, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3135, :column 16, :line 3135, :file "cljs/core.cljs"} every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3420, :column 4, :line 3420, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3420, :column 5, :line 3420, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3432, :column 4, :line 3432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3432, :column 5, :line 3432, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3432, :column 7, :line 3432, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3415, :column 7, :line 3415, :file "cljs/core.cljs"} keep-indexed ^{:arglists (^{:end-column 7, :end-line 3420, :column 4, :line 3420, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3420, :column 5, :line 3420, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3432, :column 4, :line 3432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3432, :column 5, :line 3432, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3432, :column 7, :line 3432, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3415, :column 7, :line 3415, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3420, :column 5, :line 3420, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3432, :column 5, :line 3432, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3432, :column 7, :line 3432, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3420, :column 4, :line 3420, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3420, :column 5, :line 3420, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3432, :column 4, :line 3432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3432, :column 5, :line 3432, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3432, :column 7, :line 3432, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3415, :column 7, :line 3415, :file "cljs/core.cljs"} keep-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 35, :end-line 4637, :column 30, :line 4637, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4637, :column 35, :line 4637, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4637, :column 41, :line 4637, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4637, :column 56, :line 4637, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4637, :column 10, :line 4637, :file "cljs/core.cljs"} ->PersistentQueueSeq ^{:arglists ([^{:end-column 35, :end-line 4637, :column 30, :line 4637, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4637, :column 35, :line 4637, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4637, :column 41, :line 4637, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4637, :column 56, :line 4637, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4637, :column 10, :line 4637, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentQueueSeq [^{:end-column 35, :end-line 4637, :column 30, :line 4637, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4637, :column 35, :line 4637, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4637, :column 41, :line 4637, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4637, :column 56, :line 4637, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 35, :end-line 4637, :column 30, :line 4637, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4637, :column 35, :line 4637, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4637, :column 41, :line 4637, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4637, :column 56, :line 4637, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4637, :column 10, :line 4637, :file "cljs/core.cljs"} ->PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 2075, :column 4, :line 2075, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2075, :column 5, :line 2075, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2075, :column 7, :line 2075, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2076, :column 5, :line 2076, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2076, :column 7, :line 2076, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2076, :column 13, :line 2076, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2072, :column 7, :line 2072, :file "cljs/core.cljs"} subs ^{:arglists (^{:end-column 13, :end-line 2075, :column 4, :line 2075, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2075, :column 5, :line 2075, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2075, :column 7, :line 2075, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2076, :column 5, :line 2076, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2076, :column 7, :line 2076, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2076, :column 13, :line 2076, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2072, :column 7, :line 2072, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2075, :column 5, :line 2075, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2075, :column 7, :line 2075, :file "cljs/core.cljs"} start] [^{:end-column 7, :end-line 2076, :column 5, :line 2076, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2076, :column 7, :line 2076, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2076, :column 13, :line 2076, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 2075, :column 4, :line 2075, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2075, :column 5, :line 2075, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2075, :column 7, :line 2075, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2076, :column 5, :line 2076, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2076, :column 7, :line 2076, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2076, :column 13, :line 2076, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2072, :column 7, :line 2072, :file "cljs/core.cljs"} subs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7315, :column 3, :line 7315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7315, :column 4, :line 7315, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7313, :column 7, :line 7313, :file "cljs/core.cljs"} set ^{:arglists (^{:end-column 9, :end-line 7315, :column 3, :line 7315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7315, :column 4, :line 7315, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7313, :column 7, :line 7313, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7315, :column 4, :line 7315, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7315, :column 3, :line 7315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7315, :column 4, :line 7315, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7313, :column 7, :line 7313, :file "cljs/core.cljs"} set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1545, :column 4, :line 1545, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1545, :column 5, :line 1545, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1545, :column 8, :line 1545, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1552, :column 4, :line 1552, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1552, :column 5, :line 1552, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1552, :column 8, :line 1552, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1552, :column 11, :line 1552, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1552, :column 15, :line 1552, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1543, :column 17, :line 1543, :file "cljs/core.cljs"} compare-indexed ^{:arglists (^{:end-column 11, :end-line 1545, :column 4, :line 1545, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1545, :column 5, :line 1545, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1545, :column 8, :line 1545, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1552, :column 4, :line 1552, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1552, :column 5, :line 1552, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1552, :column 8, :line 1552, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1552, :column 11, :line 1552, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1552, :column 15, :line 1552, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1543, :column 17, :line 1543, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1545, :column 5, :line 1545, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1545, :column 8, :line 1545, :file "cljs/core.cljs"} ys] ^^{:end-column 15, :end-line 1522, :column 8, :line 1522, :file "cljs/core.cljs"} number [^{:end-column 8, :end-line 1552, :column 5, :line 1552, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1552, :column 8, :line 1552, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1552, :column 11, :line 1552, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1552, :column 15, :line 1552, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1545, :column 4, :line 1545, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1545, :column 5, :line 1545, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1545, :column 8, :line 1545, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1552, :column 4, :line 1552, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1552, :column 5, :line 1552, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1552, :column 8, :line 1552, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1552, :column 11, :line 1552, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1552, :column 15, :line 1552, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1543, :column 17, :line 1543, :file "cljs/core.cljs"} compare-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3632, :column 3, :line 3632, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3632, :column 4, :line 3632, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3632, :column 6, :line 3632, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3629, :column 7, :line 3629, :file "cljs/core.cljs"} take-last ^{:arglists (^{:end-column 11, :end-line 3632, :column 3, :line 3632, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3632, :column 4, :line 3632, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3632, :column 6, :line 3632, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3629, :column 7, :line 3629, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq [^{:end-column 6, :end-line 3632, :column 4, :line 3632, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3632, :column 6, :line 3632, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3632, :column 3, :line 3632, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3632, :column 4, :line 3632, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3632, :column 6, :line 3632, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3629, :column 7, :line 3629, :file "cljs/core.cljs"} take-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 609, :column 29, :line 609, :file "cljs/core.cljs"} IndexedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 874, :column 10, :line 874, :file "cljs/core.cljs"} IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 28, :end-line 874, :column 21, :line 874, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 874, :column 22, :line 874, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 874, :column 26, :line 874, :file "cljs/core.cljs"} i], :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 8, :end-line 1991, :column 3, :line 1991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1991, :column 4, :line 1991, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1991, :column 6, :line 1991, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} bit-set ^{:arglists (^{:end-column 8, :end-line 1991, :column 3, :line 1991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1991, :column 4, :line 1991, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1991, :column 6, :line 1991, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1991, :column 4, :line 1991, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1991, :column 6, :line 1991, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1991, :column 3, :line 1991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1991, :column 4, :line 1991, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1991, :column 6, :line 1991, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} bit-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 32, :end-line 483, :column 1, :line 483, :file "cljs/core.cljs"} string-hash-cache-count ^{:end-column 32, :end-line 483, :column 1, :line 483, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 32, :end-line 483, :column 1, :line 483, :file "cljs/core.cljs"} string-hash-cache-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 8294, :column 20, :line 8294, :file "cljs/core.cljs"} xform ^{:end-column 31, :end-line 8294, :column 26, :line 8294, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 19, :end-line 8294, :column 10, :line 8294, :file "cljs/core.cljs"} ->Eduction ^{:arglists ([^{:end-column 26, :end-line 8294, :column 20, :line 8294, :file "cljs/core.cljs"} xform ^{:end-column 31, :end-line 8294, :column 26, :line 8294, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 19, :end-line 8294, :column 10, :line 8294, :file "cljs/core.cljs"} {:arglists (^cljs.core/Eduction [^{:end-column 26, :end-line 8294, :column 20, :line 8294, :file "cljs/core.cljs"} xform ^{:end-column 31, :end-line 8294, :column 26, :line 8294, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 8294, :column 20, :line 8294, :file "cljs/core.cljs"} xform ^{:end-column 31, :end-line 8294, :column 26, :line 8294, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 19, :end-line 8294, :column 10, :line 8294, :file "cljs/core.cljs"} ->Eduction, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 6610, :column 21, :line 6610, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6610, :column 27, :line 6610, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6610, :column 34, :line 6610, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6610, :column 36, :line 6610, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6610, :column 8, :line 6610, :file "cljs/core.cljs"} tree-map-add ^{:arglists (^{:end-column 42, :end-line 6610, :column 21, :line 6610, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6610, :column 27, :line 6610, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6610, :column 34, :line 6610, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6610, :column 36, :line 6610, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6610, :column 8, :line 6610, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6610, :column 27, :line 6610, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6610, :column 34, :line 6610, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6610, :column 36, :line 6610, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 6610, :column 21, :line 6610, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6610, :column 27, :line 6610, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6610, :column 34, :line 6610, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6610, :column 36, :line 6610, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6610, :column 8, :line 6610, :file "cljs/core.cljs"} tree-map-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 45, :end-line 4937, :column 43, :line 4937, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 32, :end-line 4937, :column 10, :line 4937, :file "cljs/core.cljs"} ->ES6SetEntriesIterator ^{:arglists ([^{:mutable true, :end-column 45, :end-line 4937, :column 43, :line 4937, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 32, :end-line 4937, :column 10, :line 4937, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6SetEntriesIterator [^{:mutable true, :end-column 45, :end-line 4937, :column 43, :line 4937, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 45, :end-line 4937, :column 43, :line 4937, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 32, :end-line 4937, :column 10, :line 4937, :file "cljs/core.cljs"} ->ES6SetEntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} -with-meta ^{:arglists (^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} -with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 57, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8568, :column 17, :line 8568, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8568, :column 30, :line 8568, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8568, :column 47, :line 8568, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8567, :column 8, :line 8567, :file "cljs/core.cljs"} reset-cache ^{:arglists (^{:end-column 57, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8568, :column 17, :line 8568, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8568, :column 30, :line 8568, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8568, :column 47, :line 8568, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8567, :column 8, :line 8567, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8568, :column 17, :line 8568, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8568, :column 30, :line 8568, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8568, :column 47, :line 8568, :file "cljs/core.cljs"} hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 57, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8568, :column 17, :line 8568, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8568, :column 30, :line 8568, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8568, :column 47, :line 8568, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8567, :column 8, :line 8567, :file "cljs/core.cljs"} reset-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 42, :end-line 5085, :column 38, :line 5085, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 54, :end-line 5085, :column 52, :line 5085, :file "cljs/core.cljs"} i ^{:end-column 58, :end-line 5085, :column 54, :line 5085, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 37, :end-line 5085, :column 10, :line 5085, :file "cljs/core.cljs"} ->PersistentArrayMapIterator ^{:arglists ([^{:end-column 42, :end-line 5085, :column 38, :line 5085, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 54, :end-line 5085, :column 52, :line 5085, :file "cljs/core.cljs"} i ^{:end-column 58, :end-line 5085, :column 54, :line 5085, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 37, :end-line 5085, :column 10, :line 5085, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMapIterator [^{:end-column 42, :end-line 5085, :column 38, :line 5085, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 54, :end-line 5085, :column 52, :line 5085, :file "cljs/core.cljs"} i ^{:end-column 58, :end-line 5085, :column 54, :line 5085, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 42, :end-line 5085, :column 38, :line 5085, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 54, :end-line 5085, :column 52, :line 5085, :file "cljs/core.cljs"} i ^{:end-column 58, :end-line 5085, :column 54, :line 5085, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 37, :end-line 5085, :column 10, :line 5085, :file "cljs/core.cljs"} ->PersistentArrayMapIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 37, :end-line 5085, :column 10, :line 5085, :file "cljs/core.cljs"} PersistentArrayMapIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 37, :end-line 5085, :column 10, :line 5085, :file "cljs/core.cljs"} PersistentArrayMapIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 58, :end-line 5085, :column 37, :line 5085, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5085, :column 38, :line 5085, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 54, :end-line 5085, :column 52, :line 5085, :file "cljs/core.cljs"} i ^{:end-column 58, :end-line 5085, :column 54, :line 5085, :file "cljs/core.cljs"} cnt], :protocols #{Object}}, ^{:arglists (^{:end-column 18, :end-line 7377, :column 15, :line 7377, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7377, :column 16, :line 7377, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7377, :column 7, :line 7377, :file "cljs/core.cljs"} butlast ^{:arglists (^{:end-column 18, :end-line 7377, :column 15, :line 7377, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7377, :column 16, :line 7377, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7377, :column 7, :line 7377, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq [^{:end-column 18, :end-line 7377, :column 16, :line 7377, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7377, :column 15, :line 7377, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7377, :column 16, :line 7377, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7377, :column 7, :line 7377, :file "cljs/core.cljs"} butlast, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 3933, :column 17, :line 3933, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3933, :column 18, :line 3933, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} tail-off ^{:arglists (^{:end-column 21, :end-line 3933, :column 17, :line 3933, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3933, :column 18, :line 3933, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 3933, :column 18, :line 3933, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 3933, :column 17, :line 3933, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3933, :column 18, :line 3933, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} tail-off, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1890, :column 4, :line 1890, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1890, :column 5, :line 1890, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1891, :column 5, :line 1891, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1891, :column 7, :line 1891, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1892, :column 7, :line 1892, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1892, :column 9, :line 1892, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1892, :column 11, :line 1892, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} unchecked-subtract-int ^{:arglists (^{:end-column 7, :end-line 1890, :column 4, :line 1890, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1890, :column 5, :line 1890, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1891, :column 5, :line 1891, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1891, :column 7, :line 1891, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1892, :column 7, :line 1892, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1892, :column 9, :line 1892, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1892, :column 11, :line 1892, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1890, :column 5, :line 1890, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1891, :column 5, :line 1891, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1891, :column 7, :line 1891, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1892, :column 7, :line 1892, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1892, :column 11, :line 1892, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1890, :column 4, :line 1890, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1890, :column 5, :line 1890, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1891, :column 5, :line 1891, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1891, :column 7, :line 1891, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1892, :column 7, :line 1892, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1892, :column 9, :line 1892, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1892, :column 11, :line 1892, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} unchecked-subtract-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} -iterator ^{:arglists (^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} -iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7626, :column 4, :line 7626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7626, :column 5, :line 7626, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7623, :column 7, :line 7623, :file "cljs/core.cljs"} take-nth ^{:arglists (^{:end-column 7, :end-line 7626, :column 4, :line 7626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7626, :column 5, :line 7626, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7623, :column 7, :line 7623, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7626, :column 5, :line 7626, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7626, :column 4, :line 7626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7626, :column 5, :line 7626, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7623, :column 7, :line 7623, :file "cljs/core.cljs"} take-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 646, :column 3, :line 646, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 646, :column 4, :line 646, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 643, :column 7, :line 643, :file "cljs/core.cljs"} first ^{:arglists (^{:end-column 9, :end-line 646, :column 3, :line 646, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 646, :column 4, :line 646, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 643, :column 7, :line 643, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 646, :column 4, :line 646, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 646, :column 3, :line 646, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 646, :column 4, :line 646, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 643, :column 7, :line 643, :file "cljs/core.cljs"} first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies? ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1453, :column 3, :line 1453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1453, :column 4, :line 1453, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1451, :column 8, :line 1451, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1451, :column 16, :line 1451, :file "cljs/core.cljs"} seq? ^{:arglists (^{:end-column 6, :end-line 1453, :column 3, :line 1453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1453, :column 4, :line 1453, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1451, :column 8, :line 1451, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1451, :column 16, :line 1451, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1453, :column 4, :line 1453, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1453, :column 3, :line 1453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1453, :column 4, :line 1453, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1451, :column 8, :line 1451, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1451, :column 16, :line 1451, :file "cljs/core.cljs"} seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 38, :end-line 8457, :column 1, :line 8457, :file "cljs/core.cljs"} -global-hierarchy ^{:private true, :end-column 38, :end-line 8457, :column 1, :line 8457, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:private true, :end-column 38, :end-line 8457, :column 1, :line 8457, :file "cljs/core.cljs"} -global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8837, :column 10, :line 8837, :file "cljs/core.cljs"} UUID {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8837, :column 10, :line 8837, :file "cljs/core.cljs"} UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 21, :end-line 8837, :column 15, :line 8837, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 8837, :column 16, :line 8837, :file "cljs/core.cljs"} uuid], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} -sorted-seq-from ^{:arglists (^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} -sorted-seq-from, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8024, :column 3, :line 8024, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8024, :column 4, :line 8024, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8024, :column 6, :line 8024, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 8022, :column 7, :line 8022, :file "cljs/core.cljs"} println-str ^{:arglists (^{:end-column 11, :end-line 8024, :column 3, :line 8024, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8024, :column 4, :line 8024, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8024, :column 6, :line 8024, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 8022, :column 7, :line 8022, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 8024, :column 6, :line 8024, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8024, :column 3, :line 8024, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8024, :column 4, :line 8024, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8024, :column 6, :line 8024, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 8022, :column 7, :line 8022, :file "cljs/core.cljs"} println-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1096, :column 5, :line 1096, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1096, :column 10, :line 1096, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1105, :column 4, :line 1105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1105, :column 5, :line 1105, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1105, :column 10, :line 1105, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1105, :column 12, :line 1105, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1095, :column 8, :line 1095, :file "cljs/core.cljs"} linear-traversal-nth ^{:arglists (^{:end-column 12, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1096, :column 5, :line 1096, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1096, :column 10, :line 1096, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1105, :column 4, :line 1105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1105, :column 5, :line 1105, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1105, :column 10, :line 1105, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1105, :column 12, :line 1105, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1095, :column 8, :line 1095, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1096, :column 5, :line 1096, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1096, :column 10, :line 1096, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 1105, :column 5, :line 1105, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1105, :column 10, :line 1105, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1105, :column 12, :line 1105, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1096, :column 5, :line 1096, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1096, :column 10, :line 1096, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1105, :column 4, :line 1105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1105, :column 5, :line 1105, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1105, :column 10, :line 1105, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1105, :column 12, :line 1105, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1095, :column 8, :line 1095, :file "cljs/core.cljs"} linear-traversal-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3693, :column 3, :line 3693, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3693, :column 4, :line 3693, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3693, :column 6, :line 3693, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3690, :column 7, :line 3690, :file "cljs/core.cljs"} iterate ^{:arglists (^{:end-column 8, :end-line 3693, :column 3, :line 3693, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3693, :column 4, :line 3693, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3693, :column 6, :line 3693, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3690, :column 7, :line 3690, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 3693, :column 4, :line 3693, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3693, :column 6, :line 3693, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3693, :column 3, :line 3693, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3693, :column 4, :line 3693, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3693, :column 6, :line 3693, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3690, :column 7, :line 3690, :file "cljs/core.cljs"} iterate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} -empty ^{:arglists (^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} -empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 7980, :column 15, :line 7980, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7980, :column 16, :line 7980, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7980, :column 7, :line 7980, :file "cljs/core.cljs"} newline ^{:arglists (^{:end-column 21, :end-line 7980, :column 15, :line 7980, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7980, :column 16, :line 7980, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7980, :column 7, :line 7980, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 21, :end-line 7980, :column 16, :line 7980, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 7980, :column 15, :line 7980, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7980, :column 16, :line 7980, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7980, :column 7, :line 7980, :file "cljs/core.cljs"} newline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 258, :column 14, :line 258, :file "cljs/core.cljs"} ILookup ^{:impls (cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/TransientHashMap cljs.core/PersistentHashMap cljs.core/TransientArrayMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 258, :column 14, :line 258, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 258, :column 14, :line 258, :file "cljs/core.cljs"} ILookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} -chunked-rest ^{:arglists (^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} -chunked-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 7843, :column 17, :line 7843, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7843, :column 18, :line 7843, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7843, :column 25, :line 7843, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7843, :column 27, :line 7843, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7843, :column 7, :line 7843, :file "cljs/core.cljs"} write-all ^{:arglists (^{:end-column 30, :end-line 7843, :column 17, :line 7843, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7843, :column 18, :line 7843, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7843, :column 25, :line 7843, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7843, :column 27, :line 7843, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7843, :column 7, :line 7843, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 7843, :column 18, :line 7843, :file "cljs/core.cljs"} writer & ^{:end-column 30, :end-line 7843, :column 27, :line 7843, :file "cljs/core.cljs"} ss]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 7843, :column 17, :line 7843, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7843, :column 18, :line 7843, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7843, :column 25, :line 7843, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7843, :column 27, :line 7843, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7843, :column 7, :line 7843, :file "cljs/core.cljs"} write-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1252, :column 20, :line 1252, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1252, :column 21, :line 1252, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1252, :column 8, :line 1252, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1252, :column 16, :line 1252, :file "cljs/core.cljs"} fn? ^{:arglists (^{:end-column 23, :end-line 1252, :column 20, :line 1252, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1252, :column 21, :line 1252, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1252, :column 8, :line 1252, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1252, :column 16, :line 1252, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1253, :column 8, :line 1253, :file "cljs/core.cljs"} boolean [^{:end-column 23, :end-line 1252, :column 21, :line 1252, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1252, :column 20, :line 1252, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1252, :column 21, :line 1252, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1252, :column 8, :line 1252, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1252, :column 16, :line 1252, :file "cljs/core.cljs"} fn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} -prefer-method ^{:arglists (^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} -prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -assoc ^{:arglists (^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7767, :column 4, :line 7767, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7767, :column 5, :line 7767, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7770, :column 4, :line 7770, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7770, :column 5, :line 7770, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7770, :column 7, :line 7770, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7760, :column 7, :line 7760, :file "cljs/core.cljs"} doall ^{:arglists (^{:end-column 10, :end-line 7767, :column 4, :line 7767, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7767, :column 5, :line 7767, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7770, :column 4, :line 7770, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7770, :column 5, :line 7770, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7770, :column 7, :line 7770, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7760, :column 7, :line 7760, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 7767, :column 5, :line 7767, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 7770, :column 5, :line 7770, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7770, :column 7, :line 7770, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7767, :column 4, :line 7767, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7767, :column 5, :line 7767, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7770, :column 4, :line 7770, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7770, :column 5, :line 7770, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7770, :column 7, :line 7770, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7760, :column 7, :line 7760, :file "cljs/core.cljs"} doall, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 2371, :column 35, :line 2371, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2371, :column 36, :line 2371, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2371, :column 38, :line 2371, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2371, :column 8, :line 2371, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2371, :column 16, :line 2371, :file "cljs/core.cljs"} keyword-identical? ^{:arglists (^{:end-column 40, :end-line 2371, :column 35, :line 2371, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2371, :column 36, :line 2371, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2371, :column 38, :line 2371, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2371, :column 8, :line 2371, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2371, :column 16, :line 2371, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 38, :end-line 2371, :column 36, :line 2371, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2371, :column 38, :line 2371, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 2371, :column 35, :line 2371, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2371, :column 36, :line 2371, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2371, :column 38, :line 2371, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2371, :column 8, :line 2371, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2371, :column 16, :line 2371, :file "cljs/core.cljs"} keyword-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 3927, :column 16, :line 3927, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3927, :column 17, :line 3927, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3927, :column 22, :line 3927, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3927, :column 26, :line 3927, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3927, :column 8, :line 3927, :file "cljs/core.cljs"} pv-aset ^{:arglists (^{:end-column 30, :end-line 3927, :column 16, :line 3927, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3927, :column 17, :line 3927, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3927, :column 22, :line 3927, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3927, :column 26, :line 3927, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3927, :column 8, :line 3927, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3927, :column 17, :line 3927, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3927, :column 22, :line 3927, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3927, :column 26, :line 3927, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 3927, :column 16, :line 3927, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3927, :column 17, :line 3927, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3927, :column 22, :line 3927, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3927, :column 26, :line 3927, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3927, :column 8, :line 3927, :file "cljs/core.cljs"} pv-aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8833, :column 3, :line 8833, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8833, :column 4, :line 8833, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8831, :column 7, :line 8831, :file "cljs/core.cljs"} prefers ^{:arglists (^{:end-column 12, :end-line 8833, :column 3, :line 8833, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8833, :column 4, :line 8833, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8831, :column 7, :line 8831, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8833, :column 4, :line 8833, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8833, :column 3, :line 8833, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8833, :column 4, :line 8833, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8831, :column 7, :line 8831, :file "cljs/core.cljs"} prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} -js->clj ^{:arglists (^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} -js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2401, :column 10, :line 2401, :file "cljs/core.cljs"} LazySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2401, :column 10, :line 2401, :file "cljs/core.cljs"} LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 2401, :column 18, :line 2401, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2401, :column 19, :line 2401, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2401, :column 34, :line 2401, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2401, :column 47, :line 2401, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2401, :column 59, :line 2401, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8272, :column 4, :line 8272, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8284, :column 4, :line 8284, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8284, :column 5, :line 8284, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8269, :column 7, :line 8269, :file "cljs/core.cljs"} dedupe ^{:arglists (^{:end-column 6, :end-line 8272, :column 4, :line 8272, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8284, :column 4, :line 8284, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8284, :column 5, :line 8284, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8269, :column 7, :line 8269, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 10, :end-line 8284, :column 5, :line 8284, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8272, :column 4, :line 8272, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8284, :column 4, :line 8284, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8284, :column 5, :line 8284, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8269, :column 7, :line 8269, :file "cljs/core.cljs"} dedupe, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4488, :column 37, :line 4488, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4488, :column 38, :line 4488, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4488, :column 41, :line 4488, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4488, :column 8, :line 4488, :file "cljs/core.cljs"} unchecked-editable-array-for ^{:arglists (^{:end-column 43, :end-line 4488, :column 37, :line 4488, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4488, :column 38, :line 4488, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4488, :column 41, :line 4488, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4488, :column 8, :line 4488, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 4488, :column 38, :line 4488, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4488, :column 41, :line 4488, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4488, :column 37, :line 4488, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4488, :column 38, :line 4488, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4488, :column 41, :line 4488, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4488, :column 8, :line 4488, :file "cljs/core.cljs"} unchecked-editable-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 35, :end-line 4911, :column 33, :line 4911, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 4911, :column 10, :line 4911, :file "cljs/core.cljs"} ->ES6Iterator ^{:arglists ([^{:mutable true, :end-column 35, :end-line 4911, :column 33, :line 4911, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 4911, :column 10, :line 4911, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6Iterator [^{:mutable true, :end-column 35, :end-line 4911, :column 33, :line 4911, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 35, :end-line 4911, :column 33, :line 4911, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 4911, :column 10, :line 4911, :file "cljs/core.cljs"} ->ES6Iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3919, :column 10, :line 3919, :file "cljs/core.cljs"} VectorNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3919, :column 10, :line 3919, :file "cljs/core.cljs"} VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 3919, :column 21, :line 3919, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 3919, :column 22, :line 3919, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3919, :column 27, :line 3919, :file "cljs/core.cljs"} arr], :protocols #{}}, ^{:arglists (^{:end-column 10, :end-line 1241, :column 4, :line 1241, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1241, :column 5, :line 1241, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1242, :column 4, :line 1242, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1242, :column 5, :line 1242, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1242, :column 10, :line 1242, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1245, :column 4, :line 1245, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1245, :column 5, :line 1245, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1245, :column 10, :line 1245, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1245, :column 12, :line 1245, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1245, :column 14, :line 1245, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} dissoc ^{:arglists (^{:end-column 10, :end-line 1241, :column 4, :line 1241, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1241, :column 5, :line 1241, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1242, :column 4, :line 1242, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1242, :column 5, :line 1242, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1242, :column 10, :line 1242, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1245, :column 4, :line 1245, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1245, :column 5, :line 1245, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1245, :column 10, :line 1245, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1245, :column 12, :line 1245, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1245, :column 14, :line 1245, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1241, :column 5, :line 1241, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1242, :column 5, :line 1242, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1242, :column 10, :line 1242, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1245, :column 5, :line 1245, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1245, :column 10, :line 1245, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1245, :column 14, :line 1245, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1241, :column 4, :line 1241, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1241, :column 5, :line 1241, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1242, :column 4, :line 1242, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1242, :column 5, :line 1242, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1242, :column 10, :line 1242, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1245, :column 4, :line 1245, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1245, :column 5, :line 1245, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1245, :column 10, :line 1245, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1245, :column 12, :line 1245, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1245, :column 14, :line 1245, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3349, :column 4, :line 3349, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3349, :column 5, :line 3349, :file "cljs/core.cljs"} x] ^{:end-column 34, :end-line 3350, :column 4, :line 3350, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3350, :column 5, :line 3350, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 3350, :column 7, :line 3350, :file "cljs/core.cljs"} & ^{:end-column 33, :end-line 3350, :column 9, :line 3350, :file "cljs/core.cljs"} {:keys ^{:end-column 32, :end-line 3350, :column 16, :line 3350, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3350, :column 17, :line 3350, :file "cljs/core.cljs"} meta ^{:end-column 32, :end-line 3350, :column 22, :line 3350, :file "cljs/core.cljs"} validator]}]), :doc "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.", :end-column 12, :end-line 3335, :column 7, :line 3335, :file "cljs/core.cljs"} atom ^{:declared true, :end-column 73, :end-line 5353, :column 68, :line 5353, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 73, :end-line 5353, :column 68, :line 5353, :file "cljs/core.cljs"} atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2005, :column 3, :line 2005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2005, :column 4, :line 2005, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2005, :column 6, :line 2005, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} bit-shift-right ^{:arglists (^{:end-column 8, :end-line 2005, :column 3, :line 2005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2005, :column 4, :line 2005, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2005, :column 6, :line 2005, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2005, :column 4, :line 2005, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2005, :column 6, :line 2005, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2005, :column 3, :line 2005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2005, :column 4, :line 2005, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2005, :column 6, :line 2005, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version* ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} {:tag string, :op :var, :name ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} -first ^{:arglists (^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} -first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1327, :column 3, :line 1327, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1327, :column 4, :line 1327, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1324, :column 7, :line 1324, :file "cljs/core.cljs"} peek ^{:arglists (^{:end-column 9, :end-line 1327, :column 3, :line 1327, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1327, :column 4, :line 1327, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1324, :column 7, :line 1324, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1327, :column 4, :line 1327, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1327, :column 3, :line 1327, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1327, :column 4, :line 1327, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1324, :column 7, :line 1324, :file "cljs/core.cljs"} peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 24, :end-line 299, :column 14, :line 299, :file "cljs/core.cljs"} IKVReduce ^{:impls (cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 24, :end-line 299, :column 14, :line 299, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 24, :end-line 299, :column 14, :line 299, :file "cljs/core.cljs"} IKVReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} aget ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6210, :column 10, :line 6210, :file "cljs/core.cljs"} PersistentTreeMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6210, :column 10, :line 6210, :file "cljs/core.cljs"} PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 84, :end-line 6210, :column 31, :line 6210, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 6210, :column 32, :line 6210, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6210, :column 37, :line 6210, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6210, :column 44, :line 6210, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6210, :column 52, :line 6210, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6210, :column 63, :line 6210, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6210, :column 77, :line 6210, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -write ^{:arglists (^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -write, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 2959, :column 12, :line 2959, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2959, :column 13, :line 2959, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2959, :column 7, :line 2959, :file "cljs/core.cljs"} iter ^{:arglists (^{:end-column 18, :end-line 2959, :column 12, :line 2959, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2959, :column 13, :line 2959, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2959, :column 7, :line 2959, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 2959, :column 13, :line 2959, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2959, :column 12, :line 2959, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2959, :column 13, :line 2959, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2959, :column 7, :line 2959, :file "cljs/core.cljs"} iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7480, :column 3, :line 7480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7480, :column 4, :line 7480, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7480, :column 7, :line 7480, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7480, :column 12, :line 7480, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7479, :column 7, :line 7479, :file "cljs/core.cljs"} mk-bound-fn ^{:arglists (^{:end-column 16, :end-line 7480, :column 3, :line 7480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7480, :column 4, :line 7480, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7480, :column 7, :line 7480, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7480, :column 12, :line 7480, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7479, :column 7, :line 7479, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7480, :column 4, :line 7480, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7480, :column 7, :line 7480, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7480, :column 12, :line 7480, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7480, :column 3, :line 7480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7480, :column 4, :line 7480, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7480, :column 7, :line 7480, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7480, :column 12, :line 7480, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7479, :column 7, :line 7479, :file "cljs/core.cljs"} mk-bound-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1037, :column 3, :line 1037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1035, :column 7, :line 1035, :file "cljs/core.cljs"} last ^{:arglists (^{:end-column 6, :end-line 1037, :column 3, :line 1037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1035, :column 7, :line 1035, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1037, :column 3, :line 1037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1035, :column 7, :line 1035, :file "cljs/core.cljs"} last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8000, :column 3, :line 8000, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8000, :column 4, :line 8000, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8000, :column 6, :line 8000, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7995, :column 7, :line 7995, :file "cljs/core.cljs"} pr ^{:arglists (^{:end-column 11, :end-line 8000, :column 3, :line 8000, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8000, :column 4, :line 8000, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8000, :column 6, :line 8000, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7995, :column 7, :line 7995, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 8000, :column 6, :line 8000, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8000, :column 3, :line 8000, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8000, :column 4, :line 8000, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8000, :column 6, :line 8000, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7995, :column 7, :line 7995, :file "cljs/core.cljs"} pr, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 58, :end-line 6203, :column 26, :line 6203, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6203, :column 27, :line 6203, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6203, :column 32, :line 6203, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6203, :column 8, :line 6203, :file "cljs/core.cljs"} tree-map-seq-push ^{:arglists (^{:end-column 58, :end-line 6203, :column 26, :line 6203, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6203, :column 27, :line 6203, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6203, :column 32, :line 6203, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6203, :column 8, :line 6203, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 6203, :column 27, :line 6203, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6203, :column 32, :line 6203, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 58, :end-line 6203, :column 26, :line 6203, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6203, :column 27, :line 6203, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6203, :column 32, :line 6203, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6203, :column 8, :line 6203, :file "cljs/core.cljs"} tree-map-seq-push, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2381, :column 3, :line 2381, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2381, :column 4, :line 2381, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} namespace ^{:arglists (^{:end-column 6, :end-line 2381, :column 3, :line 2381, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2381, :column 4, :line 2381, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string [^{:end-column 6, :end-line 2381, :column 4, :line 2381, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2381, :column 3, :line 2381, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2381, :column 4, :line 2381, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6883, :column 3, :line 6883, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6883, :column 4, :line 6883, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6883, :column 6, :line 6883, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6880, :column 7, :line 6880, :file "cljs/core.cljs"} obj-map ^{:arglists (^{:end-column 14, :end-line 6883, :column 3, :line 6883, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6883, :column 4, :line 6883, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6883, :column 6, :line 6883, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6880, :column 7, :line 6880, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 14, :end-line 6883, :column 6, :line 6883, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6883, :column 3, :line 6883, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6883, :column 4, :line 6883, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6883, :column 6, :line 6883, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6880, :column 7, :line 6880, :file "cljs/core.cljs"} obj-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 771, :column 10, :line 771, :file "cljs/core.cljs"} Reduced {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 771, :column 10, :line 771, :file "cljs/core.cljs"} Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 771, :column 18, :line 771, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 771, :column 19, :line 771, :file "cljs/core.cljs"} val], :protocols #{cljs.core/IDeref}}, ^{:arglists (^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} -conj ^{:arglists (^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} -conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5847, :column 10, :line 5847, :file "cljs/core.cljs"} NodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5847, :column 10, :line 5847, :file "cljs/core.cljs"} NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 5847, :column 18, :line 5847, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5847, :column 19, :line 5847, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5847, :column 24, :line 5847, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5847, :column 30, :line 5847, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5847, :column 32, :line 5847, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5847, :column 44, :line 5847, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:declared true, :end-column 24, :end-line 479, :column 22, :line 479, :file "cljs/core.cljs"} = ^{:arglists (^{:end-column 7, :end-line 681, :column 4, :line 681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 681, :column 5, :line 681, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 682, :column 4, :line 682, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 682, :column 5, :line 682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 682, :column 7, :line 682, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 687, :column 4, :line 687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 687, :column 5, :line 687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 687, :column 7, :line 687, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 687, :column 9, :line 687, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 687, :column 11, :line 687, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 676, :column 8, :line 676, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 676, :column 16, :line 676, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 681, :column 5, :line 681, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 7, :end-line 682, :column 5, :line 682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 682, :column 7, :line 682, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 687, :column 5, :line 687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 687, :column 7, :line 687, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 687, :column 11, :line 687, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 681, :column 4, :line 681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 681, :column 5, :line 681, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 682, :column 4, :line 682, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 682, :column 5, :line 682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 682, :column 7, :line 682, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 687, :column 4, :line 687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 687, :column 5, :line 687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 687, :column 7, :line 687, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 687, :column 9, :line 687, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 687, :column 11, :line 687, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 676, :column 8, :line 676, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 676, :column 16, :line 676, :file "cljs/core.cljs"} =, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 28, :end-line 359, :column 14, :line 359, :file "cljs/core.cljs"} ITransientMap ^{:impls (cljs.core/TransientHashMap cljs.core/TransientArrayMap), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 28, :end-line 359, :column 14, :line 359, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 28, :end-line 359, :column 14, :line 359, :file "cljs/core.cljs"} ITransientMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 3949, :column 18, :line 3949, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3949, :column 19, :line 3949, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3949, :column 22, :line 3949, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3949, :column 28, :line 3949, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3949, :column 35, :line 3949, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3949, :column 8, :line 3949, :file "cljs/core.cljs"} push-tail ^{:arglists (^{:end-column 44, :end-line 3949, :column 18, :line 3949, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3949, :column 19, :line 3949, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3949, :column 22, :line 3949, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3949, :column 28, :line 3949, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3949, :column 35, :line 3949, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3949, :column 8, :line 3949, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 22, :end-line 3949, :column 19, :line 3949, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3949, :column 22, :line 3949, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3949, :column 28, :line 3949, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3949, :column 35, :line 3949, :file "cljs/core.cljs"} tailnode]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 3949, :column 18, :line 3949, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3949, :column 19, :line 3949, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3949, :column 22, :line 3949, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3949, :column 28, :line 3949, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3949, :column 35, :line 3949, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3949, :column 8, :line 3949, :file "cljs/core.cljs"} push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3580, :column 4, :line 3580, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3580, :column 5, :line 3580, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3595, :column 4, :line 3595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3595, :column 5, :line 3595, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3595, :column 7, :line 3595, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3576, :column 7, :line 3576, :file "cljs/core.cljs"} take ^{:arglists (^{:end-column 7, :end-line 3580, :column 4, :line 3580, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3580, :column 5, :line 3580, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3595, :column 4, :line 3595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3595, :column 5, :line 3595, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3595, :column 7, :line 3595, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3576, :column 7, :line 3576, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3580, :column 5, :line 3580, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3595, :column 5, :line 3595, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3595, :column 7, :line 3595, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3580, :column 4, :line 3580, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3580, :column 5, :line 3580, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3595, :column 4, :line 3595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3595, :column 5, :line 3595, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3595, :column 7, :line 3595, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3576, :column 7, :line 3576, :file "cljs/core.cljs"} take, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1398, :column 3, :line 1398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1398, :column 4, :line 1398, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1396, :column 8, :line 1396, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1396, :column 16, :line 1396, :file "cljs/core.cljs"} vector? ^{:arglists (^{:end-column 6, :end-line 1398, :column 3, :line 1398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1398, :column 4, :line 1398, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1396, :column 8, :line 1396, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1396, :column 16, :line 1396, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1398, :column 4, :line 1398, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1398, :column 3, :line 1398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1398, :column 4, :line 1398, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1396, :column 8, :line 1396, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1396, :column 16, :line 1396, :file "cljs/core.cljs"} vector?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 46, :end-line 5379, :column 34, :line 5379, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5379, :column 35, :line 5379, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5379, :column 42, :line 5379, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5379, :column 8, :line 5379, :file "cljs/core.cljs"} bitmap-indexed-node-index ^{:arglists (^{:end-column 46, :end-line 5379, :column 34, :line 5379, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5379, :column 35, :line 5379, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5379, :column 42, :line 5379, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5379, :column 8, :line 5379, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 42, :end-line 5379, :column 35, :line 5379, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5379, :column 42, :line 5379, :file "cljs/core.cljs"} bit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 5379, :column 34, :line 5379, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5379, :column 35, :line 5379, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5379, :column 42, :line 5379, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5379, :column 8, :line 5379, :file "cljs/core.cljs"} bitmap-indexed-node-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1463, :column 24, :line 1463, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1463, :column 25, :line 1463, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} boolean ^{:arglists (^{:end-column 27, :end-line 1463, :column 24, :line 1463, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1463, :column 25, :line 1463, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 1463, :column 25, :line 1463, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1463, :column 24, :line 1463, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1463, :column 25, :line 1463, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} boolean, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 372, :column 14, :line 372, :file "cljs/core.cljs"} IChunk ^{:impls (cljs.core/ArrayChunk), :protocol-info {:methods {^{:end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 372, :column 14, :line 372, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 372, :column 14, :line 372, :file "cljs/core.cljs"} IChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2001, :column 3, :line 2001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2001, :column 6, :line 2001, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1999, :column 7, :line 1999, :file "cljs/core.cljs"} bit-shift-left ^{:arglists (^{:end-column 8, :end-line 2001, :column 3, :line 2001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2001, :column 6, :line 2001, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1999, :column 7, :line 1999, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2001, :column 6, :line 2001, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2001, :column 3, :line 2001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2001, :column 6, :line 2001, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1999, :column 7, :line 1999, :file "cljs/core.cljs"} bit-shift-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1957, :column 3, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 1955, :column 7, :line 1955, :file "cljs/core.cljs"} rand-int ^{:arglists (^{:end-column 6, :end-line 8432, :column 3, :line 8432, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 8430, :column 7, :line 8430, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8432, :column 3, :line 8432, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 8430, :column 7, :line 8430, :file "cljs/core.cljs"} rand-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} aclone ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} aclone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 6264, :column 18, :line 6264, :file "cljs/core.cljs"} BlackNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 6367, :column 10, :line 6367, :file "cljs/core.cljs"} BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 57, :end-line 6367, :column 20, :line 6367, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6367, :column 21, :line 6367, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6367, :column 25, :line 6367, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6367, :column 29, :line 6367, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6367, :column 34, :line 6367, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6367, :column 50, :line 6367, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 16, :end-line 2586, :column 13, :line 2586, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2586, :column 14, :line 2586, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2586, :column 7, :line 2586, :file "cljs/core.cljs"} chunk ^{:arglists (^{:end-column 16, :end-line 2586, :column 13, :line 2586, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2586, :column 14, :line 2586, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2586, :column 7, :line 2586, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2586, :column 14, :line 2586, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 2586, :column 13, :line 2586, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2586, :column 14, :line 2586, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2586, :column 7, :line 2586, :file "cljs/core.cljs"} chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1786, :column 3, :line 1786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1786, :column 4, :line 1786, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} dec ^{:arglists (^{:end-column 6, :end-line 1786, :column 3, :line 1786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1786, :column 4, :line 1786, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1786, :column 4, :line 1786, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1786, :column 3, :line 1786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1786, :column 4, :line 1786, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 2078, :column 10, :line 2078, :file "cljs/core.cljs"} map ^{:arglists (^{:end-column 7, :end-line 3536, :column 4, :line 3536, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3536, :column 5, :line 3536, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3545, :column 4, :line 3545, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3545, :column 5, :line 3545, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3545, :column 7, :line 3545, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3556, :column 4, :line 3556, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3556, :column 5, :line 3556, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3556, :column 7, :line 3556, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3556, :column 10, :line 3556, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3562, :column 4, :line 3562, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3562, :column 5, :line 3562, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3562, :column 7, :line 3562, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3562, :column 10, :line 3562, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3562, :column 13, :line 3562, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3568, :column 4, :line 3568, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3568, :column 5, :line 3568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3568, :column 7, :line 3568, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3568, :column 10, :line 3568, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3568, :column 13, :line 3568, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3568, :column 16, :line 3568, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3568, :column 18, :line 3568, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 11, :end-line 3529, :column 7, :line 3529, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3536, :column 5, :line 3536, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3545, :column 5, :line 3545, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3545, :column 7, :line 3545, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3556, :column 5, :line 3556, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3556, :column 7, :line 3556, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3556, :column 10, :line 3556, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3562, :column 5, :line 3562, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3562, :column 7, :line 3562, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3562, :column 10, :line 3562, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3562, :column 13, :line 3562, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 3568, :column 5, :line 3568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3568, :column 7, :line 3568, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3568, :column 10, :line 3568, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3568, :column 13, :line 3568, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 3568, :column 18, :line 3568, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3536, :column 4, :line 3536, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3536, :column 5, :line 3536, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3545, :column 4, :line 3545, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3545, :column 5, :line 3545, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3545, :column 7, :line 3545, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3556, :column 4, :line 3556, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3556, :column 5, :line 3556, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3556, :column 7, :line 3556, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3556, :column 10, :line 3556, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3562, :column 4, :line 3562, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3562, :column 5, :line 3562, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3562, :column 7, :line 3562, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3562, :column 10, :line 3562, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3562, :column 13, :line 3562, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3568, :column 4, :line 3568, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3568, :column 5, :line 3568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3568, :column 7, :line 3568, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3568, :column 10, :line 3568, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3568, :column 13, :line 3568, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3568, :column 16, :line 3568, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3568, :column 18, :line 3568, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 11, :end-line 3529, :column 7, :line 3529, :file "cljs/core.cljs"} map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7717, :column 4, :line 7717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7717, :column 5, :line 7717, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7724, :column 4, :line 7724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7724, :column 5, :line 7724, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7724, :column 7, :line 7724, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7731, :column 4, :line 7731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7731, :column 5, :line 7731, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7731, :column 7, :line 7731, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7731, :column 9, :line 7731, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7738, :column 5, :line 7738, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7738, :column 7, :line 7738, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7738, :column 9, :line 7738, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7738, :column 11, :line 7738, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7738, :column 13, :line 7738, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7711, :column 7, :line 7711, :file "cljs/core.cljs"} juxt ^{:arglists (^{:end-column 7, :end-line 7717, :column 4, :line 7717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7717, :column 5, :line 7717, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7724, :column 4, :line 7724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7724, :column 5, :line 7724, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7724, :column 7, :line 7724, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7731, :column 4, :line 7731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7731, :column 5, :line 7731, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7731, :column 7, :line 7731, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7731, :column 9, :line 7731, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7738, :column 5, :line 7738, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7738, :column 7, :line 7738, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7738, :column 9, :line 7738, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7738, :column 11, :line 7738, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7738, :column 13, :line 7738, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7711, :column 7, :line 7711, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7717, :column 5, :line 7717, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 7724, :column 5, :line 7724, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7724, :column 7, :line 7724, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 7731, :column 5, :line 7731, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7731, :column 7, :line 7731, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7731, :column 9, :line 7731, :file "cljs/core.cljs"} h] ^function [^{:end-column 7, :end-line 7738, :column 5, :line 7738, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7738, :column 7, :line 7738, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7738, :column 9, :line 7738, :file "cljs/core.cljs"} h & ^{:end-column 16, :end-line 7738, :column 13, :line 7738, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7717, :column 4, :line 7717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7717, :column 5, :line 7717, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7724, :column 4, :line 7724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7724, :column 5, :line 7724, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7724, :column 7, :line 7724, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7731, :column 4, :line 7731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7731, :column 5, :line 7731, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7731, :column 7, :line 7731, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7731, :column 9, :line 7731, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7738, :column 5, :line 7738, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7738, :column 7, :line 7738, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7738, :column 9, :line 7738, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7738, :column 11, :line 7738, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7738, :column 13, :line 7738, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7711, :column 7, :line 7711, :file "cljs/core.cljs"} juxt, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1741, :column 4, :line 1741, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1741, :column 5, :line 1741, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1741, :column 7, :line 1741, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1741, :column 9, :line 1741, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1741, :column 11, :line 1741, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1736, :column 8, :line 1736, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1736, :column 16, :line 1736, :file "cljs/core.cljs"} < ^{:arglists (^{:end-column 7, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1741, :column 4, :line 1741, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1741, :column 5, :line 1741, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1741, :column 7, :line 1741, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1741, :column 9, :line 1741, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1741, :column 11, :line 1741, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1736, :column 8, :line 1736, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1736, :column 16, :line 1736, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1741, :column 5, :line 1741, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1741, :column 7, :line 1741, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1741, :column 11, :line 1741, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1741, :column 4, :line 1741, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1741, :column 5, :line 1741, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1741, :column 7, :line 1741, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1741, :column 9, :line 1741, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1741, :column 11, :line 1741, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1736, :column 8, :line 1736, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1736, :column 16, :line 1736, :file "cljs/core.cljs"} <, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5396, :column 24, :line 5396, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5396, :column 25, :line 5396, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5396, :column 29, :line 5396, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5396, :column 31, :line 5396, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} inode-kv-reduce ^{:arglists (^{:end-column 36, :end-line 5396, :column 24, :line 5396, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5396, :column 25, :line 5396, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5396, :column 29, :line 5396, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5396, :column 31, :line 5396, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 5396, :column 25, :line 5396, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5396, :column 29, :line 5396, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5396, :column 31, :line 5396, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5396, :column 24, :line 5396, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5396, :column 25, :line 5396, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5396, :column 29, :line 5396, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5396, :column 31, :line 5396, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} inode-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4776, :column 26, :line 4776, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4776, :column 27, :line 4776, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4776, :column 29, :line 4776, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4776, :column 31, :line 4776, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4776, :column 8, :line 4776, :file "cljs/core.cljs"} obj-map->hash-map ^{:arglists (^{:end-column 33, :end-line 4776, :column 26, :line 4776, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4776, :column 27, :line 4776, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4776, :column 29, :line 4776, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4776, :column 31, :line 4776, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4776, :column 8, :line 4776, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 4776, :column 27, :line 4776, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4776, :column 29, :line 4776, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4776, :column 31, :line 4776, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4776, :column 26, :line 4776, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4776, :column 27, :line 4776, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4776, :column 29, :line 4776, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4776, :column 31, :line 4776, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4776, :column 8, :line 4776, :file "cljs/core.cljs"} obj-map->hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 657, :column 3, :line 657, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 657, :column 4, :line 657, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 654, :column 8, :line 654, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 654, :column 12, :line 654, :file "cljs/core.cljs"} rest ^{:arglists (^{:end-column 9, :end-line 657, :column 3, :line 657, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 657, :column 4, :line 657, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 654, :column 8, :line 654, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 654, :column 12, :line 654, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 657, :column 4, :line 657, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 657, :column 3, :line 657, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 657, :column 4, :line 657, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 654, :column 8, :line 654, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 654, :column 12, :line 654, :file "cljs/core.cljs"} rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8876, :column 3, :line 8876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8876, :column 4, :line 8876, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8872, :column 7, :line 8872, :file "cljs/core.cljs"} ex-data ^{:arglists (^{:end-column 7, :end-line 8876, :column 3, :line 8876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8876, :column 4, :line 8876, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8872, :column 7, :line 8872, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8876, :column 4, :line 8876, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8876, :column 3, :line 8876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8876, :column 4, :line 8876, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8872, :column 7, :line 8872, :file "cljs/core.cljs"} ex-data, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 5026, :column 10, :line 5026, :file "cljs/core.cljs"} PersistentArrayMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 5026, :column 10, :line 5026, :file "cljs/core.cljs"} PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 5026, :column 32, :line 5026, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5026, :column 33, :line 5026, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5026, :column 37, :line 5026, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5026, :column 39, :line 5026, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} -drop-first ^{:arglists (^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} -drop-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8473, :column 4, :line 8473, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8473, :column 5, :line 8473, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8473, :column 11, :line 8473, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8474, :column 5, :line 8474, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8474, :column 7, :line 8474, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8474, :column 13, :line 8474, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8467, :column 8, :line 8467, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8467, :column 16, :line 8467, :file "cljs/core.cljs"} isa? ^{:arglists (^{:end-column 18, :end-line 8473, :column 4, :line 8473, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8473, :column 5, :line 8473, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8473, :column 11, :line 8473, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8474, :column 5, :line 8474, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8474, :column 7, :line 8474, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8474, :column 13, :line 8474, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8467, :column 8, :line 8467, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8467, :column 16, :line 8467, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8473, :column 5, :line 8473, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8473, :column 11, :line 8473, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8474, :column 5, :line 8474, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8474, :column 7, :line 8474, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8474, :column 13, :line 8474, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8473, :column 4, :line 8473, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8473, :column 5, :line 8473, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8473, :column 11, :line 8473, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8474, :column 5, :line 8474, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8474, :column 7, :line 8474, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8474, :column 13, :line 8474, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8467, :column 8, :line 8467, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8467, :column 16, :line 8467, :file "cljs/core.cljs"} isa?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} -clone ^{:arglists (^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} -clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4731, :column 10, :line 4731, :file "cljs/core.cljs"} ->NeverEquiv ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4731, :column 10, :line 4731, :file "cljs/core.cljs"} {:arglists (^cljs.core/NeverEquiv []), :tag function, :op :var, :name ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4731, :column 10, :line 4731, :file "cljs/core.cljs"} ->NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7807, :column 3, :line 7807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7807, :column 4, :line 7807, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7807, :column 7, :line 7807, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7805, :column 7, :line 7805, :file "cljs/core.cljs"} re-seq ^{:arglists (^{:end-column 9, :end-line 7807, :column 3, :line 7807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7807, :column 4, :line 7807, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7807, :column 7, :line 7807, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7805, :column 7, :line 7805, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7807, :column 4, :line 7807, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7807, :column 7, :line 7807, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7807, :column 3, :line 7807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7807, :column 4, :line 7807, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7807, :column 7, :line 7807, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7805, :column 7, :line 7805, :file "cljs/core.cljs"} re-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 8455, :column 3, :line 8455, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8453, :column 7, :line 8453, :file "cljs/core.cljs"} make-hierarchy ^{:arglists (^{:end-column 5, :end-line 8455, :column 3, :line 8455, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8453, :column 7, :line 8453, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 8455, :column 3, :line 8455, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8453, :column 7, :line 8453, :file "cljs/core.cljs"} make-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 479, :column 15, :line 479, :file "cljs/core.cljs"} Symbol {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 562, :column 10, :line 562, :file "cljs/core.cljs"} Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 562, :column 17, :line 562, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 562, :column 18, :line 562, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 562, :column 21, :line 562, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 562, :column 26, :line 562, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 562, :column 40, :line 562, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 562, :column 46, :line 562, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 48, :end-line 4462, :column 21, :line 4462, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4462, :column 22, :line 4462, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4462, :column 25, :line 4462, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4462, :column 31, :line 4462, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4462, :column 38, :line 4462, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4462, :column 8, :line 4462, :file "cljs/core.cljs"} tv-push-tail ^{:arglists (^{:end-column 48, :end-line 4462, :column 21, :line 4462, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4462, :column 22, :line 4462, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4462, :column 25, :line 4462, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4462, :column 31, :line 4462, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4462, :column 38, :line 4462, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4462, :column 8, :line 4462, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 4462, :column 22, :line 4462, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4462, :column 25, :line 4462, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4462, :column 31, :line 4462, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4462, :column 38, :line 4462, :file "cljs/core.cljs"} tail-node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 48, :end-line 4462, :column 21, :line 4462, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4462, :column 22, :line 4462, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4462, :column 25, :line 4462, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4462, :column 31, :line 4462, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4462, :column 38, :line 4462, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4462, :column 8, :line 4462, :file "cljs/core.cljs"} tv-push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} -reduce ^{:arglists (^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} -reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} -count ^{:arglists (^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} -count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3276, :column 4, :line 3276, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3276, :column 5, :line 3276, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3286, :column 4, :line 3286, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3286, :column 5, :line 3286, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3286, :column 7, :line 3286, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3272, :column 7, :line 3272, :file "cljs/core.cljs"} keep ^{:arglists (^{:end-column 7, :end-line 3276, :column 4, :line 3276, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3276, :column 5, :line 3276, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3286, :column 4, :line 3286, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3286, :column 5, :line 3286, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3286, :column 7, :line 3286, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3272, :column 7, :line 3272, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3276, :column 5, :line 3276, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3286, :column 5, :line 3286, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3286, :column 7, :line 3286, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3276, :column 4, :line 3276, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3276, :column 5, :line 3276, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3286, :column 4, :line 3286, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3286, :column 5, :line 3286, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3286, :column 7, :line 3286, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3272, :column 7, :line 3272, :file "cljs/core.cljs"} keep, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1806, :column 3, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1804, :column 7, :line 1804, :file "cljs/core.cljs"} char ^{:arglists (^{:end-column 6, :end-line 1806, :column 3, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1804, :column 7, :line 1804, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1806, :column 3, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1804, :column 7, :line 1804, :file "cljs/core.cljs"} char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3735, :column 4, :line 3735, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3735, :column 5, :line 3735, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3736, :column 4, :line 3736, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3736, :column 5, :line 3736, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3736, :column 9, :line 3736, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 14, :end-line 3729, :column 7, :line 3729, :file "cljs/core.cljs"} mapcat ^{:arglists (^{:end-column 7, :end-line 3735, :column 4, :line 3735, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3735, :column 5, :line 3735, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3736, :column 4, :line 3736, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3736, :column 5, :line 3736, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3736, :column 9, :line 3736, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 14, :end-line 3729, :column 7, :line 3729, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3735, :column 5, :line 3735, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3736, :column 5, :line 3736, :file "cljs/core.cljs"} f & ^{:end-column 15, :end-line 3736, :column 9, :line 3736, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3735, :column 4, :line 3735, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3735, :column 5, :line 3735, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3736, :column 4, :line 3736, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3736, :column 5, :line 3736, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3736, :column 9, :line 3736, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 14, :end-line 3729, :column 7, :line 3729, :file "cljs/core.cljs"} mapcat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1916, :column 3, :line 1916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1916, :column 4, :line 1916, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} unchecked-long ^{:arglists (^{:end-column 6, :end-line 1916, :column 3, :line 1916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1916, :column 4, :line 1916, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1916, :column 4, :line 1916, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1916, :column 3, :line 1916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1916, :column 4, :line 1916, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} unchecked-long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 16, :end-line 437, :column 1, :line 437, :file "cljs/core.cljs"} m3-seed ^{:end-column 16, :end-line 437, :column 1, :line 437, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 16, :end-line 437, :column 1, :line 437, :file "cljs/core.cljs"} m3-seed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some? ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1869, :column 24, :line 1869, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1869, :column 25, :line 1869, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1869, :column 7, :line 1869, :file "cljs/core.cljs"} unchecked-negate ^{:arglists (^{:end-column 27, :end-line 1869, :column 24, :line 1869, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1869, :column 25, :line 1869, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1869, :column 7, :line 1869, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 1869, :column 25, :line 1869, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1869, :column 24, :line 1869, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1869, :column 25, :line 1869, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1869, :column 7, :line 1869, :file "cljs/core.cljs"} unchecked-negate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2259, :column 3, :line 2259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2259, :column 4, :line 2259, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2257, :column 7, :line 2257, :file "cljs/core.cljs"} reverse ^{:arglists (^{:end-column 9, :end-line 2259, :column 3, :line 2259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2259, :column 4, :line 2259, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2257, :column 7, :line 2257, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2259, :column 4, :line 2259, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2259, :column 3, :line 2259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2259, :column 4, :line 2259, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2257, :column 7, :line 2257, :file "cljs/core.cljs"} reverse, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7618, :column 4, :line 7618, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7620, :column 4, :line 7620, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7620, :column 5, :line 7620, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7620, :column 11, :line 7620, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7621, :column 4, :line 7621, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7621, :column 5, :line 7621, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7621, :column 11, :line 7621, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7621, :column 15, :line 7621, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7614, :column 7, :line 7614, :file "cljs/core.cljs"} range ^{:arglists (^{:end-column 6, :end-line 7618, :column 4, :line 7618, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7620, :column 4, :line 7620, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7620, :column 5, :line 7620, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7620, :column 11, :line 7620, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7621, :column 4, :line 7621, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7621, :column 5, :line 7621, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7621, :column 11, :line 7621, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7621, :column 15, :line 7621, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7614, :column 7, :line 7614, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 9, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} end] [^{:end-column 11, :end-line 7620, :column 5, :line 7620, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7620, :column 11, :line 7620, :file "cljs/core.cljs"} end] ^cljs.core/Range [^{:end-column 11, :end-line 7621, :column 5, :line 7621, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7621, :column 11, :line 7621, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7621, :column 15, :line 7621, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7618, :column 4, :line 7618, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7620, :column 4, :line 7620, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7620, :column 5, :line 7620, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7620, :column 11, :line 7620, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7621, :column 4, :line 7621, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7621, :column 5, :line 7621, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7621, :column 11, :line 7621, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7621, :column 15, :line 7621, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7614, :column 7, :line 7614, :file "cljs/core.cljs"} range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2017, :column 3, :line 2017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2017, :column 4, :line 2017, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 2015, :column 7, :line 2015, :file "cljs/core.cljs"} bit-count ^{:arglists (^{:end-column 6, :end-line 2017, :column 3, :line 2017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2017, :column 4, :line 2017, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 2015, :column 7, :line 2015, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2017, :column 4, :line 2017, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2017, :column 3, :line 2017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2017, :column 4, :line 2017, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 2015, :column 7, :line 2015, :file "cljs/core.cljs"} bit-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 68, :end-line 5353, :column 56, :line 5353, :file "cljs/core.cljs"} create-node ^{:arglists (^{:end-column 40, :end-line 5830, :column 4, :line 5830, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5830, :column 5, :line 5830, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5830, :column 11, :line 5830, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5830, :column 16, :line 5830, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5830, :column 21, :line 5830, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5830, :column 30, :line 5830, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5830, :column 35, :line 5830, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5838, :column 4, :line 5838, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5838, :column 5, :line 5838, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5838, :column 10, :line 5838, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5838, :column 16, :line 5838, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5838, :column 21, :line 5838, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5838, :column 26, :line 5838, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5838, :column 35, :line 5838, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5838, :column 40, :line 5838, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5829, :column 8, :line 5829, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5830, :column 5, :line 5830, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5830, :column 11, :line 5830, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5830, :column 16, :line 5830, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5830, :column 21, :line 5830, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5830, :column 30, :line 5830, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5830, :column 35, :line 5830, :file "cljs/core.cljs"} val2] [^{:end-column 10, :end-line 5838, :column 5, :line 5838, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5838, :column 10, :line 5838, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5838, :column 16, :line 5838, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5838, :column 21, :line 5838, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5838, :column 26, :line 5838, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5838, :column 35, :line 5838, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5838, :column 40, :line 5838, :file "cljs/core.cljs"} val2]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5830, :column 4, :line 5830, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5830, :column 5, :line 5830, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5830, :column 11, :line 5830, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5830, :column 16, :line 5830, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5830, :column 21, :line 5830, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5830, :column 30, :line 5830, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5830, :column 35, :line 5830, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5838, :column 4, :line 5838, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5838, :column 5, :line 5838, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5838, :column 10, :line 5838, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5838, :column 16, :line 5838, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5838, :column 21, :line 5838, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5838, :column 26, :line 5838, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5838, :column 35, :line 5838, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5838, :column 40, :line 5838, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5829, :column 8, :line 5829, :file "cljs/core.cljs"} create-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1578, :column 4, :line 1578, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1578, :column 5, :line 1578, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1580, :column 4, :line 1580, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1580, :column 10, :line 1580, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} sort ^{:arglists (^{:end-column 10, :end-line 1578, :column 4, :line 1578, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1578, :column 5, :line 1578, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1580, :column 4, :line 1580, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1580, :column 10, :line 1580, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1578, :column 5, :line 1578, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1580, :column 10, :line 1580, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1578, :column 4, :line 1578, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1578, :column 5, :line 1578, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1580, :column 4, :line 1580, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1580, :column 10, :line 1580, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} sort, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 1255, :column 18, :line 1255, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1255, :column 22, :line 1255, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1255, :column 10, :line 1255, :file "cljs/core.cljs"} ->MetaFn ^{:arglists ([^{:end-column 22, :end-line 1255, :column 18, :line 1255, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1255, :column 22, :line 1255, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1255, :column 10, :line 1255, :file "cljs/core.cljs"} {:arglists (^cljs.core/MetaFn [^{:end-column 22, :end-line 1255, :column 18, :line 1255, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1255, :column 22, :line 1255, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 1255, :column 18, :line 1255, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1255, :column 22, :line 1255, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1255, :column 10, :line 1255, :file "cljs/core.cljs"} ->MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1852, :column 25, :line 1852, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1852, :column 26, :line 1852, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} unchecked-inc-int ^{:arglists (^{:end-column 28, :end-line 1852, :column 25, :line 1852, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1852, :column 26, :line 1852, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1852, :column 26, :line 1852, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1852, :column 25, :line 1852, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1852, :column 26, :line 1852, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} unchecked-inc-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} -compare ^{:arglists (^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} -compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3258, :column 3, :line 3258, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3258, :column 6, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3253, :column 7, :line 3253, :file "cljs/core.cljs"} map-indexed ^{:arglists (^{:end-column 11, :end-line 3258, :column 3, :line 3258, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3258, :column 6, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3253, :column 7, :line 3253, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3258, :column 6, :line 3258, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3258, :column 3, :line 3258, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3258, :column 6, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3253, :column 7, :line 3253, :file "cljs/core.cljs"} map-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 7426, :column 18, :line 7426, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7426, :column 7, :line 7426, :file "cljs/core.cljs"} array-list ^{:arglists (^{:end-column 20, :end-line 7426, :column 18, :line 7426, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7426, :column 7, :line 7426, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayList []), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7426, :column 18, :line 7426, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7426, :column 7, :line 7426, :file "cljs/core.cljs"} array-list, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8438, :column 3, :line 8438, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8438, :column 4, :line 8438, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8434, :column 7, :line 8434, :file "cljs/core.cljs"} rand-nth ^{:arglists (^{:end-column 9, :end-line 8438, :column 3, :line 8438, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8438, :column 4, :line 8438, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8434, :column 7, :line 8434, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8438, :column 4, :line 8438, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8438, :column 3, :line 8438, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8438, :column 4, :line 8438, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8434, :column 7, :line 8434, :file "cljs/core.cljs"} rand-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3194, :column 4, :line 3194, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3194, :column 5, :line 3194, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3194, :column 7, :line 3194, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3201, :column 4, :line 3201, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3201, :column 5, :line 3201, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3201, :column 7, :line 3201, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3201, :column 9, :line 3201, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3208, :column 8, :line 3208, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3208, :column 11, :line 3208, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3208, :column 14, :line 3208, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3208, :column 16, :line 3208, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3187, :column 7, :line 3187, :file "cljs/core.cljs"} comp ^{:arglists (^{:end-column 6, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3194, :column 4, :line 3194, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3194, :column 5, :line 3194, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3194, :column 7, :line 3194, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3201, :column 4, :line 3201, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3201, :column 5, :line 3201, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3201, :column 7, :line 3201, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3201, :column 9, :line 3201, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3208, :column 8, :line 3208, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3208, :column 11, :line 3208, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3208, :column 14, :line 3208, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3208, :column 16, :line 3208, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3187, :column 7, :line 3187, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 3194, :column 5, :line 3194, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3194, :column 7, :line 3194, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 3201, :column 5, :line 3201, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3201, :column 7, :line 3201, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3201, :column 9, :line 3201, :file "cljs/core.cljs"} h] ^function [^{:end-column 8, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3208, :column 8, :line 3208, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3208, :column 11, :line 3208, :file "cljs/core.cljs"} f3 & ^{:end-column 19, :end-line 3208, :column 16, :line 3208, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3194, :column 4, :line 3194, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3194, :column 5, :line 3194, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3194, :column 7, :line 3194, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3201, :column 4, :line 3201, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3201, :column 5, :line 3201, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3201, :column 7, :line 3201, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3201, :column 9, :line 3201, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3208, :column 8, :line 3208, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3208, :column 11, :line 3208, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3208, :column 14, :line 3208, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3208, :column 16, :line 3208, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3187, :column 7, :line 3187, :file "cljs/core.cljs"} comp, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2509, :column 4, :line 2509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2509, :column 5, :line 2509, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2511, :column 4, :line 2511, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2511, :column 5, :line 2511, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2511, :column 9, :line 2511, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2513, :column 4, :line 2513, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2513, :column 5, :line 2513, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2513, :column 9, :line 2513, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2513, :column 13, :line 2513, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2508, :column 7, :line 2508, :file "cljs/core.cljs"} array-chunk ^{:arglists (^{:end-column 9, :end-line 2509, :column 4, :line 2509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2509, :column 5, :line 2509, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2511, :column 4, :line 2511, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2511, :column 5, :line 2511, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2511, :column 9, :line 2511, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2513, :column 4, :line 2513, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2513, :column 5, :line 2513, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2513, :column 9, :line 2513, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2513, :column 13, :line 2513, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2508, :column 7, :line 2508, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2509, :column 5, :line 2509, :file "cljs/core.cljs"} arr] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2511, :column 5, :line 2511, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2511, :column 9, :line 2511, :file "cljs/core.cljs"} off] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2513, :column 5, :line 2513, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2513, :column 9, :line 2513, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2513, :column 13, :line 2513, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2509, :column 4, :line 2509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2509, :column 5, :line 2509, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2511, :column 4, :line 2511, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2511, :column 5, :line 2511, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2511, :column 9, :line 2511, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2513, :column 4, :line 2513, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2513, :column 5, :line 2513, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2513, :column 9, :line 2513, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2513, :column 13, :line 2513, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2508, :column 7, :line 2508, :file "cljs/core.cljs"} array-chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2009, :column 3, :line 2009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2009, :column 4, :line 2009, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2009, :column 6, :line 2009, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 2007, :column 7, :line 2007, :file "cljs/core.cljs"} bit-shift-right-zero-fill ^{:arglists (^{:end-column 8, :end-line 2009, :column 3, :line 2009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2009, :column 4, :line 2009, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2009, :column 6, :line 2009, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 2007, :column 7, :line 2007, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2009, :column 4, :line 2009, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2009, :column 6, :line 2009, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2009, :column 3, :line 2009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2009, :column 4, :line 2009, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2009, :column 6, :line 2009, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 2007, :column 7, :line 2007, :file "cljs/core.cljs"} bit-shift-right-zero-fill, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} -as-transient ^{:arglists (^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} -as-transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7753, :column 4, :line 7753, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7753, :column 5, :line 7753, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7756, :column 5, :line 7756, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7756, :column 7, :line 7756, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7747, :column 7, :line 7747, :file "cljs/core.cljs"} dorun ^{:arglists (^{:end-column 10, :end-line 7753, :column 4, :line 7753, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7753, :column 5, :line 7753, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7756, :column 5, :line 7756, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7756, :column 7, :line 7756, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7747, :column 7, :line 7747, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 10, :end-line 7753, :column 5, :line 7753, :file "cljs/core.cljs"} coll] ^clj-nil [^{:end-column 7, :end-line 7756, :column 5, :line 7756, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7756, :column 7, :line 7756, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7753, :column 4, :line 7753, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7753, :column 5, :line 7753, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7756, :column 5, :line 7756, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7756, :column 7, :line 7756, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7747, :column 7, :line 7747, :file "cljs/core.cljs"} dorun, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 4036, :column 10, :line 4036, :file "cljs/core.cljs"} pr-sequential-writer ^{:arglists (^{:end-column 70, :end-line 7824, :column 28, :line 7824, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7824, :column 29, :line 7824, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7824, :column 36, :line 7824, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7824, :column 46, :line 7824, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7824, :column 52, :line 7824, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7824, :column 56, :line 7824, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7824, :column 60, :line 7824, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7824, :column 65, :line 7824, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 7824, :column 7, :line 7824, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 7824, :column 29, :line 7824, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7824, :column 36, :line 7824, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7824, :column 46, :line 7824, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7824, :column 52, :line 7824, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7824, :column 56, :line 7824, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7824, :column 60, :line 7824, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7824, :column 65, :line 7824, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 70, :end-line 7824, :column 28, :line 7824, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7824, :column 29, :line 7824, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7824, :column 36, :line 7824, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7824, :column 46, :line 7824, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7824, :column 52, :line 7824, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7824, :column 56, :line 7824, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7824, :column 60, :line 7824, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7824, :column 65, :line 7824, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 7824, :column 7, :line 7824, :file "cljs/core.cljs"} pr-sequential-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 37, :end-line 1068, :column 31, :line 1068, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1068, :column 32, :line 1068, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1068, :column 8, :line 1068, :file "cljs/core.cljs"} accumulating-seq-count ^{:arglists (^{:end-column 37, :end-line 1068, :column 31, :line 1068, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1068, :column 32, :line 1068, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1068, :column 8, :line 1068, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 37, :end-line 1068, :column 32, :line 1068, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 37, :end-line 1068, :column 31, :line 1068, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1068, :column 32, :line 1068, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1068, :column 8, :line 1068, :file "cljs/core.cljs"} accumulating-seq-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 23, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} IIndexed ^{:impls (cljs.core/Range cljs.core/RedNode cljs.core/BlackNode cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 23, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 23, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} IIndexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1342, :column 4, :line 1342, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1342, :column 5, :line 1342, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1343, :column 4, :line 1343, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1343, :column 5, :line 1343, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1343, :column 10, :line 1343, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1346, :column 4, :line 1346, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1346, :column 5, :line 1346, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1346, :column 10, :line 1346, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1346, :column 12, :line 1346, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1346, :column 14, :line 1346, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1339, :column 7, :line 1339, :file "cljs/core.cljs"} disj ^{:arglists (^{:end-column 10, :end-line 1342, :column 4, :line 1342, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1342, :column 5, :line 1342, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1343, :column 4, :line 1343, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1343, :column 5, :line 1343, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1343, :column 10, :line 1343, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1346, :column 4, :line 1346, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1346, :column 5, :line 1346, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1346, :column 10, :line 1346, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1346, :column 12, :line 1346, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1346, :column 14, :line 1346, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1339, :column 7, :line 1339, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1342, :column 5, :line 1342, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1343, :column 5, :line 1343, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1343, :column 10, :line 1343, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1346, :column 5, :line 1346, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1346, :column 10, :line 1346, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1346, :column 14, :line 1346, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1342, :column 4, :line 1342, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1342, :column 5, :line 1342, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1343, :column 4, :line 1343, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1343, :column 5, :line 1343, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1343, :column 10, :line 1343, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1346, :column 4, :line 1346, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1346, :column 5, :line 1346, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1346, :column 10, :line 1346, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1346, :column 12, :line 1346, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1346, :column 14, :line 1346, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1339, :column 7, :line 1339, :file "cljs/core.cljs"} disj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 31, :end-line 333, :column 14, :line 333, :file "cljs/core.cljs"} IPrintWithWriter ^{:impls (cljs.core/UUID cljs.core/Eduction cljs.core/List cljs.core/KeySeq cljs.core/Range cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/LazyTransformer cljs.core/EmptyList cljs.core/PersistentQueueSeq cljs.core/PersistentVector cljs.core/RedNode cljs.core/ValSeq cljs.core/Atom cljs.core/ChunkedCons cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/Subvec cljs.core/ArrayNodeSeq cljs.core/PersistentHashMap cljs.core/RSeq cljs.core/Cons cljs.core/ObjMap cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/PersistentArrayMapSeq cljs.core/BlackNode cljs.core/NodeSeq cljs.core/PersistentTreeMapSeq cljs.core/LazySeq cljs.core/IndexedSeq cljs.core/Keyword cljs.core/Symbol), :protocol-info {:methods {^{:end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 31, :end-line 333, :column 14, :line 333, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 31, :end-line 333, :column 14, :line 333, :file "cljs/core.cljs"} IPrintWithWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 8837, :column 16, :line 8837, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8837, :column 10, :line 8837, :file "cljs/core.cljs"} ->UUID ^{:arglists ([^{:end-column 21, :end-line 8837, :column 16, :line 8837, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8837, :column 10, :line 8837, :file "cljs/core.cljs"} {:arglists (^cljs.core/UUID [^{:end-column 21, :end-line 8837, :column 16, :line 8837, :file "cljs/core.cljs"} uuid]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 8837, :column 16, :line 8837, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8837, :column 10, :line 8837, :file "cljs/core.cljs"} ->UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 22, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} IVector ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 22, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 22, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} IVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 394, :column 14, :line 394, :file "cljs/core.cljs"} IIterable ^{:impls (cljs.core/Range cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 394, :column 14, :line 394, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 394, :column 14, :line 394, :file "cljs/core.cljs"} IIterable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2 ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 19, :end-line 8294, :column 10, :line 8294, :file "cljs/core.cljs"} Eduction {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 19, :end-line 8294, :column 10, :line 8294, :file "cljs/core.cljs"} Eduction, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 8294, :column 19, :line 8294, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 8294, :column 20, :line 8294, :file "cljs/core.cljs"} xform ^{:end-column 31, :end-line 8294, :column 26, :line 8294, :file "cljs/core.cljs"} coll], :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 28, :end-line 3930, :column 22, :line 3930, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3930, :column 23, :line 3930, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3930, :column 8, :line 3930, :file "cljs/core.cljs"} pv-clone-node ^{:arglists (^{:end-column 28, :end-line 3930, :column 22, :line 3930, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3930, :column 23, :line 3930, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3930, :column 8, :line 3930, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3930, :column 23, :line 3930, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3930, :column 22, :line 3930, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3930, :column 23, :line 3930, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3930, :column 8, :line 3930, :file "cljs/core.cljs"} pv-clone-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 25, :end-line 855, :column 20, :line 855, :file "cljs/core.cljs"} cons ^{:arglists (^{:end-column 11, :end-line 2328, :column 3, :line 2328, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2328, :column 4, :line 2328, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2328, :column 6, :line 2328, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2326, :column 7, :line 2326, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 2328, :column 4, :line 2328, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2328, :column 6, :line 2328, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2328, :column 3, :line 2328, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2328, :column 4, :line 2328, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2328, :column 6, :line 2328, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2326, :column 7, :line 2326, :file "cljs/core.cljs"} cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7216, :column 10, :line 7216, :file "cljs/core.cljs"} PersistentTreeSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7216, :column 10, :line 7216, :file "cljs/core.cljs"} PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 7216, :column 28, :line 7216, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7216, :column 29, :line 7216, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7216, :column 34, :line 7216, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7216, :column 53, :line 7216, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 17, :end-line 1924, :column 14, :line 1924, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1924, :column 15, :line 1924, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1924, :column 7, :line 1924, :file "cljs/core.cljs"} floats ^{:arglists (^{:end-column 17, :end-line 1924, :column 14, :line 1924, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1924, :column 15, :line 1924, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1924, :column 7, :line 1924, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1924, :column 15, :line 1924, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1924, :column 14, :line 1924, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1924, :column 15, :line 1924, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1924, :column 7, :line 1924, :file "cljs/core.cljs"} floats, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 60, :end-line 4035, :column 44, :line 4035, :file "cljs/core.cljs"} TransientVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 4504, :column 10, :line 4504, :file "cljs/core.cljs"} TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 4507, :column 26, :line 4504, :file "cljs/core.cljs"} [^{:mutable true, :end-column 41, :end-line 4504, :column 37, :line 4504, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4505, :column 37, :line 4505, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4506, :column 37, :line 4506, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4507, :column 37, :line 4507, :file "cljs/core.cljs"} tail], :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 2037, :column 3, :line 2037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2035, :column 8, :line 2035, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2035, :column 16, :line 2035, :file "cljs/core.cljs"} pos? ^{:arglists (^{:end-column 6, :end-line 2037, :column 3, :line 2037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2035, :column 8, :line 2035, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2035, :column 16, :line 2035, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2037, :column 3, :line 2037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2035, :column 8, :line 2035, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2035, :column 16, :line 2035, :file "cljs/core.cljs"} pos?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3236, :column 4, :line 3236, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3236, :column 5, :line 3236, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3236, :column 7, :line 3236, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3242, :column 4, :line 3242, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3242, :column 5, :line 3242, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3242, :column 7, :line 3242, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3242, :column 9, :line 3242, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3247, :column 4, :line 3247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3247, :column 5, :line 3247, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3247, :column 7, :line 3247, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3247, :column 9, :line 3247, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3247, :column 11, :line 3247, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3230, :column 7, :line 3230, :file "cljs/core.cljs"} fnil ^{:arglists (^{:end-column 9, :end-line 3236, :column 4, :line 3236, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3236, :column 5, :line 3236, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3236, :column 7, :line 3236, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3242, :column 4, :line 3242, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3242, :column 5, :line 3242, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3242, :column 7, :line 3242, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3242, :column 9, :line 3242, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3247, :column 4, :line 3247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3247, :column 5, :line 3247, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3247, :column 7, :line 3247, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3247, :column 9, :line 3247, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3247, :column 11, :line 3247, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3230, :column 7, :line 3230, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3236, :column 5, :line 3236, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3236, :column 7, :line 3236, :file "cljs/core.cljs"} x] ^function [^{:end-column 7, :end-line 3242, :column 5, :line 3242, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3242, :column 7, :line 3242, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3242, :column 9, :line 3242, :file "cljs/core.cljs"} y] ^function [^{:end-column 7, :end-line 3247, :column 5, :line 3247, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3247, :column 7, :line 3247, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3247, :column 9, :line 3247, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3247, :column 11, :line 3247, :file "cljs/core.cljs"} z]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3236, :column 4, :line 3236, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3236, :column 5, :line 3236, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3236, :column 7, :line 3236, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3242, :column 4, :line 3242, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3242, :column 5, :line 3242, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3242, :column 7, :line 3242, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3242, :column 9, :line 3242, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3247, :column 4, :line 3247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3247, :column 5, :line 3247, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3247, :column 7, :line 3247, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3247, :column 9, :line 3247, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3247, :column 11, :line 3247, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3230, :column 7, :line 3230, :file "cljs/core.cljs"} fnil, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 7057, :column 3, :line 7057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7057, :column 4, :line 7057, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7057, :column 6, :line 7057, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 7057, :column 8, :line 7057, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 7052, :column 7, :line 7052, :file "cljs/core.cljs"} merge-with ^{:arglists (^{:end-column 13, :end-line 7057, :column 3, :line 7057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7057, :column 4, :line 7057, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7057, :column 6, :line 7057, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 7057, :column 8, :line 7057, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 7052, :column 7, :line 7052, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7057, :column 4, :line 7057, :file "cljs/core.cljs"} f & ^{:end-column 13, :end-line 7057, :column 8, :line 7057, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7057, :column 3, :line 7057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7057, :column 4, :line 7057, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7057, :column 6, :line 7057, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 7057, :column 8, :line 7057, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 7052, :column 7, :line 7052, :file "cljs/core.cljs"} merge-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1379, :column 3, :line 1379, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1379, :column 4, :line 1379, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1377, :column 8, :line 1377, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1377, :column 16, :line 1377, :file "cljs/core.cljs"} sequential? ^{:arglists (^{:end-column 6, :end-line 1379, :column 3, :line 1379, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1379, :column 4, :line 1379, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1377, :column 8, :line 1377, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1377, :column 16, :line 1377, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1379, :column 4, :line 1379, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1379, :column 3, :line 1379, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1379, :column 4, :line 1379, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1377, :column 8, :line 1377, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1377, :column 16, :line 1377, :file "cljs/core.cljs"} sequential?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6708, :column 25, :line 6708, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6708, :column 26, :line 6708, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6708, :column 31, :line 6708, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6708, :column 36, :line 6708, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6708, :column 38, :line 6708, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6708, :column 8, :line 6708, :file "cljs/core.cljs"} tree-map-replace ^{:arglists (^{:end-column 40, :end-line 6708, :column 25, :line 6708, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6708, :column 26, :line 6708, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6708, :column 31, :line 6708, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6708, :column 36, :line 6708, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6708, :column 38, :line 6708, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6708, :column 8, :line 6708, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 6708, :column 26, :line 6708, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6708, :column 31, :line 6708, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6708, :column 36, :line 6708, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6708, :column 38, :line 6708, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6708, :column 25, :line 6708, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6708, :column 26, :line 6708, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6708, :column 31, :line 6708, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6708, :column 36, :line 6708, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6708, :column 38, :line 6708, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6708, :column 8, :line 6708, :file "cljs/core.cljs"} tree-map-replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 444, :column 25, :line 444, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 444, :column 26, :line 444, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 444, :column 29, :line 444, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 444, :column 8, :line 444, :file "cljs/core.cljs"} number, :end-column 25, :end-line 444, :column 15, :line 444, :file "cljs/core.cljs"} m3-mix-H1 ^{:arglists (^{:end-column 32, :end-line 444, :column 25, :line 444, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 444, :column 26, :line 444, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 444, :column 29, :line 444, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 444, :column 8, :line 444, :file "cljs/core.cljs"} number, :end-column 25, :end-line 444, :column 15, :line 444, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 29, :end-line 444, :column 26, :line 444, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 444, :column 29, :line 444, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 444, :column 25, :line 444, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 444, :column 26, :line 444, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 444, :column 29, :line 444, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 444, :column 8, :line 444, :file "cljs/core.cljs"} number, :end-column 25, :end-line 444, :column 15, :line 444, :file "cljs/core.cljs"} m3-mix-H1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 49, :end-line 5272, :column 39, :line 5272, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5273, :column 39, :line 5273, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5274, :column 29, :line 5274, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 5272, :column 10, :line 5272, :file "cljs/core.cljs"} ->TransientArrayMap ^{:arglists ([^{:mutable true, :end-column 49, :end-line 5272, :column 39, :line 5272, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5273, :column 39, :line 5273, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5274, :column 29, :line 5274, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 5272, :column 10, :line 5272, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientArrayMap [^{:mutable true, :end-column 49, :end-line 5272, :column 39, :line 5272, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5273, :column 39, :line 5273, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5274, :column 29, :line 5274, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 49, :end-line 5272, :column 39, :line 5272, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5273, :column 39, :line 5273, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5274, :column 29, :line 5274, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 5272, :column 10, :line 5272, :file "cljs/core.cljs"} ->TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 29, :end-line 609, :column 20, :line 609, :file "cljs/core.cljs"} prim-seq ^{:arglists (^{:end-column 10, :end-line 943, :column 4, :line 943, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 943, :column 5, :line 943, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 945, :column 4, :line 945, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 945, :column 5, :line 945, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 945, :column 10, :line 945, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 942, :column 7, :line 942, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 943, :column 5, :line 943, :file "cljs/core.cljs"} prim] [^{:end-column 10, :end-line 945, :column 5, :line 945, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 945, :column 10, :line 945, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 943, :column 4, :line 943, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 943, :column 5, :line 943, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 945, :column 4, :line 945, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 945, :column 5, :line 945, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 945, :column 10, :line 945, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 942, :column 7, :line 942, :file "cljs/core.cljs"} prim-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level* ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1617, :column 3, :line 1617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1617, :column 4, :line 1617, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1615, :column 7, :line 1615, :file "cljs/core.cljs"} shuffle ^{:arglists (^{:end-column 9, :end-line 1617, :column 3, :line 1617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1617, :column 4, :line 1617, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1615, :column 7, :line 1615, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1617, :column 4, :line 1617, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1617, :column 3, :line 1617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1617, :column 4, :line 1617, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1615, :column 7, :line 1615, :file "cljs/core.cljs"} shuffle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 33, :end-line 1400, :column 22, :line 1400, :file "cljs/core.cljs"} ChunkedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 4251, :column 10, :line 4251, :file "cljs/core.cljs"} ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 59, :end-line 4251, :column 21, :line 4251, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4251, :column 22, :line 4251, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4251, :column 26, :line 4251, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4251, :column 31, :line 4251, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4251, :column 33, :line 4251, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4251, :column 37, :line 4251, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4251, :column 52, :line 4251, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 23, :end-line 2337, :column 20, :line 2337, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2337, :column 21, :line 2337, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2337, :column 7, :line 2337, :file "cljs/core.cljs"} hash-keyword ^{:arglists (^{:end-column 23, :end-line 2337, :column 20, :line 2337, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2337, :column 21, :line 2337, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2337, :column 7, :line 2337, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 2337, :column 21, :line 2337, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2337, :column 20, :line 2337, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2337, :column 21, :line 2337, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2337, :column 7, :line 2337, :file "cljs/core.cljs"} hash-keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1490, :column 3, :line 1490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1490, :column 4, :line 1490, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1490, :column 9, :line 1490, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} find ^{:arglists (^{:end-column 11, :end-line 1490, :column 3, :line 1490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1490, :column 4, :line 1490, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1490, :column 9, :line 1490, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1490, :column 4, :line 1490, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1490, :column 9, :line 1490, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1490, :column 3, :line 1490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1490, :column 4, :line 1490, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1490, :column 9, :line 1490, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} alength ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} alength, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1961, :column 3, :line 1961, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1961, :column 4, :line 1961, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1961, :column 6, :line 1961, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} bit-xor ^{:arglists (^{:end-column 8, :end-line 1961, :column 3, :line 1961, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1961, :column 4, :line 1961, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1961, :column 6, :line 1961, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1961, :column 4, :line 1961, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1961, :column 6, :line 1961, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1961, :column 3, :line 1961, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1961, :column 4, :line 1961, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1961, :column 6, :line 1961, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} bit-xor, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 874, :column 22, :line 874, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 874, :column 26, :line 874, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 874, :column 10, :line 874, :file "cljs/core.cljs"} ->IndexedSeq ^{:arglists ([^{:end-column 26, :end-line 874, :column 22, :line 874, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 874, :column 26, :line 874, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 874, :column 10, :line 874, :file "cljs/core.cljs"} {:arglists (^cljs.core/IndexedSeq [^{:end-column 26, :end-line 874, :column 22, :line 874, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 874, :column 26, :line 874, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 874, :column 22, :line 874, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 874, :column 26, :line 874, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 874, :column 10, :line 874, :file "cljs/core.cljs"} ->IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4800, :column 10, :line 4800, :file "cljs/core.cljs"} ObjMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4800, :column 10, :line 4800, :file "cljs/core.cljs"} ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 4800, :column 17, :line 4800, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4800, :column 18, :line 4800, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4800, :column 23, :line 4800, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4800, :column 28, :line 4800, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4800, :column 35, :line 4800, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4800, :column 58, :line 4800, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} unsigned-bit-shift-right ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} unsigned-bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 32, :end-line 4937, :column 10, :line 4937, :file "cljs/core.cljs"} ES6SetEntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 32, :end-line 4937, :column 10, :line 4937, :file "cljs/core.cljs"} ES6SetEntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 4937, :column 32, :line 4937, :file "cljs/core.cljs"} [^{:mutable true, :end-column 45, :end-line 4937, :column 43, :line 4937, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 6, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2042, :column 8, :line 2042, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2042, :column 16, :line 2042, :file "cljs/core.cljs"} neg? ^{:arglists (^{:end-column 6, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2042, :column 8, :line 2042, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2042, :column 16, :line 2042, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2042, :column 8, :line 2042, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2042, :column 16, :line 2042, :file "cljs/core.cljs"} neg?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} Cons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 49, :end-line 2279, :column 15, :line 2279, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2279, :column 16, :line 2279, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2279, :column 27, :line 2279, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2279, :column 42, :line 2279, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} -remove-method ^{:arglists (^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} -remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 2911, :column 22, :line 2911, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2911, :column 34, :line 2911, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2911, :column 10, :line 2911, :file "cljs/core.cljs"} ->StringIter ^{:arglists ([^{:end-column 24, :end-line 2911, :column 22, :line 2911, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2911, :column 34, :line 2911, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2911, :column 10, :line 2911, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringIter [^{:end-column 24, :end-line 2911, :column 22, :line 2911, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2911, :column 34, :line 2911, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 2911, :column 22, :line 2911, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2911, :column 34, :line 2911, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2911, :column 10, :line 2911, :file "cljs/core.cljs"} ->StringIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 2138, :column 16, :line 2138, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2138, :column 21, :line 2138, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2138, :column 27, :line 2138, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2138, :column 32, :line 2138, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2138, :column 48, :line 2138, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2138, :column 10, :line 2138, :file "cljs/core.cljs"} ->List ^{:arglists ([^{:end-column 21, :end-line 2138, :column 16, :line 2138, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2138, :column 21, :line 2138, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2138, :column 27, :line 2138, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2138, :column 32, :line 2138, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2138, :column 48, :line 2138, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2138, :column 10, :line 2138, :file "cljs/core.cljs"} {:arglists (^cljs.core/List [^{:end-column 21, :end-line 2138, :column 16, :line 2138, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2138, :column 21, :line 2138, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2138, :column 27, :line 2138, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2138, :column 32, :line 2138, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2138, :column 48, :line 2138, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 2138, :column 16, :line 2138, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2138, :column 21, :line 2138, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2138, :column 27, :line 2138, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2138, :column 32, :line 2138, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2138, :column 48, :line 2138, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2138, :column 10, :line 2138, :file "cljs/core.cljs"} ->List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 441, :column 25, :line 441, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 441, :column 26, :line 441, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 441, :column 8, :line 441, :file "cljs/core.cljs"} number, :end-column 25, :end-line 441, :column 15, :line 441, :file "cljs/core.cljs"} m3-mix-K1 ^{:arglists (^{:end-column 29, :end-line 441, :column 25, :line 441, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 441, :column 26, :line 441, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 441, :column 8, :line 441, :file "cljs/core.cljs"} number, :end-column 25, :end-line 441, :column 15, :line 441, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 29, :end-line 441, :column 26, :line 441, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 441, :column 25, :line 441, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 441, :column 26, :line 441, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 441, :column 8, :line 441, :file "cljs/core.cljs"} number, :end-column 25, :end-line 441, :column 15, :line 441, :file "cljs/core.cljs"} m3-mix-K1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1819, :column 31, :line 1819, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1819, :column 32, :line 1819, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1819, :column 8, :line 1819, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1819, :column 15, :line 1819, :file "cljs/core.cljs"} unchecked-float ^{:arglists (^{:end-column 34, :end-line 1819, :column 31, :line 1819, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1819, :column 32, :line 1819, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1819, :column 8, :line 1819, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1819, :column 15, :line 1819, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1819, :column 32, :line 1819, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1819, :column 31, :line 1819, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1819, :column 32, :line 1819, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1819, :column 8, :line 1819, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1819, :column 15, :line 1819, :file "cljs/core.cljs"} unchecked-float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 1448, :column 27, :line 1448, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1448, :column 28, :line 1448, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} undefined? ^{:arglists (^{:end-column 30, :end-line 1448, :column 27, :line 1448, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1448, :column 28, :line 1448, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 30, :end-line 1448, :column 28, :line 1448, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 1448, :column 27, :line 1448, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1448, :column 28, :line 1448, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} undefined?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} IMeta ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/MetaFn cljs.core/RSeq ^{:end-column 23, :end-line 754, :column 14, :line 754, :file "cljs/core.cljs"} function cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} IMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 782, :column 3, :line 782, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 782, :column 4, :line 782, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 780, :column 8, :line 780, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 780, :column 16, :line 780, :file "cljs/core.cljs"} reduced? ^{:arglists (^{:end-column 6, :end-line 782, :column 3, :line 782, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 782, :column 4, :line 782, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 780, :column 8, :line 780, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 780, :column 16, :line 780, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 782, :column 4, :line 782, :file "cljs/core.cljs"} r]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 782, :column 3, :line 782, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 782, :column 4, :line 782, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 780, :column 8, :line 780, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 780, :column 16, :line 780, :file "cljs/core.cljs"} reduced?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to ^{:file "cljs/core.cljs", :arglists ([f argc args])} {:arglists ([f argc args]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2813, :column 4, :line 2813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2813, :column 5, :line 2813, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2813, :column 11, :line 2813, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2815, :column 4, :line 2815, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2815, :column 5, :line 2815, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2815, :column 11, :line 2815, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2815, :column 15, :line 2815, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2815, :column 17, :line 2815, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2810, :column 7, :line 2810, :file "cljs/core.cljs"} disj! ^{:arglists (^{:end-column 15, :end-line 2813, :column 4, :line 2813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2813, :column 5, :line 2813, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2813, :column 11, :line 2813, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2815, :column 4, :line 2815, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2815, :column 5, :line 2815, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2815, :column 11, :line 2815, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2815, :column 15, :line 2815, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2815, :column 17, :line 2815, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2810, :column 7, :line 2810, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2813, :column 5, :line 2813, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2813, :column 11, :line 2813, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2815, :column 5, :line 2815, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2815, :column 11, :line 2815, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2815, :column 17, :line 2815, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2813, :column 4, :line 2813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2813, :column 5, :line 2813, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2813, :column 11, :line 2813, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2815, :column 4, :line 2815, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2815, :column 5, :line 2815, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2815, :column 11, :line 2815, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2815, :column 15, :line 2815, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2815, :column 17, :line 2815, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2810, :column 7, :line 2810, :file "cljs/core.cljs"} disj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} -lookup ^{:arglists (^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} -lookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 25, :end-line 231, :column 14, :line 231, :file "cljs/core.cljs"} ICloneable ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/Subvec cljs.core/PersistentVector cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 25, :end-line 231, :column 14, :line 231, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 25, :end-line 231, :column 14, :line 231, :file "cljs/core.cljs"} ICloneable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 29, :end-line 8358, :column 14, :line 8358, :file "cljs/core.cljs"} IEncodeClojure ^{:protocol-info {:methods {^{:end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 29, :end-line 8358, :column 14, :line 8358, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 29, :end-line 8358, :column 14, :line 8358, :file "cljs/core.cljs"} IEncodeClojure, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1919, :column 16, :line 1919, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1919, :column 17, :line 1919, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} booleans ^{:arglists (^{:end-column 19, :end-line 1919, :column 16, :line 1919, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1919, :column 17, :line 1919, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 1919, :column 17, :line 1919, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1919, :column 16, :line 1919, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1919, :column 17, :line 1919, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} booleans, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 4970, :column 35, :line 4970, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4970, :column 36, :line 4970, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4970, :column 40, :line 4970, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4970, :column 42, :line 4970, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4970, :column 8, :line 4970, :file "cljs/core.cljs"} array-map-index-of-symbol? ^{:arglists (^{:end-column 44, :end-line 4970, :column 35, :line 4970, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4970, :column 36, :line 4970, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4970, :column 40, :line 4970, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4970, :column 42, :line 4970, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4970, :column 8, :line 4970, :file "cljs/core.cljs"} {:arglists ([^{:end-column 40, :end-line 4970, :column 36, :line 4970, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4970, :column 40, :line 4970, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4970, :column 42, :line 4970, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 4970, :column 35, :line 4970, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4970, :column 36, :line 4970, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4970, :column 40, :line 4970, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4970, :column 42, :line 4970, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4970, :column 8, :line 4970, :file "cljs/core.cljs"} array-map-index-of-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 35, :end-line 7418, :column 31, :line 7418, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7418, :column 10, :line 7418, :file "cljs/core.cljs"} ->ArrayList ^{:arglists ([^{:mutable true, :end-column 35, :end-line 7418, :column 31, :line 7418, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7418, :column 10, :line 7418, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayList [^{:mutable true, :end-column 35, :end-line 7418, :column 31, :line 7418, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 35, :end-line 7418, :column 31, :line 7418, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7418, :column 10, :line 7418, :file "cljs/core.cljs"} ->ArrayList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 30, :end-line 855, :column 25, :line 855, :file "cljs/core.cljs"} RSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 957, :column 10, :line 957, :file "cljs/core.cljs"} RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 957, :column 15, :line 957, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 957, :column 16, :line 957, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 957, :column 19, :line 957, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 957, :column 21, :line 957, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 5361, :column 13, :line 5361, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5361, :column 14, :line 5361, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5361, :column 19, :line 5361, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5361, :column 8, :line 5361, :file "cljs/core.cljs"} mask ^{:arglists (^{:end-column 25, :end-line 5361, :column 13, :line 5361, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5361, :column 14, :line 5361, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5361, :column 19, :line 5361, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5361, :column 8, :line 5361, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 19, :end-line 5361, :column 14, :line 5361, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5361, :column 19, :line 5361, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 5361, :column 13, :line 5361, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5361, :column 14, :line 5361, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5361, :column 19, :line 5361, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5361, :column 8, :line 5361, :file "cljs/core.cljs"} mask, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2624, :column 4, :line 2624, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2624, :column 5, :line 2624, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2628, :column 4, :line 2628, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2628, :column 5, :line 2628, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2628, :column 10, :line 2628, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2623, :column 7, :line 2623, :file "cljs/core.cljs"} int-array ^{:arglists (^{:end-column 17, :end-line 2624, :column 4, :line 2624, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2624, :column 5, :line 2624, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2628, :column 4, :line 2628, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2628, :column 5, :line 2628, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2628, :column 10, :line 2628, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2623, :column 7, :line 2623, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2624, :column 5, :line 2624, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 10, :end-line 2628, :column 5, :line 2628, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2628, :column 10, :line 2628, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2624, :column 4, :line 2624, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2624, :column 5, :line 2624, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2628, :column 4, :line 2628, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2628, :column 5, :line 2628, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2628, :column 10, :line 2628, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2623, :column 7, :line 2623, :file "cljs/core.cljs"} int-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 88, :end-line 8595, :column 3, :line 8595, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8595, :column 4, :line 8595, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8595, :column 9, :line 8595, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8595, :column 22, :line 8595, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8595, :column 32, :line 8595, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8595, :column 45, :line 8595, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8595, :column 58, :line 8595, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8595, :column 71, :line 8595, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8594, :column 8, :line 8594, :file "cljs/core.cljs"} find-and-cache-best-method ^{:arglists (^{:end-column 88, :end-line 8595, :column 3, :line 8595, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8595, :column 4, :line 8595, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8595, :column 9, :line 8595, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8595, :column 22, :line 8595, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8595, :column 32, :line 8595, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8595, :column 45, :line 8595, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8595, :column 58, :line 8595, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8595, :column 71, :line 8595, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8594, :column 8, :line 8594, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8595, :column 4, :line 8595, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8595, :column 9, :line 8595, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8595, :column 22, :line 8595, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8595, :column 32, :line 8595, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8595, :column 45, :line 8595, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8595, :column 58, :line 8595, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8595, :column 71, :line 8595, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 88, :end-line 8595, :column 3, :line 8595, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8595, :column 4, :line 8595, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8595, :column 9, :line 8595, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8595, :column 22, :line 8595, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8595, :column 32, :line 8595, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8595, :column 45, :line 8595, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8595, :column 58, :line 8595, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8595, :column 71, :line 8595, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8594, :column 8, :line 8594, :file "cljs/core.cljs"} find-and-cache-best-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1368, :column 3, :line 1368, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1366, :column 8, :line 1366, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1366, :column 16, :line 1366, :file "cljs/core.cljs"} set? ^{:arglists (^{:end-column 6, :end-line 1368, :column 3, :line 1368, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1366, :column 8, :line 1366, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1366, :column 16, :line 1366, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1368, :column 3, :line 1368, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1366, :column 8, :line 1366, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1366, :column 16, :line 1366, :file "cljs/core.cljs"} set?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 611, :column 17, :line 611, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 611, :column 18, :line 611, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 611, :column 7, :line 611, :file "cljs/core.cljs"} iterable? ^{:arglists (^{:end-column 20, :end-line 611, :column 17, :line 611, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 611, :column 18, :line 611, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 611, :column 7, :line 611, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 20, :end-line 611, :column 18, :line 611, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 611, :column 17, :line 611, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 611, :column 18, :line 611, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 611, :column 7, :line 611, :file "cljs/core.cljs"} iterable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 3727, :column 10, :line 3727, :file "cljs/core.cljs"} cat ^{:arglists (^{:end-column 7, :end-line 8261, :column 3, :line 8261, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8261, :column 4, :line 8261, :file "cljs/core.cljs"} rf]), :added "1.7", :doc "A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.", :end-column 11, :end-line 8257, :column 7, :line 8257, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 8261, :column 4, :line 8261, :file "cljs/core.cljs"} rf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8261, :column 3, :line 8261, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8261, :column 4, :line 8261, :file "cljs/core.cljs"} rf]), :added "1.7", :doc "A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.", :end-column 11, :end-line 8257, :column 7, :line 8257, :file "cljs/core.cljs"} cat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 42, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4924, :column 10, :line 4924, :file "cljs/core.cljs"} ->ES6EntriesIterator ^{:arglists ([^{:mutable true, :end-column 42, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4924, :column 10, :line 4924, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6EntriesIterator [^{:mutable true, :end-column 42, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 42, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4924, :column 10, :line 4924, :file "cljs/core.cljs"} ->ES6EntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 1727, :column 10, :line 1727, :file "cljs/core.cljs"} divide ^{:declared true, :end-column 17, :end-line 1727, :column 10, :line 1727, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 17, :end-line 1727, :column 10, :line 1727, :file "cljs/core.cljs"} divide, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} -pr-writer ^{:arglists (^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} -pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7851, :column 13, :line 7851, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} flush ^{:arglists (^{:end-column 15, :end-line 7851, :column 13, :line 7851, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7851, :column 13, :line 7851, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 7307, :column 28, :line 7307, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7307, :column 29, :line 7307, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} set-from-indexed-seq ^{:arglists (^{:end-column 34, :end-line 7307, :column 28, :line 7307, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7307, :column 29, :line 7307, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 34, :end-line 7307, :column 29, :line 7307, :file "cljs/core.cljs"} iseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 7307, :column 28, :line 7307, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7307, :column 29, :line 7307, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} set-from-indexed-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7464, :column 4, :line 7464, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7464, :column 5, :line 7464, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7473, :column 4, :line 7473, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7473, :column 5, :line 7473, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7473, :column 10, :line 7473, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} take-while ^{:arglists (^{:end-column 10, :end-line 7464, :column 4, :line 7464, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7464, :column 5, :line 7464, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7473, :column 4, :line 7473, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7473, :column 5, :line 7473, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7473, :column 10, :line 7473, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 7464, :column 5, :line 7464, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 7473, :column 5, :line 7473, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7473, :column 10, :line 7473, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7464, :column 4, :line 7464, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7464, :column 5, :line 7464, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7473, :column 4, :line 7473, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7473, :column 5, :line 7473, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7473, :column 10, :line 7473, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} take-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2880, :column 4, :line 2880, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2880, :column 5, :line 2880, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2880, :column 9, :line 2880, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2882, :column 4, :line 2882, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2882, :column 5, :line 2882, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2882, :column 9, :line 2882, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2882, :column 11, :line 2882, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 5, :line 2884, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2884, :column 9, :line 2884, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2884, :column 11, :line 2884, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2884, :column 13, :line 2884, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2886, :column 4, :line 2886, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2886, :column 5, :line 2886, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2886, :column 9, :line 2886, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2886, :column 11, :line 2886, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2886, :column 13, :line 2886, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2886, :column 15, :line 2886, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2888, :column 4, :line 2888, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2888, :column 5, :line 2888, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2888, :column 9, :line 2888, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2888, :column 11, :line 2888, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2888, :column 13, :line 2888, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2888, :column 15, :line 2888, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2888, :column 17, :line 2888, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2890, :column 9, :line 2890, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2890, :column 13, :line 2890, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2890, :column 15, :line 2890, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2890, :column 17, :line 2890, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2890, :column 19, :line 2890, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2890, :column 21, :line 2890, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2877, :column 7, :line 2877, :file "cljs/core.cljs"} vary-meta ^{:arglists (^{:end-column 11, :end-line 2880, :column 4, :line 2880, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2880, :column 5, :line 2880, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2880, :column 9, :line 2880, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2882, :column 4, :line 2882, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2882, :column 5, :line 2882, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2882, :column 9, :line 2882, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2882, :column 11, :line 2882, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 5, :line 2884, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2884, :column 9, :line 2884, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2884, :column 11, :line 2884, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2884, :column 13, :line 2884, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2886, :column 4, :line 2886, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2886, :column 5, :line 2886, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2886, :column 9, :line 2886, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2886, :column 11, :line 2886, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2886, :column 13, :line 2886, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2886, :column 15, :line 2886, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2888, :column 4, :line 2888, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2888, :column 5, :line 2888, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2888, :column 9, :line 2888, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2888, :column 11, :line 2888, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2888, :column 13, :line 2888, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2888, :column 15, :line 2888, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2888, :column 17, :line 2888, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2890, :column 9, :line 2890, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2890, :column 13, :line 2890, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2890, :column 15, :line 2890, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2890, :column 17, :line 2890, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2890, :column 19, :line 2890, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2890, :column 21, :line 2890, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2877, :column 7, :line 2877, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2880, :column 5, :line 2880, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2880, :column 9, :line 2880, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 2882, :column 5, :line 2882, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2882, :column 9, :line 2882, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2882, :column 11, :line 2882, :file "cljs/core.cljs"} a] [^{:end-column 9, :end-line 2884, :column 5, :line 2884, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2884, :column 9, :line 2884, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2884, :column 11, :line 2884, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2884, :column 13, :line 2884, :file "cljs/core.cljs"} b] [^{:end-column 9, :end-line 2886, :column 5, :line 2886, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2886, :column 9, :line 2886, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2886, :column 11, :line 2886, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2886, :column 13, :line 2886, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2886, :column 15, :line 2886, :file "cljs/core.cljs"} c] [^{:end-column 9, :end-line 2888, :column 5, :line 2888, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2888, :column 9, :line 2888, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2888, :column 11, :line 2888, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2888, :column 13, :line 2888, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2888, :column 15, :line 2888, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2888, :column 17, :line 2888, :file "cljs/core.cljs"} d] [^{:end-column 9, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2890, :column 9, :line 2890, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2890, :column 13, :line 2890, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2890, :column 15, :line 2890, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2890, :column 17, :line 2890, :file "cljs/core.cljs"} d & ^{:end-column 26, :end-line 2890, :column 21, :line 2890, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2880, :column 4, :line 2880, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2880, :column 5, :line 2880, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2880, :column 9, :line 2880, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2882, :column 4, :line 2882, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2882, :column 5, :line 2882, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2882, :column 9, :line 2882, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2882, :column 11, :line 2882, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 5, :line 2884, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2884, :column 9, :line 2884, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2884, :column 11, :line 2884, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2884, :column 13, :line 2884, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2886, :column 4, :line 2886, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2886, :column 5, :line 2886, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2886, :column 9, :line 2886, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2886, :column 11, :line 2886, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2886, :column 13, :line 2886, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2886, :column 15, :line 2886, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2888, :column 4, :line 2888, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2888, :column 5, :line 2888, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2888, :column 9, :line 2888, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2888, :column 11, :line 2888, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2888, :column 13, :line 2888, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2888, :column 15, :line 2888, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2888, :column 17, :line 2888, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2890, :column 9, :line 2890, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2890, :column 13, :line 2890, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2890, :column 15, :line 2890, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2890, :column 17, :line 2890, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2890, :column 19, :line 2890, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2890, :column 21, :line 2890, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2877, :column 7, :line 2877, :file "cljs/core.cljs"} vary-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 255, :column 14, :line 255, :file "cljs/core.cljs"} INext ^{:impls (cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentArrayMapSeq cljs.core/ChunkedSeq cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 255, :column 14, :line 255, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 255, :column 14, :line 255, :file "cljs/core.cljs"} INext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_ ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 19, :end-line 2936, :column 1, :line 2936, :file "cljs/core.cljs"} START ^{:end-column 19, :end-line 2936, :column 1, :line 2936, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 19, :end-line 2936, :column 1, :line 2936, :file "cljs/core.cljs"} START, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 234, :column 14, :line 234, :file "cljs/core.cljs"} ICounted ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/TransientHashMap cljs.core/PersistentHashMap cljs.core/TransientArrayMap cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/ChunkBuffer cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq nil), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 234, :column 14, :line 234, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 234, :column 14, :line 234, :file "cljs/core.cljs"} ICounted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]], ^{:end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 270, :column 14, :line 270, :file "cljs/core.cljs"} IMapEntry ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]], ^{:end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 270, :column 14, :line 270, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]], ^{:end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 270, :column 14, :line 270, :file "cljs/core.cljs"} IMapEntry, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1753, :column 4, :line 1753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1753, :column 5, :line 1753, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1753, :column 7, :line 1753, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1753, :column 9, :line 1753, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1753, :column 11, :line 1753, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1748, :column 8, :line 1748, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1748, :column 16, :line 1748, :file "cljs/core.cljs"} <= ^{:arglists (^{:end-column 7, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1753, :column 4, :line 1753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1753, :column 5, :line 1753, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1753, :column 7, :line 1753, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1753, :column 9, :line 1753, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1753, :column 11, :line 1753, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1748, :column 8, :line 1748, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1748, :column 16, :line 1748, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1753, :column 5, :line 1753, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1753, :column 7, :line 1753, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1753, :column 11, :line 1753, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1753, :column 4, :line 1753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1753, :column 5, :line 1753, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1753, :column 7, :line 1753, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1753, :column 9, :line 1753, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1753, :column 11, :line 1753, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1748, :column 8, :line 1748, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1748, :column 16, :line 1748, :file "cljs/core.cljs"} <=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2772, :column 4, :line 2772, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2773, :column 4, :line 2773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2773, :column 5, :line 2773, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2774, :column 4, :line 2774, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2774, :column 5, :line 2774, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2774, :column 11, :line 2774, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2776, :column 4, :line 2776, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2776, :column 5, :line 2776, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2776, :column 11, :line 2776, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2776, :column 15, :line 2776, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2776, :column 17, :line 2776, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2769, :column 7, :line 2769, :file "cljs/core.cljs"} conj! ^{:arglists (^{:end-column 6, :end-line 2772, :column 4, :line 2772, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2773, :column 4, :line 2773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2773, :column 5, :line 2773, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2774, :column 4, :line 2774, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2774, :column 5, :line 2774, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2774, :column 11, :line 2774, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2776, :column 4, :line 2776, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2776, :column 5, :line 2776, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2776, :column 11, :line 2776, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2776, :column 15, :line 2776, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2776, :column 17, :line 2776, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2769, :column 7, :line 2769, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj [] [^{:end-column 10, :end-line 2773, :column 5, :line 2773, :file "cljs/core.cljs"} coll] ^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2774, :column 5, :line 2774, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2774, :column 11, :line 2774, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2776, :column 5, :line 2776, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2776, :column 11, :line 2776, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2776, :column 17, :line 2776, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2772, :column 4, :line 2772, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2773, :column 4, :line 2773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2773, :column 5, :line 2773, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2774, :column 4, :line 2774, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2774, :column 5, :line 2774, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2774, :column 11, :line 2774, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2776, :column 4, :line 2776, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2776, :column 5, :line 2776, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2776, :column 11, :line 2776, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2776, :column 15, :line 2776, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2776, :column 17, :line 2776, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2769, :column 7, :line 2769, :file "cljs/core.cljs"} conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -pop ^{:arglists (^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3687, :column 4, :line 3687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3687, :column 5, :line 3687, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3688, :column 4, :line 3688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3688, :column 5, :line 3688, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3688, :column 7, :line 3688, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3683, :column 7, :line 3683, :file "cljs/core.cljs"} repeatedly ^{:arglists (^{:end-column 7, :end-line 3687, :column 4, :line 3687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3687, :column 5, :line 3687, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3688, :column 4, :line 3688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3688, :column 5, :line 3688, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3688, :column 7, :line 3688, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3683, :column 7, :line 3683, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3687, :column 5, :line 3687, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3688, :column 5, :line 3688, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3688, :column 7, :line 3688, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3687, :column 4, :line 3687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3687, :column 5, :line 3687, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3688, :column 4, :line 3688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3688, :column 5, :line 3688, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3688, :column 7, :line 3688, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3683, :column 7, :line 3683, :file "cljs/core.cljs"} repeatedly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7394, :column 3, :line 7394, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7394, :column 4, :line 7394, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7394, :column 9, :line 7394, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7392, :column 7, :line 7392, :file "cljs/core.cljs"} zipmap ^{:arglists (^{:end-column 14, :end-line 7394, :column 3, :line 7394, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7394, :column 4, :line 7394, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7394, :column 9, :line 7394, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7392, :column 7, :line 7392, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 7394, :column 4, :line 7394, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7394, :column 9, :line 7394, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7394, :column 3, :line 7394, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7394, :column 4, :line 7394, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7394, :column 9, :line 7394, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7392, :column 7, :line 7392, :file "cljs/core.cljs"} zipmap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} IStack ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentQueue cljs.core/Subvec cljs.core/PersistentVector cljs.core/EmptyList cljs.core/List), :protocol-info {:methods {^{:end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} IStack, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} -remove-watch ^{:arglists (^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} -remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3772, :column 5, :line 3772, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3773, :column 4, :line 3773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3773, :column 5, :line 3773, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3773, :column 10, :line 3773, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3768, :column 7, :line 3768, :file "cljs/core.cljs"} remove ^{:arglists (^{:end-column 10, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3772, :column 5, :line 3772, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3773, :column 4, :line 3773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3773, :column 5, :line 3773, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3773, :column 10, :line 3773, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3768, :column 7, :line 3768, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3772, :column 5, :line 3772, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3773, :column 5, :line 3773, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3773, :column 10, :line 3773, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3772, :column 5, :line 3772, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3773, :column 4, :line 3773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3773, :column 5, :line 3773, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3773, :column 10, :line 3773, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3768, :column 7, :line 3768, :file "cljs/core.cljs"} remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 34, :end-line 5414, :column 29, :line 5414, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5414, :column 44, :line 5414, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5414, :column 61, :line 5414, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5414, :column 10, :line 5414, :file "cljs/core.cljs"} ->BitmapIndexedNode ^{:arglists ([^{:end-column 34, :end-line 5414, :column 29, :line 5414, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5414, :column 44, :line 5414, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5414, :column 61, :line 5414, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5414, :column 10, :line 5414, :file "cljs/core.cljs"} {:arglists (^cljs.core/BitmapIndexedNode [^{:end-column 34, :end-line 5414, :column 29, :line 5414, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5414, :column 44, :line 5414, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5414, :column 61, :line 5414, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 5414, :column 29, :line 5414, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5414, :column 44, :line 5414, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5414, :column 61, :line 5414, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5414, :column 10, :line 5414, :file "cljs/core.cljs"} ->BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1722, :column 4, :line 1722, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1723, :column 4, :line 1723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1723, :column 5, :line 1723, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1724, :column 4, :line 1724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1724, :column 5, :line 1724, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1725, :column 4, :line 1725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1725, :column 5, :line 1725, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1725, :column 7, :line 1725, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1725, :column 9, :line 1725, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1725, :column 11, :line 1725, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1720, :column 8, :line 1720, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} * ^{:arglists (^{:end-column 6, :end-line 1722, :column 4, :line 1722, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1723, :column 4, :line 1723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1723, :column 5, :line 1723, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1724, :column 4, :line 1724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1724, :column 5, :line 1724, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1725, :column 4, :line 1725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1725, :column 5, :line 1725, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1725, :column 7, :line 1725, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1725, :column 9, :line 1725, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1725, :column 11, :line 1725, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1720, :column 8, :line 1720, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1723, :column 5, :line 1723, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1724, :column 5, :line 1724, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1725, :column 5, :line 1725, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1725, :column 7, :line 1725, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1725, :column 11, :line 1725, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1722, :column 4, :line 1722, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1723, :column 4, :line 1723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1723, :column 5, :line 1723, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1724, :column 4, :line 1724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1724, :column 5, :line 1724, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1725, :column 4, :line 1725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1725, :column 5, :line 1725, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1725, :column 7, :line 1725, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1725, :column 9, :line 1725, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1725, :column 11, :line 1725, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1720, :column 8, :line 1720, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} *, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7816, :column 3, :line 7816, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7816, :column 4, :line 7816, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7814, :column 7, :line 7814, :file "cljs/core.cljs"} re-pattern ^{:arglists (^{:end-column 6, :end-line 7816, :column 3, :line 7816, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7816, :column 4, :line 7816, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7814, :column 7, :line 7814, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7816, :column 4, :line 7816, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7816, :column 3, :line 7816, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7816, :column 4, :line 7816, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7814, :column 7, :line 7814, :file "cljs/core.cljs"} re-pattern, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1797, :column 4, :line 1797, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1797, :column 5, :line 1797, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1798, :column 4, :line 1798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1798, :column 5, :line 1798, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1798, :column 7, :line 1798, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1799, :column 7, :line 1799, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1799, :column 9, :line 1799, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1799, :column 11, :line 1799, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} min ^{:arglists (^{:end-column 7, :end-line 1797, :column 4, :line 1797, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1797, :column 5, :line 1797, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1798, :column 4, :line 1798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1798, :column 5, :line 1798, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1798, :column 7, :line 1798, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1799, :column 7, :line 1799, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1799, :column 9, :line 1799, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1799, :column 11, :line 1799, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1797, :column 5, :line 1797, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1798, :column 5, :line 1798, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1798, :column 7, :line 1798, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1799, :column 7, :line 1799, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1799, :column 11, :line 1799, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1797, :column 4, :line 1797, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1797, :column 5, :line 1797, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1798, :column 4, :line 1798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1798, :column 5, :line 1798, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1798, :column 7, :line 1798, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1799, :column 7, :line 1799, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1799, :column 9, :line 1799, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1799, :column 11, :line 1799, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} min, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 4951, :column 32, :line 4951, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4951, :column 33, :line 4951, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4951, :column 37, :line 4951, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4951, :column 39, :line 4951, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4951, :column 8, :line 4951, :file "cljs/core.cljs"} array-map-index-of-nil? ^{:arglists (^{:end-column 41, :end-line 4951, :column 32, :line 4951, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4951, :column 33, :line 4951, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4951, :column 37, :line 4951, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4951, :column 39, :line 4951, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4951, :column 8, :line 4951, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 4951, :column 33, :line 4951, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4951, :column 37, :line 4951, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4951, :column 39, :line 4951, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 4951, :column 32, :line 4951, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4951, :column 33, :line 4951, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4951, :column 37, :line 4951, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4951, :column 39, :line 4951, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4951, :column 8, :line 4951, :file "cljs/core.cljs"} array-map-index-of-nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} -persistent! ^{:arglists (^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} -persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -nth ^{:arglists (^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2807, :column 3, :line 2807, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2807, :column 4, :line 2807, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} pop! ^{:arglists (^{:end-column 10, :end-line 2807, :column 3, :line 2807, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2807, :column 4, :line 2807, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2807, :column 4, :line 2807, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2807, :column 3, :line 2807, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2807, :column 4, :line 2807, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2583, :column 20, :line 2583, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2583, :column 21, :line 2583, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2583, :column 23, :line 2583, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} chunk-append ^{:arglists (^{:end-column 25, :end-line 2583, :column 20, :line 2583, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2583, :column 21, :line 2583, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2583, :column 23, :line 2583, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 2583, :column 21, :line 2583, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2583, :column 23, :line 2583, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2583, :column 20, :line 2583, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2583, :column 21, :line 2583, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2583, :column 23, :line 2583, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} chunk-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7992, :column 3, :line 7992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7992, :column 4, :line 7992, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7992, :column 6, :line 7992, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7990, :column 7, :line 7990, :file "cljs/core.cljs"} prn-str ^{:arglists (^{:end-column 11, :end-line 7992, :column 3, :line 7992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7992, :column 4, :line 7992, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7992, :column 6, :line 7992, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7990, :column 7, :line 7990, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7992, :column 6, :line 7992, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7992, :column 3, :line 7992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7992, :column 4, :line 7992, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7992, :column 6, :line 7992, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7990, :column 7, :line 7990, :file "cljs/core.cljs"} prn-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 320, :column 14, :line 320, :file "cljs/core.cljs"} IReversible ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentTreeMap cljs.core/Subvec cljs.core/PersistentVector cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 320, :column 14, :line 320, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 320, :column 14, :line 320, :file "cljs/core.cljs"} IReversible, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([meta8428]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} ->t8427 ^{:file "cljs/core.cljs", :arglists ([meta8428]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} {:arglists (^cljs.core/t8427 [meta8428]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([meta8428]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} ->t8427, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 2251, :column 28, :line 2251, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2251, :column 29, :line 2251, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2251, :column 8, :line 2251, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} reversible? ^{:arglists (^{:end-column 34, :end-line 2251, :column 28, :line 2251, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2251, :column 29, :line 2251, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2251, :column 8, :line 2251, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 34, :end-line 2251, :column 29, :line 2251, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 2251, :column 28, :line 2251, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2251, :column 29, :line 2251, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2251, :column 8, :line 2251, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} reversible?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} -realized? ^{:arglists (^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} -realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -add-watch ^{:arglists (^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} -deref-with-timeout ^{:arglists (^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} -deref-with-timeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1051, :column 4, :line 1051, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1052, :column 4, :line 1052, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1052, :column 5, :line 1052, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1053, :column 4, :line 1053, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1053, :column 5, :line 1053, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1053, :column 10, :line 1053, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1057, :column 5, :line 1057, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1057, :column 10, :line 1057, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1057, :column 12, :line 1057, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1057, :column 14, :line 1057, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1047, :column 7, :line 1047, :file "cljs/core.cljs"} conj ^{:arglists (^{:end-column 6, :end-line 1051, :column 4, :line 1051, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1052, :column 4, :line 1052, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1052, :column 5, :line 1052, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1053, :column 4, :line 1053, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1053, :column 5, :line 1053, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1053, :column 10, :line 1053, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1057, :column 5, :line 1057, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1057, :column 10, :line 1057, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1057, :column 12, :line 1057, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1057, :column 14, :line 1057, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1047, :column 7, :line 1047, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [] [^{:end-column 10, :end-line 1052, :column 5, :line 1052, :file "cljs/core.cljs"} coll] ^^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 1053, :column 5, :line 1053, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1053, :column 10, :line 1053, :file "cljs/core.cljs"} x] [^{:end-column 10, :end-line 1057, :column 5, :line 1057, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1057, :column 10, :line 1057, :file "cljs/core.cljs"} x & ^{:end-column 17, :end-line 1057, :column 14, :line 1057, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1051, :column 4, :line 1051, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1052, :column 4, :line 1052, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1052, :column 5, :line 1052, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1053, :column 4, :line 1053, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1053, :column 5, :line 1053, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1053, :column 10, :line 1053, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1057, :column 5, :line 1057, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1057, :column 10, :line 1057, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1057, :column 12, :line 1057, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1057, :column 14, :line 1057, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1047, :column 7, :line 1047, :file "cljs/core.cljs"} conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq ^{:arglists (^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3718, :column 3, :line 3718, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3718, :column 4, :line 3718, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3715, :column 8, :line 3715, :file "cljs/core.cljs"} flatten1 ^{:arglists (^{:end-column 10, :end-line 3718, :column 3, :line 3718, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3718, :column 4, :line 3718, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3715, :column 8, :line 3715, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 10, :end-line 3718, :column 4, :line 3718, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3718, :column 3, :line 3718, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3718, :column 4, :line 3718, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3715, :column 8, :line 3715, :file "cljs/core.cljs"} flatten1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1696, :column 4, :line 1696, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1696, :column 5, :line 1696, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1696, :column 11, :line 1696, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1696, :column 13, :line 1696, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1697, :column 5, :line 1697, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1697, :column 11, :line 1697, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1697, :column 13, :line 1697, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1697, :column 18, :line 1697, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1687, :column 7, :line 1687, :file "cljs/core.cljs"} transduce ^{:arglists (^{:end-column 18, :end-line 1696, :column 4, :line 1696, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1696, :column 5, :line 1696, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1696, :column 11, :line 1696, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1696, :column 13, :line 1696, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1697, :column 5, :line 1697, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1697, :column 11, :line 1697, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1697, :column 13, :line 1697, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1697, :column 18, :line 1697, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1687, :column 7, :line 1687, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 1696, :column 5, :line 1696, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1696, :column 11, :line 1696, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1696, :column 13, :line 1696, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 1697, :column 5, :line 1697, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1697, :column 11, :line 1697, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1697, :column 13, :line 1697, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1697, :column 18, :line 1697, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1696, :column 4, :line 1696, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1696, :column 5, :line 1696, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1696, :column 11, :line 1696, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1696, :column 13, :line 1696, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1697, :column 5, :line 1697, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1697, :column 11, :line 1697, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1697, :column 13, :line 1697, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1697, :column 18, :line 1697, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1687, :column 7, :line 1687, :file "cljs/core.cljs"} transduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8217, :column 1, :line 8217, :file "cljs/core.cljs"} fixture1 ^{:end-column 17, :end-line 8217, :column 1, :line 8217, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8217, :column 1, :line 8217, :file "cljs/core.cljs"} fixture1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} -swap! ^{:arglists (^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} -swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length* ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 1417, :column 17, :line 1417, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1417, :column 18, :line 1417, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1417, :column 22, :line 1417, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1417, :column 7, :line 1417, :file "cljs/core.cljs"} js-delete ^{:arglists (^{:end-column 26, :end-line 1417, :column 17, :line 1417, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1417, :column 18, :line 1417, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1417, :column 22, :line 1417, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1417, :column 7, :line 1417, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 1417, :column 18, :line 1417, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1417, :column 22, :line 1417, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 1417, :column 17, :line 1417, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1417, :column 18, :line 1417, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1417, :column 22, :line 1417, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1417, :column 7, :line 1417, :file "cljs/core.cljs"} js-delete, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_ ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 8631, :column 19, :line 8631, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8631, :column 24, :line 8631, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8631, :column 36, :line 8631, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8631, :column 57, :line 8631, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8632, :column 19, :line 8632, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8632, :column 32, :line 8632, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8632, :column 45, :line 8632, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8632, :column 58, :line 8632, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8631, :column 10, :line 8631, :file "cljs/core.cljs"} ->MultiFn ^{:arglists ([^{:end-column 24, :end-line 8631, :column 19, :line 8631, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8631, :column 24, :line 8631, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8631, :column 36, :line 8631, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8631, :column 57, :line 8631, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8632, :column 19, :line 8632, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8632, :column 32, :line 8632, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8632, :column 45, :line 8632, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8632, :column 58, :line 8632, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8631, :column 10, :line 8631, :file "cljs/core.cljs"} {:arglists (^cljs.core/MultiFn [^{:end-column 24, :end-line 8631, :column 19, :line 8631, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8631, :column 24, :line 8631, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8631, :column 36, :line 8631, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8631, :column 57, :line 8631, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8632, :column 19, :line 8632, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8632, :column 32, :line 8632, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8632, :column 45, :line 8632, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8632, :column 58, :line 8632, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 8631, :column 19, :line 8631, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8631, :column 24, :line 8631, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8631, :column 36, :line 8631, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8631, :column 57, :line 8631, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8632, :column 19, :line 8632, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8632, :column 32, :line 8632, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8632, :column 45, :line 8632, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8632, :column 58, :line 8632, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8631, :column 10, :line 8631, :file "cljs/core.cljs"} ->MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8327, :column 15, :line 8327, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8327, :column 16, :line 8327, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8327, :column 7, :line 8327, :file "cljs/core.cljs"} key->js ^{:arglists (^{:end-column 18, :end-line 8327, :column 15, :line 8327, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8327, :column 16, :line 8327, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8327, :column 7, :line 8327, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 8327, :column 16, :line 8327, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8327, :column 15, :line 8327, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8327, :column 16, :line 8327, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8327, :column 7, :line 8327, :file "cljs/core.cljs"} key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 30, :end-line 3002, :column 24, :line 3002, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 3002, :column 30, :line 3002, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 3002, :column 36, :line 3002, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 3002, :column 10, :line 3002, :file "cljs/core.cljs"} ->MultiStepper ^{:arglists ([^{:end-column 30, :end-line 3002, :column 24, :line 3002, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 3002, :column 30, :line 3002, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 3002, :column 36, :line 3002, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 3002, :column 10, :line 3002, :file "cljs/core.cljs"} {:arglists (^cljs.core/MultiStepper [^{:end-column 30, :end-line 3002, :column 24, :line 3002, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 3002, :column 30, :line 3002, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 3002, :column 36, :line 3002, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 30, :end-line 3002, :column 24, :line 3002, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 3002, :column 30, :line 3002, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 3002, :column 36, :line 3002, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 3002, :column 10, :line 3002, :file "cljs/core.cljs"} ->MultiStepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]], ^{:end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 24, :end-line 8320, :column 14, :line 8320, :file "cljs/core.cljs"} IEncodeJS ^{:protocol-info {:methods {^{:end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]], ^{:end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 24, :end-line 8320, :column 14, :line 8320, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]], ^{:end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 24, :end-line 8320, :column 14, :line 8320, :file "cljs/core.cljs"} IEncodeJS, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3939, :column 17, :line 3939, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3939, :column 18, :line 3939, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3939, :column 23, :line 3939, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3939, :column 29, :line 3939, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3939, :column 8, :line 3939, :file "cljs/core.cljs"} new-path ^{:arglists (^{:end-column 34, :end-line 3939, :column 17, :line 3939, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3939, :column 18, :line 3939, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3939, :column 23, :line 3939, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3939, :column 29, :line 3939, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3939, :column 8, :line 3939, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 3939, :column 18, :line 3939, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3939, :column 23, :line 3939, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3939, :column 29, :line 3939, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3939, :column 17, :line 3939, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3939, :column 18, :line 3939, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3939, :column 23, :line 3939, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3939, :column 29, :line 3939, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3939, :column 8, :line 3939, :file "cljs/core.cljs"} new-path, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 3395, :column 3, :line 3395, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3395, :column 4, :line 3395, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3395, :column 6, :line 3395, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3395, :column 13, :line 3395, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3391, :column 7, :line 3391, :file "cljs/core.cljs"} compare-and-set! ^{:arglists (^{:end-column 20, :end-line 3395, :column 3, :line 3395, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3395, :column 4, :line 3395, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3395, :column 6, :line 3395, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3395, :column 13, :line 3395, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3391, :column 7, :line 3391, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 3395, :column 4, :line 3395, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3395, :column 6, :line 3395, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3395, :column 13, :line 3395, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 3395, :column 3, :line 3395, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3395, :column 4, :line 3395, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3395, :column 6, :line 3395, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3395, :column 13, :line 3395, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3391, :column 7, :line 3391, :file "cljs/core.cljs"} compare-and-set!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 609, :column 10, :line 609, :file "cljs/core.cljs"} array-seq ^{:arglists (^{:end-column 11, :end-line 950, :column 4, :line 950, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 950, :column 5, :line 950, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 952, :column 4, :line 952, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 952, :column 5, :line 952, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 952, :column 11, :line 952, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 949, :column 7, :line 949, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 950, :column 5, :line 950, :file "cljs/core.cljs"} array] [^{:end-column 11, :end-line 952, :column 5, :line 952, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 952, :column 11, :line 952, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 950, :column 4, :line 950, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 950, :column 5, :line 950, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 952, :column 4, :line 952, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 952, :column 5, :line 952, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 952, :column 11, :line 952, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 949, :column 7, :line 949, :file "cljs/core.cljs"} array-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1429, :column 4, :line 1429, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1429, :column 5, :line 1429, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1429, :column 10, :line 1429, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1429, :column 12, :line 1429, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1429, :column 15, :line 1429, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1429, :column 17, :line 1429, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} array-copy-downward ^{:arglists (^{:end-column 21, :end-line 1429, :column 4, :line 1429, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1429, :column 5, :line 1429, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1429, :column 10, :line 1429, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1429, :column 12, :line 1429, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1429, :column 15, :line 1429, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1429, :column 17, :line 1429, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1429, :column 5, :line 1429, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1429, :column 10, :line 1429, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1429, :column 12, :line 1429, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1429, :column 15, :line 1429, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1429, :column 17, :line 1429, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1429, :column 4, :line 1429, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1429, :column 5, :line 1429, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1429, :column 10, :line 1429, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1429, :column 12, :line 1429, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1429, :column 15, :line 1429, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1429, :column 17, :line 1429, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} array-copy-downward, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5612, :column 24, :line 5612, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5612, :column 25, :line 5612, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5612, :column 36, :line 5612, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5612, :column 41, :line 5612, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5612, :column 8, :line 5612, :file "cljs/core.cljs"} pack-array-node ^{:arglists (^{:end-column 45, :end-line 5612, :column 24, :line 5612, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5612, :column 25, :line 5612, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5612, :column 36, :line 5612, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5612, :column 41, :line 5612, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5612, :column 8, :line 5612, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 5612, :column 25, :line 5612, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5612, :column 36, :line 5612, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5612, :column 41, :line 5612, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5612, :column 24, :line 5612, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5612, :column 25, :line 5612, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5612, :column 36, :line 5612, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5612, :column 41, :line 5612, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5612, :column 8, :line 5612, :file "cljs/core.cljs"} pack-array-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3697, :column 4, :line 3697, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3697, :column 5, :line 3697, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3697, :column 8, :line 3697, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3703, :column 4, :line 3703, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3703, :column 5, :line 3703, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3703, :column 8, :line 3703, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3703, :column 11, :line 3703, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3703, :column 13, :line 3703, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} interleave ^{:arglists (^{:end-column 11, :end-line 3697, :column 4, :line 3697, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3697, :column 5, :line 3697, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3697, :column 8, :line 3697, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3703, :column 4, :line 3703, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3703, :column 5, :line 3703, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3703, :column 8, :line 3703, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3703, :column 11, :line 3703, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3703, :column 13, :line 3703, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3697, :column 5, :line 3697, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3697, :column 8, :line 3697, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 8, :end-line 3703, :column 5, :line 3703, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3703, :column 8, :line 3703, :file "cljs/core.cljs"} c2 & ^{:end-column 19, :end-line 3703, :column 13, :line 3703, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3697, :column 4, :line 3697, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3697, :column 5, :line 3697, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3697, :column 8, :line 3697, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3703, :column 4, :line 3703, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3703, :column 5, :line 3703, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3703, :column 8, :line 3703, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3703, :column 11, :line 3703, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3703, :column 13, :line 3703, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} interleave, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 7871, :column 10, :line 7871, :file "cljs/core.cljs"} print-map ^{:arglists (^{:end-column 42, :end-line 8034, :column 17, :line 8034, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8034, :column 18, :line 8034, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 8034, :column 20, :line 8034, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 8034, :column 30, :line 8034, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 8034, :column 37, :line 8034, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 8034, :column 7, :line 8034, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 8034, :column 18, :line 8034, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 8034, :column 20, :line 8034, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 8034, :column 30, :line 8034, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 8034, :column 37, :line 8034, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 8034, :column 17, :line 8034, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8034, :column 18, :line 8034, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 8034, :column 20, :line 8034, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 8034, :column 30, :line 8034, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 8034, :column 37, :line 8034, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 8034, :column 7, :line 8034, :file "cljs/core.cljs"} print-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1391, :column 3, :line 1391, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1391, :column 4, :line 1391, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1389, :column 8, :line 1389, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1389, :column 16, :line 1389, :file "cljs/core.cljs"} map? ^{:arglists (^{:end-column 6, :end-line 1391, :column 3, :line 1391, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1391, :column 4, :line 1391, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1389, :column 8, :line 1389, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1389, :column 16, :line 1389, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1391, :column 4, :line 1391, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1391, :column 3, :line 1391, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1391, :column 4, :line 1391, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1389, :column 8, :line 1389, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1389, :column 16, :line 1389, :file "cljs/core.cljs"} map?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 438, :column 1, :line 438, :file "cljs/core.cljs"} m3-C1 ^{:end-column 23, :end-line 438, :column 1, :line 438, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 438, :column 1, :line 438, :file "cljs/core.cljs"} m3-C1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1181, :column 4, :line 1181, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1181, :column 5, :line 1181, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1181, :column 7, :line 1181, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1199, :column 4, :line 1199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1199, :column 5, :line 1199, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1199, :column 7, :line 1199, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1199, :column 9, :line 1199, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} get ^{:arglists (^{:end-column 9, :end-line 1181, :column 4, :line 1181, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1181, :column 5, :line 1181, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1181, :column 7, :line 1181, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1199, :column 4, :line 1199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1199, :column 5, :line 1199, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1199, :column 7, :line 1199, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1199, :column 9, :line 1199, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1181, :column 5, :line 1181, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1181, :column 7, :line 1181, :file "cljs/core.cljs"} k] [^{:end-column 7, :end-line 1199, :column 5, :line 1199, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1199, :column 7, :line 1199, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1199, :column 9, :line 1199, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1181, :column 4, :line 1181, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1181, :column 5, :line 1181, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1181, :column 7, :line 1181, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1199, :column 4, :line 1199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1199, :column 5, :line 1199, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1199, :column 7, :line 1199, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1199, :column 9, :line 1199, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} get, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1677, :column 16, :line 1677, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1677, :column 17, :line 1677, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1677, :column 7, :line 1677, :file "cljs/core.cljs"} identity ^{:arglists (^{:end-column 19, :end-line 1677, :column 16, :line 1677, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1677, :column 17, :line 1677, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1677, :column 7, :line 1677, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 1677, :column 17, :line 1677, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1677, :column 16, :line 1677, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1677, :column 17, :line 1677, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1677, :column 7, :line 1677, :file "cljs/core.cljs"} identity, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3802, :column 4, :line 3802, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3802, :column 5, :line 3802, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3802, :column 8, :line 3802, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3808, :column 4, :line 3808, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3808, :column 5, :line 3808, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3808, :column 8, :line 3808, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3808, :column 14, :line 3808, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3799, :column 7, :line 3799, :file "cljs/core.cljs"} into ^{:arglists (^{:end-column 13, :end-line 3802, :column 4, :line 3802, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3802, :column 5, :line 3802, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3802, :column 8, :line 3802, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3808, :column 4, :line 3808, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3808, :column 5, :line 3808, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3808, :column 8, :line 3808, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3808, :column 14, :line 3808, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3799, :column 7, :line 3799, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3802, :column 5, :line 3802, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3802, :column 8, :line 3802, :file "cljs/core.cljs"} from] [^{:end-column 8, :end-line 3808, :column 5, :line 3808, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3808, :column 8, :line 3808, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3808, :column 14, :line 3808, :file "cljs/core.cljs"} from]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3802, :column 4, :line 3802, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3802, :column 5, :line 3802, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3802, :column 8, :line 3802, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3808, :column 4, :line 3808, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3808, :column 5, :line 3808, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3808, :column 8, :line 3808, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3808, :column 14, :line 3808, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3799, :column 7, :line 3799, :file "cljs/core.cljs"} into, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1911, :column 3, :line 1911, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1911, :column 4, :line 1911, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1909, :column 7, :line 1909, :file "cljs/core.cljs"} long ^{:arglists (^{:end-column 6, :end-line 1911, :column 3, :line 1911, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1911, :column 4, :line 1911, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1909, :column 7, :line 1909, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1911, :column 4, :line 1911, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1911, :column 3, :line 1911, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1911, :column 4, :line 1911, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1909, :column 7, :line 1909, :file "cljs/core.cljs"} long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 1814, :column 22, :line 1814, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1814, :column 23, :line 1814, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1814, :column 8, :line 1814, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1814, :column 15, :line 1814, :file "cljs/core.cljs"} double ^{:arglists (^{:end-column 25, :end-line 1814, :column 22, :line 1814, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1814, :column 23, :line 1814, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1814, :column 8, :line 1814, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1814, :column 15, :line 1814, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 1814, :column 23, :line 1814, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 1814, :column 22, :line 1814, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1814, :column 23, :line 1814, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1814, :column 8, :line 1814, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1814, :column 15, :line 1814, :file "cljs/core.cljs"} double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2467, :column 10, :line 2467, :file "cljs/core.cljs"} ChunkBuffer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2467, :column 10, :line 2467, :file "cljs/core.cljs"} ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 2467, :column 22, :line 2467, :file "cljs/core.cljs"} [^{:mutable true, :end-column 37, :end-line 2467, :column 33, :line 2467, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2467, :column 47, :line 2467, :file "cljs/core.cljs"} end], :protocols #{Object cljs.core/ICounted}}, ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -key ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1022, :column 3, :line 1022, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1022, :column 4, :line 1022, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1020, :column 7, :line 1020, :file "cljs/core.cljs"} nfirst ^{:arglists (^{:end-column 9, :end-line 1022, :column 3, :line 1022, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1022, :column 4, :line 1022, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1020, :column 7, :line 1020, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 667, :column 8, :line 667, :file "cljs/core.cljs"} seq [^{:end-column 9, :end-line 1022, :column 4, :line 1022, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1022, :column 3, :line 1022, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1022, :column 4, :line 1022, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1020, :column 7, :line 1020, :file "cljs/core.cljs"} nfirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 399, :column 10, :line 399, :file "cljs/core.cljs"} StringBufferWriter {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 399, :column 10, :line 399, :file "cljs/core.cljs"} StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 399, :column 29, :line 399, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 399, :column 30, :line 399, :file "cljs/core.cljs"} sb], :protocols #{cljs.core/IWriter}}, ^{:arglists (^{:end-column 6, :end-line 1319, :column 3, :line 1319, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1319, :column 4, :line 1319, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1317, :column 7, :line 1317, :file "cljs/core.cljs"} meta ^{:arglists (^{:end-column 6, :end-line 1319, :column 3, :line 1319, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1319, :column 4, :line 1319, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1317, :column 7, :line 1317, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1319, :column 4, :line 1319, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1319, :column 3, :line 1319, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1319, :column 4, :line 1319, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1317, :column 7, :line 1317, :file "cljs/core.cljs"} meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 44, :end-line 4035, :column 27, :line 4035, :file "cljs/core.cljs"} tv-editable-tail ^{:arglists (^{:end-column 29, :end-line 4457, :column 25, :line 4457, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4457, :column 26, :line 4457, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 4457, :column 8, :line 4457, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 29, :end-line 4457, :column 26, :line 4457, :file "cljs/core.cljs"} tl]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 4457, :column 25, :line 4457, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4457, :column 26, :line 4457, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 4457, :column 8, :line 4457, :file "cljs/core.cljs"} tv-editable-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} -kv-reduce ^{:arglists (^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} -kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 305, :column 14, :line 305, :file "cljs/core.cljs"} IHash ^{:impls (cljs.core/UUID cljs.core/MultiFn cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Keyword cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq ^{:end-column 22, :end-line 759, :column 14, :line 759, :file "cljs/core.cljs"} default cljs.core/Symbol), :protocol-info {:methods {^{:end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 305, :column 14, :line 305, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 305, :column 14, :line 305, :file "cljs/core.cljs"} IHash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1973, :column 6, :line 1973, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} bit-and-not ^{:arglists (^{:end-column 8, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1973, :column 6, :line 1973, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1973, :column 6, :line 1973, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1973, :column 6, :line 1973, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} bit-and-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} -comparator ^{:arglists (^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} -comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1833, :column 7, :line 1833, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1834, :column 9, :line 1834, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1834, :column 11, :line 1834, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1829, :column 8, :line 1829, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1829, :column 15, :line 1829, :file "cljs/core.cljs"} unchecked-add-int ^{:arglists (^{:end-column 6, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1833, :column 7, :line 1833, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1834, :column 9, :line 1834, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1834, :column 11, :line 1834, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1829, :column 8, :line 1829, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1829, :column 15, :line 1829, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1833, :column 7, :line 1833, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1834, :column 11, :line 1834, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1833, :column 7, :line 1833, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1834, :column 9, :line 1834, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1834, :column 11, :line 1834, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1829, :column 8, :line 1829, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1829, :column 15, :line 1829, :file "cljs/core.cljs"} unchecked-add-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 712, :column 3, :line 712, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 712, :column 4, :line 712, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 708, :column 8, :line 708, :file "cljs/core.cljs"} number, :end-column 33, :end-line 708, :column 15, :line 708, :file "cljs/core.cljs"} hash-ordered-coll ^{:arglists (^{:end-column 9, :end-line 712, :column 3, :line 712, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 712, :column 4, :line 712, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 708, :column 8, :line 708, :file "cljs/core.cljs"} number, :end-column 33, :end-line 708, :column 15, :line 708, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 9, :end-line 712, :column 4, :line 712, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 712, :column 3, :line 712, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 712, :column 4, :line 712, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 708, :column 8, :line 708, :file "cljs/core.cljs"} number, :end-column 33, :end-line 708, :column 15, :line 708, :file "cljs/core.cljs"} hash-ordered-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2131, :column 3, :line 2131, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2131, :column 4, :line 2131, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2131, :column 8, :line 2131, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2126, :column 8, :line 2126, :file "cljs/core.cljs"} extend-object! ^{:arglists (^{:end-column 15, :end-line 2131, :column 3, :line 2131, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2131, :column 4, :line 2131, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2131, :column 8, :line 2131, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2126, :column 8, :line 2126, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 2131, :column 4, :line 2131, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2131, :column 8, :line 2131, :file "cljs/core.cljs"} fn-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2131, :column 3, :line 2131, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2131, :column 4, :line 2131, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2131, :column 8, :line 2131, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2126, :column 8, :line 2126, :file "cljs/core.cljs"} extend-object!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 3992, :column 17, :line 3992, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3992, :column 18, :line 3992, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3992, :column 21, :line 3992, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3992, :column 27, :line 3992, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3992, :column 32, :line 3992, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3992, :column 34, :line 3992, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3992, :column 8, :line 3992, :file "cljs/core.cljs"} do-assoc ^{:arglists (^{:end-column 38, :end-line 3992, :column 17, :line 3992, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3992, :column 18, :line 3992, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3992, :column 21, :line 3992, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3992, :column 27, :line 3992, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3992, :column 32, :line 3992, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3992, :column 34, :line 3992, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3992, :column 8, :line 3992, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 21, :end-line 3992, :column 18, :line 3992, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3992, :column 21, :line 3992, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3992, :column 27, :line 3992, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3992, :column 32, :line 3992, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3992, :column 34, :line 3992, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 3992, :column 17, :line 3992, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3992, :column 18, :line 3992, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3992, :column 21, :line 3992, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3992, :column 27, :line 3992, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3992, :column 32, :line 3992, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3992, :column 34, :line 3992, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3992, :column 8, :line 3992, :file "cljs/core.cljs"} do-assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8167, :column 3, :line 8167, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8167, :column 4, :line 8167, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8167, :column 9, :line 8167, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8165, :column 7, :line 8165, :file "cljs/core.cljs"} reset-meta! ^{:arglists (^{:end-column 11, :end-line 8167, :column 3, :line 8167, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8167, :column 4, :line 8167, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8167, :column 9, :line 8167, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8165, :column 7, :line 8165, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8167, :column 4, :line 8167, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8167, :column 9, :line 8167, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8167, :column 3, :line 8167, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8167, :column 4, :line 8167, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8167, :column 9, :line 8167, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8165, :column 7, :line 8165, :file "cljs/core.cljs"} reset-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6912, :column 19, :line 6912, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6912, :column 30, :line 6912, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6912, :column 35, :line 6912, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6912, :column 10, :line 6912, :file "cljs/core.cljs"} ->KeySeq ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6912, :column 19, :line 6912, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6912, :column 30, :line 6912, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6912, :column 35, :line 6912, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6912, :column 10, :line 6912, :file "cljs/core.cljs"} {:arglists (^cljs.core/KeySeq [^{:tag ^{:end-column 30, :end-line 6912, :column 19, :line 6912, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6912, :column 30, :line 6912, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6912, :column 35, :line 6912, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6912, :column 19, :line 6912, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6912, :column 30, :line 6912, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6912, :column 35, :line 6912, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6912, :column 10, :line 6912, :file "cljs/core.cljs"} ->KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} t8427 {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} t8427, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields [meta8428], :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}}, ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 21, :end-line 302, :column 14, :line 302, :file "cljs/core.cljs"} IEquiv ^{:impls (cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/NeverEquiv cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Keyword cljs.core/Cons cljs.core/EmptyList cljs.core/List ^{:end-column 22, :end-line 1043, :column 14, :line 1043, :file "cljs/core.cljs"} default cljs.core/RSeq cljs.core/IndexedSeq ^{:end-column 21, :end-line 748, :column 14, :line 748, :file "cljs/core.cljs"} number Date cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 21, :end-line 302, :column 14, :line 302, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 21, :end-line 302, :column 14, :line 302, :file "cljs/core.cljs"} IEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6351, :column 27, :line 6351, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6351, :column 28, :line 6351, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6351, :column 33, :line 6351, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6351, :column 35, :line 6351, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6351, :column 8, :line 6351, :file "cljs/core.cljs"} tree-map-kv-reduce ^{:arglists (^{:end-column 40, :end-line 6351, :column 27, :line 6351, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6351, :column 28, :line 6351, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6351, :column 33, :line 6351, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6351, :column 35, :line 6351, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6351, :column 8, :line 6351, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 6351, :column 28, :line 6351, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6351, :column 33, :line 6351, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6351, :column 35, :line 6351, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6351, :column 27, :line 6351, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6351, :column 28, :line 6351, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6351, :column 33, :line 6351, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6351, :column 35, :line 6351, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6351, :column 8, :line 6351, :file "cljs/core.cljs"} tree-map-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3663, :column 7, :line 3663, :file "cljs/core.cljs"} cycle ^{:arglists (^{:end-column 9, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3663, :column 7, :line 3663, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3663, :column 7, :line 3663, :file "cljs/core.cljs"} cycle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} -deref ^{:arglists (^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} -deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1356, :column 3, :line 1356, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1356, :column 4, :line 1356, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} empty? ^{:arglists (^{:end-column 9, :end-line 1356, :column 3, :line 1356, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1356, :column 4, :line 1356, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 1356, :column 4, :line 1356, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1356, :column 3, :line 1356, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1356, :column 4, :line 1356, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} empty?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1812, :column 21, :line 1812, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1812, :column 22, :line 1812, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1812, :column 8, :line 1812, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1812, :column 15, :line 1812, :file "cljs/core.cljs"} short ^{:arglists (^{:end-column 24, :end-line 1812, :column 21, :line 1812, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1812, :column 22, :line 1812, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1812, :column 8, :line 1812, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1812, :column 15, :line 1812, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1812, :column 22, :line 1812, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1812, :column 21, :line 1812, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1812, :column 22, :line 1812, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1812, :column 8, :line 1812, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1812, :column 15, :line 1812, :file "cljs/core.cljs"} short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} -clj->js ^{:arglists (^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} -clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-first ^{:arglists (^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3832, :column 3, :line 3832, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3832, :column 4, :line 3832, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3832, :column 9, :line 3832, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3829, :column 7, :line 3829, :file "cljs/core.cljs"} filterv ^{:arglists (^{:end-column 14, :end-line 3832, :column 3, :line 3832, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3832, :column 4, :line 3832, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3832, :column 9, :line 3832, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3829, :column 7, :line 3829, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 3832, :column 4, :line 3832, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3832, :column 9, :line 3832, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3832, :column 3, :line 3832, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3832, :column 4, :line 3832, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3832, :column 9, :line 3832, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3829, :column 7, :line 3829, :file "cljs/core.cljs"} filterv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 4035, :column 10, :line 4035, :file "cljs/core.cljs"} tv-editable-root ^{:arglists (^{:end-column 31, :end-line 4454, :column 25, :line 4454, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4454, :column 26, :line 4454, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 4454, :column 8, :line 4454, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 31, :end-line 4454, :column 26, :line 4454, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 4454, :column 25, :line 4454, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4454, :column 26, :line 4454, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 4454, :column 8, :line 4454, :file "cljs/core.cljs"} tv-editable-root, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 512, :column 12, :line 512, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 512, :column 13, :line 512, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 512, :column 7, :line 512, :file "cljs/core.cljs"} hash ^{:arglists (^{:end-column 15, :end-line 512, :column 12, :line 512, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 512, :column 13, :line 512, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 512, :column 7, :line 512, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 512, :column 13, :line 512, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 512, :column 12, :line 512, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 512, :column 13, :line 512, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 512, :column 7, :line 512, :file "cljs/core.cljs"} hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} quot ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} quot, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 1820, :column 32, :line 1820, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1820, :column 33, :line 1820, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1820, :column 15, :line 1820, :file "cljs/core.cljs"} unchecked-double ^{:arglists (^{:end-column 35, :end-line 1820, :column 32, :line 1820, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1820, :column 33, :line 1820, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1820, :column 15, :line 1820, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 1820, :column 33, :line 1820, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 1820, :column 32, :line 1820, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1820, :column 33, :line 1820, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1820, :column 15, :line 1820, :file "cljs/core.cljs"} unchecked-double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 29, :end-line 2516, :column 23, :line 2516, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2516, :column 29, :line 2516, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2516, :column 34, :line 2516, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2516, :column 49, :line 2516, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2516, :column 10, :line 2516, :file "cljs/core.cljs"} ->ChunkedCons ^{:arglists ([^{:end-column 29, :end-line 2516, :column 23, :line 2516, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2516, :column 29, :line 2516, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2516, :column 34, :line 2516, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2516, :column 49, :line 2516, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2516, :column 10, :line 2516, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedCons [^{:end-column 29, :end-line 2516, :column 23, :line 2516, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2516, :column 29, :line 2516, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2516, :column 34, :line 2516, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2516, :column 49, :line 2516, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 29, :end-line 2516, :column 23, :line 2516, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2516, :column 29, :line 2516, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2516, :column 34, :line 2516, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2516, :column 49, :line 2516, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2516, :column 10, :line 2516, :file "cljs/core.cljs"} ->ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 4028, :column 23, :line 4028, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4028, :column 24, :line 4028, :file "cljs/core.cljs"} v ^{:end-column 32, :end-line 4028, :column 26, :line 4028, :file "cljs/core.cljs"} start ^{:end-column 36, :end-line 4028, :column 32, :line 4028, :file "cljs/core.cljs"} end]), :end-column 23, :end-line 4028, :column 7, :line 4028, :file "cljs/core.cljs"} ranged-iterator ^{:arglists (^{:end-column 36, :end-line 4028, :column 23, :line 4028, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4028, :column 24, :line 4028, :file "cljs/core.cljs"} v ^{:end-column 32, :end-line 4028, :column 26, :line 4028, :file "cljs/core.cljs"} start ^{:end-column 36, :end-line 4028, :column 32, :line 4028, :file "cljs/core.cljs"} end]), :end-column 23, :end-line 4028, :column 7, :line 4028, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangedIterator [^{:end-column 26, :end-line 4028, :column 24, :line 4028, :file "cljs/core.cljs"} v ^{:end-column 32, :end-line 4028, :column 26, :line 4028, :file "cljs/core.cljs"} start ^{:end-column 36, :end-line 4028, :column 32, :line 4028, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 4028, :column 23, :line 4028, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4028, :column 24, :line 4028, :file "cljs/core.cljs"} v ^{:end-column 32, :end-line 4028, :column 26, :line 4028, :file "cljs/core.cljs"} start ^{:end-column 36, :end-line 4028, :column 32, :line 4028, :file "cljs/core.cljs"} end]), :end-column 23, :end-line 4028, :column 7, :line 4028, :file "cljs/core.cljs"} ranged-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 31, :end-line 362, :column 14, :line 362, :file "cljs/core.cljs"} ITransientVector ^{:impls (cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 31, :end-line 362, :column 14, :line 362, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 31, :end-line 362, :column 14, :line 362, :file "cljs/core.cljs"} ITransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 2103, :column 10, :line 2103, :file "cljs/core.cljs"} key ^{:arglists (^{:end-column 14, :end-line 6975, :column 3, :line 6975, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6975, :column 4, :line 6975, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6973, :column 7, :line 6973, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 6975, :column 4, :line 6975, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6975, :column 3, :line 6975, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6975, :column 4, :line 6975, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6973, :column 7, :line 6973, :file "cljs/core.cljs"} key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1926, :column 13, :line 1926, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1926, :column 14, :line 1926, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} longs ^{:arglists (^{:end-column 16, :end-line 1926, :column 13, :line 1926, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1926, :column 14, :line 1926, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1926, :column 14, :line 1926, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1926, :column 13, :line 1926, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1926, :column 14, :line 1926, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} longs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2895, :column 4, :line 2895, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2895, :column 5, :line 2895, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2896, :column 4, :line 2896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2896, :column 5, :line 2896, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2896, :column 7, :line 2896, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2897, :column 4, :line 2897, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2897, :column 5, :line 2897, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2897, :column 7, :line 2897, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2897, :column 9, :line 2897, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2897, :column 11, :line 2897, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2893, :column 8, :line 2893, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2893, :column 16, :line 2893, :file "cljs/core.cljs"} not= ^{:arglists (^{:end-column 7, :end-line 2895, :column 4, :line 2895, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2895, :column 5, :line 2895, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2896, :column 4, :line 2896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2896, :column 5, :line 2896, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2896, :column 7, :line 2896, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2897, :column 4, :line 2897, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2897, :column 5, :line 2897, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2897, :column 7, :line 2897, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2897, :column 9, :line 2897, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2897, :column 11, :line 2897, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2893, :column 8, :line 2893, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2893, :column 16, :line 2893, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 2895, :column 5, :line 2895, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 7, :end-line 2896, :column 5, :line 2896, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2896, :column 7, :line 2896, :file "cljs/core.cljs"} y] ^boolean [^{:end-column 7, :end-line 2897, :column 5, :line 2897, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2897, :column 7, :line 2897, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 2897, :column 11, :line 2897, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2895, :column 4, :line 2895, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2895, :column 5, :line 2895, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2896, :column 4, :line 2896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2896, :column 5, :line 2896, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2896, :column 7, :line 2896, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2897, :column 4, :line 2897, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2897, :column 5, :line 2897, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2897, :column 7, :line 2897, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2897, :column 9, :line 2897, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2897, :column 11, :line 2897, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2893, :column 8, :line 2893, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2893, :column 16, :line 2893, :file "cljs/core.cljs"} not=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string? ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4920, :column 20, :line 4920, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4920, :column 21, :line 4920, :file "cljs/core.cljs"} coll]), :end-column 20, :end-line 4920, :column 7, :line 4920, :file "cljs/core.cljs"} es6-iterator ^{:arglists (^{:end-column 26, :end-line 4920, :column 20, :line 4920, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4920, :column 21, :line 4920, :file "cljs/core.cljs"} coll]), :end-column 20, :end-line 4920, :column 7, :line 4920, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6Iterator [^{:end-column 26, :end-line 4920, :column 21, :line 4920, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4920, :column 20, :line 4920, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4920, :column 21, :line 4920, :file "cljs/core.cljs"} coll]), :end-column 20, :end-line 4920, :column 7, :line 4920, :file "cljs/core.cljs"} es6-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8222, :column 10, :line 8222, :file "cljs/core.cljs"} Delay {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8222, :column 10, :line 8222, :file "cljs/core.cljs"} Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 8222, :column 16, :line 8222, :file "cljs/core.cljs"} [^{:mutable true, :end-column 29, :end-line 8222, :column 27, :line 8222, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8222, :column 39, :line 8222, :file "cljs/core.cljs"} value], :protocols #{cljs.core/IPending cljs.core/IDeref}}, ^{:arglists (^{:end-column 14, :end-line 7960, :column 3, :line 7960, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7960, :column 4, :line 7960, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7960, :column 9, :line 7960, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7957, :column 7, :line 7957, :file "cljs/core.cljs"} pr-str-with-opts ^{:arglists (^{:end-column 14, :end-line 7960, :column 3, :line 7960, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7960, :column 4, :line 7960, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7960, :column 9, :line 7960, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7957, :column 7, :line 7957, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7960, :column 4, :line 7960, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7960, :column 9, :line 7960, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7960, :column 3, :line 7960, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7960, :column 4, :line 7960, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7960, :column 9, :line 7960, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7957, :column 7, :line 7957, :file "cljs/core.cljs"} pr-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 439, :column 1, :line 439, :file "cljs/core.cljs"} m3-C2 ^{:end-column 23, :end-line 439, :column 1, :line 439, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 439, :column 1, :line 439, :file "cljs/core.cljs"} m3-C2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 562, :column 18, :line 562, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 562, :column 21, :line 562, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 562, :column 26, :line 562, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 562, :column 40, :line 562, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 562, :column 46, :line 562, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 562, :column 10, :line 562, :file "cljs/core.cljs"} ->Symbol ^{:arglists ([^{:end-column 21, :end-line 562, :column 18, :line 562, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 562, :column 21, :line 562, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 562, :column 26, :line 562, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 562, :column 40, :line 562, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 562, :column 46, :line 562, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 562, :column 10, :line 562, :file "cljs/core.cljs"} {:arglists (^cljs.core/Symbol [^{:end-column 21, :end-line 562, :column 18, :line 562, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 562, :column 21, :line 562, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 562, :column 26, :line 562, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 562, :column 40, :line 562, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 562, :column 46, :line 562, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 562, :column 18, :line 562, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 562, :column 21, :line 562, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 562, :column 26, :line 562, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 562, :column 40, :line 562, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 562, :column 46, :line 562, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 562, :column 10, :line 562, :file "cljs/core.cljs"} ->Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline* ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} unchecked-multiply-int ^{:arglists (^{:end-column 6, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} unchecked-multiply-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 38, :end-line 2124, :column 27, :line 2124, :file "cljs/core.cljs"} chunk-rest ^{:arglists (^{:end-column 21, :end-line 2592, :column 18, :line 2592, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2592, :column 19, :line 2592, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2592, :column 7, :line 2592, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2592, :column 19, :line 2592, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2592, :column 18, :line 2592, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2592, :column 19, :line 2592, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2592, :column 7, :line 2592, :file "cljs/core.cljs"} chunk-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8808, :column 2, :line 8808, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8808, :column 3, :line 8808, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8806, :column 7, :line 8806, :file "cljs/core.cljs"} remove-all-methods ^{:arglists (^{:end-column 11, :end-line 8808, :column 2, :line 8808, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8808, :column 3, :line 8808, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8806, :column 7, :line 8806, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8808, :column 3, :line 8808, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8808, :column 2, :line 8808, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8808, :column 3, :line 8808, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8806, :column 7, :line 8806, :file "cljs/core.cljs"} remove-all-methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8416, :column 4, :line 8416, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8416, :column 5, :line 8416, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8421, :column 4, :line 8421, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8421, :column 5, :line 8421, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8421, :column 7, :line 8421, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8421, :column 9, :line 8421, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8408, :column 7, :line 8408, :file "cljs/core.cljs"} trampoline ^{:arglists (^{:end-column 7, :end-line 8416, :column 4, :line 8416, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8416, :column 5, :line 8416, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8421, :column 4, :line 8421, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8421, :column 5, :line 8421, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8421, :column 7, :line 8421, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8421, :column 9, :line 8421, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8408, :column 7, :line 8408, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8416, :column 5, :line 8416, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 8421, :column 5, :line 8421, :file "cljs/core.cljs"} f & ^{:end-column 14, :end-line 8421, :column 9, :line 8421, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8416, :column 4, :line 8416, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8416, :column 5, :line 8416, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8421, :column 4, :line 8421, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8421, :column 5, :line 8421, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8421, :column 7, :line 8421, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8421, :column 9, :line 8421, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8408, :column 7, :line 8408, :file "cljs/core.cljs"} trampoline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1 ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 1613, :column 10, :line 1613, :file "cljs/core.cljs"} vec ^{:arglists (^{:end-column 17, :end-line 4238, :column 11, :line 4238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4238, :column 12, :line 4238, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 4238, :column 7, :line 4238, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 17, :end-line 4238, :column 12, :line 4238, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 4238, :column 11, :line 4238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4238, :column 12, :line 4238, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 4238, :column 7, :line 4238, :file "cljs/core.cljs"} vec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta* ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -notify-watches ^{:arglists (^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -notify-watches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8631, :column 10, :line 8631, :file "cljs/core.cljs"} MultiFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8631, :column 10, :line 8631, :file "cljs/core.cljs"} MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 75, :end-line 8632, :column 18, :line 8631, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 8631, :column 19, :line 8631, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8631, :column 24, :line 8631, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8631, :column 36, :line 8631, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8631, :column 57, :line 8631, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8632, :column 19, :line 8632, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8632, :column 32, :line 8632, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8632, :column 45, :line 8632, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8632, :column 58, :line 8632, :file "cljs/core.cljs"} cached-hierarchy], :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}}, ^{:arglists (^{:end-column 6, :end-line 1901, :column 3, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} int ^{:arglists (^{:end-column 6, :end-line 1901, :column 3, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1901, :column 3, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6978, :column 19, :line 6978, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6978, :column 30, :line 6978, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6978, :column 35, :line 6978, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6978, :column 10, :line 6978, :file "cljs/core.cljs"} ->ValSeq ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6978, :column 19, :line 6978, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6978, :column 30, :line 6978, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6978, :column 35, :line 6978, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6978, :column 10, :line 6978, :file "cljs/core.cljs"} {:arglists (^cljs.core/ValSeq [^{:tag ^{:end-column 30, :end-line 6978, :column 19, :line 6978, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6978, :column 30, :line 6978, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6978, :column 35, :line 6978, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6978, :column 19, :line 6978, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6978, :column 30, :line 6978, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6978, :column 35, :line 6978, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6978, :column 10, :line 6978, :file "cljs/core.cljs"} ->ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1953, :column 4, :line 1953, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1953, :column 5, :line 1953, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive).", :tag ^{:end-column 15, :end-line 1950, :column 8, :line 1950, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1950, :column 15, :line 1950, :file "cljs/core.cljs"} rand ^{:arglists (^{:end-column 6, :end-line 8427, :column 4, :line 8427, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8428, :column 4, :line 8428, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8428, :column 5, :line 8428, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 8424, :column 7, :line 8424, :file "cljs/core.cljs"} {:arglists ([] ^number [^{:end-column 7, :end-line 8428, :column 5, :line 8428, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8427, :column 4, :line 8427, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8428, :column 4, :line 8428, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8428, :column 5, :line 8428, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 8424, :column 7, :line 8424, :file "cljs/core.cljs"} rand, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} second ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} second, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 349, :column 14, :line 349, :file "cljs/core.cljs"} IEditableCollection ^{:impls (cljs.core/PersistentHashSet cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 349, :column 14, :line 349, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 349, :column 14, :line 349, :file "cljs/core.cljs"} IEditableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 532, :column 20, :line 532, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 532, :column 21, :line 532, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 532, :column 26, :line 532, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} hash-combine ^{:arglists (^{:end-column 31, :end-line 532, :column 20, :line 532, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 532, :column 21, :line 532, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 532, :column 26, :line 532, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 26, :end-line 532, :column 21, :line 532, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 532, :column 26, :line 532, :file "cljs/core.cljs"} hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 532, :column 20, :line 532, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 532, :column 21, :line 532, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 532, :column 26, :line 532, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} hash-combine, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1764, :column 7, :line 1764, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1765, :column 9, :line 1765, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1765, :column 11, :line 1765, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1760, :column 8, :line 1760, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1760, :column 16, :line 1760, :file "cljs/core.cljs"} > ^{:arglists (^{:end-column 7, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1764, :column 7, :line 1764, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1765, :column 9, :line 1765, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1765, :column 11, :line 1765, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1760, :column 8, :line 1760, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1760, :column 16, :line 1760, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1764, :column 7, :line 1764, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1765, :column 11, :line 1765, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1764, :column 7, :line 1764, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1765, :column 9, :line 1765, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1765, :column 11, :line 1765, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1760, :column 8, :line 1760, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1760, :column 16, :line 1760, :file "cljs/core.cljs"} >, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -name ^{:arglists (^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7351, :column 4, :line 7351, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7351, :column 5, :line 7351, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7353, :column 4, :line 7353, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7353, :column 5, :line 7353, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7353, :column 10, :line 7353, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7346, :column 7, :line 7346, :file "cljs/core.cljs"} replace ^{:arglists (^{:end-column 10, :end-line 7351, :column 4, :line 7351, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7351, :column 5, :line 7351, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7353, :column 4, :line 7353, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7353, :column 5, :line 7353, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7353, :column 10, :line 7353, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7346, :column 7, :line 7346, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 7351, :column 5, :line 7351, :file "cljs/core.cljs"} smap] [^{:end-column 10, :end-line 7353, :column 5, :line 7353, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7353, :column 10, :line 7353, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7351, :column 4, :line 7351, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7351, :column 5, :line 7351, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7353, :column 4, :line 7353, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7353, :column 5, :line 7353, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7353, :column 10, :line 7353, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7346, :column 7, :line 7346, :file "cljs/core.cljs"} replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 4333, :column 18, :line 4333, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4333, :column 23, :line 4333, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4333, :column 25, :line 4333, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4333, :column 31, :line 4333, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4333, :column 45, :line 4333, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4333, :column 10, :line 4333, :file "cljs/core.cljs"} ->Subvec ^{:arglists ([^{:end-column 23, :end-line 4333, :column 18, :line 4333, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4333, :column 23, :line 4333, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4333, :column 25, :line 4333, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4333, :column 31, :line 4333, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4333, :column 45, :line 4333, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4333, :column 10, :line 4333, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 23, :end-line 4333, :column 18, :line 4333, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4333, :column 23, :line 4333, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4333, :column 25, :line 4333, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4333, :column 31, :line 4333, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4333, :column 45, :line 4333, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 4333, :column 18, :line 4333, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4333, :column 23, :line 4333, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4333, :column 25, :line 4333, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4333, :column 31, :line 4333, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4333, :column 45, :line 4333, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4333, :column 10, :line 4333, :file "cljs/core.cljs"} ->Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1375, :column 3, :line 1375, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1373, :column 8, :line 1373, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1373, :column 16, :line 1373, :file "cljs/core.cljs"} associative? ^{:arglists (^{:end-column 6, :end-line 1375, :column 3, :line 1375, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1373, :column 8, :line 1373, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1373, :column 16, :line 1373, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1375, :column 3, :line 1375, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1373, :column 8, :line 1373, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1373, :column 16, :line 1373, :file "cljs/core.cljs"} associative?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1906, :column 3, :line 1906, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1906, :column 4, :line 1906, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1904, :column 7, :line 1904, :file "cljs/core.cljs"} unchecked-int ^{:arglists (^{:end-column 6, :end-line 1906, :column 3, :line 1906, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1906, :column 4, :line 1906, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1904, :column 7, :line 1904, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1906, :column 4, :line 1906, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1906, :column 3, :line 1906, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1906, :column 4, :line 1906, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1904, :column 7, :line 1904, :file "cljs/core.cljs"} unchecked-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 1412, :column 15, :line 1412, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1412, :column 16, :line 1412, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1412, :column 7, :line 1412, :file "cljs/core.cljs"} js-keys ^{:arglists (^{:end-column 20, :end-line 1412, :column 15, :line 1412, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1412, :column 16, :line 1412, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1412, :column 7, :line 1412, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 20, :end-line 1412, :column 16, :line 1412, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 1412, :column 15, :line 1412, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1412, :column 16, :line 1412, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1412, :column 7, :line 1412, :file "cljs/core.cljs"} js-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4924, :column 10, :line 4924, :file "cljs/core.cljs"} ES6EntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4924, :column 10, :line 4924, :file "cljs/core.cljs"} ES6EntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 4924, :column 29, :line 4924, :file "cljs/core.cljs"} [^{:mutable true, :end-column 42, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 28, :end-line 2368, :column 25, :line 2368, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2368, :column 26, :line 2368, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2368, :column 8, :line 2368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2368, :column 16, :line 2368, :file "cljs/core.cljs"} keyword? ^{:arglists (^{:end-column 28, :end-line 2368, :column 25, :line 2368, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2368, :column 26, :line 2368, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2368, :column 8, :line 2368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2368, :column 16, :line 2368, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 28, :end-line 2368, :column 26, :line 2368, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 2368, :column 25, :line 2368, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2368, :column 26, :line 2368, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2368, :column 8, :line 2368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2368, :column 16, :line 2368, :file "cljs/core.cljs"} keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2932, :column 18, :line 2932, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2932, :column 19, :line 2932, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2932, :column 7, :line 2932, :file "cljs/core.cljs"} array-iter ^{:arglists (^{:end-column 21, :end-line 2932, :column 18, :line 2932, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2932, :column 19, :line 2932, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2932, :column 7, :line 2932, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayIter [^{:end-column 21, :end-line 2932, :column 19, :line 2932, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2932, :column 18, :line 2932, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2932, :column 19, :line 2932, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2932, :column 7, :line 2932, :file "cljs/core.cljs"} array-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8240, :column 3, :line 8240, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8240, :column 4, :line 8240, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8238, :column 7, :line 8238, :file "cljs/core.cljs"} force ^{:arglists (^{:end-column 6, :end-line 8240, :column 3, :line 8240, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8240, :column 4, :line 8240, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8238, :column 7, :line 8238, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8240, :column 4, :line 8240, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8240, :column 3, :line 8240, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8240, :column 4, :line 8240, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8238, :column 7, :line 8238, :file "cljs/core.cljs"} force, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8445, :column 3, :line 8445, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8445, :column 4, :line 8445, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8445, :column 6, :line 8445, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8441, :column 7, :line 8441, :file "cljs/core.cljs"} group-by ^{:arglists (^{:end-column 11, :end-line 8445, :column 3, :line 8445, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8445, :column 4, :line 8445, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8445, :column 6, :line 8445, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8441, :column 7, :line 8441, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 6, :end-line 8445, :column 4, :line 8445, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8445, :column 6, :line 8445, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8445, :column 3, :line 8445, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8445, :column 4, :line 8445, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8445, :column 6, :line 8445, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8441, :column 7, :line 8441, :file "cljs/core.cljs"} group-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} -rseq ^{:arglists (^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} -rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8029, :column 3, :line 8029, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8029, :column 4, :line 8029, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8029, :column 6, :line 8029, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 8027, :column 7, :line 8027, :file "cljs/core.cljs"} prn ^{:arglists (^{:end-column 11, :end-line 8029, :column 3, :line 8029, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8029, :column 4, :line 8029, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8029, :column 6, :line 8029, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 8027, :column 7, :line 8027, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 8029, :column 6, :line 8029, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8029, :column 3, :line 8029, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8029, :column 4, :line 8029, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8029, :column 6, :line 8029, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 8027, :column 7, :line 8027, :file "cljs/core.cljs"} prn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 4474, :column 20, :line 4474, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4474, :column 21, :line 4474, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4474, :column 24, :line 4474, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4474, :column 30, :line 4474, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4474, :column 8, :line 4474, :file "cljs/core.cljs"} tv-pop-tail ^{:arglists (^{:end-column 35, :end-line 4474, :column 20, :line 4474, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4474, :column 21, :line 4474, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4474, :column 24, :line 4474, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4474, :column 30, :line 4474, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4474, :column 8, :line 4474, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 4474, :column 21, :line 4474, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4474, :column 24, :line 4474, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4474, :column 30, :line 4474, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 4474, :column 20, :line 4474, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4474, :column 21, :line 4474, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4474, :column 24, :line 4474, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4474, :column 30, :line 4474, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4474, :column 8, :line 4474, :file "cljs/core.cljs"} tv-pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 3306, :column 16, :line 3306, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3306, :column 27, :line 3306, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3306, :column 37, :line 3306, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3306, :column 10, :line 3306, :file "cljs/core.cljs"} ->Atom ^{:arglists ([^{:end-column 22, :end-line 3306, :column 16, :line 3306, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3306, :column 27, :line 3306, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3306, :column 37, :line 3306, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3306, :column 10, :line 3306, :file "cljs/core.cljs"} {:arglists (^cljs.core/Atom [^{:end-column 22, :end-line 3306, :column 16, :line 3306, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3306, :column 27, :line 3306, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3306, :column 37, :line 3306, :file "cljs/core.cljs"} watches]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 3306, :column 16, :line 3306, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3306, :column 27, :line 3306, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3306, :column 37, :line 3306, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3306, :column 10, :line 3306, :file "cljs/core.cljs"} ->Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 1221, :column 10, :line 1221, :file "cljs/core.cljs"} PersistentHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5961, :column 10, :line 5961, :file "cljs/core.cljs"} PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 86, :end-line 5961, :column 28, :line 5961, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5961, :column 29, :line 5961, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5961, :column 34, :line 5961, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5961, :column 38, :line 5961, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5961, :column 44, :line 5961, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5961, :column 52, :line 5961, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5961, :column 61, :line 5961, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5961, :column 79, :line 5961, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} unchecked-multiply ^{:arglists (^{:end-column 6, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} unchecked-multiply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} ArrayNodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 5908, :column 23, :line 5908, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5908, :column 24, :line 5908, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5908, :column 35, :line 5908, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5908, :column 37, :line 5908, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5908, :column 49, :line 5908, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3163, :column 8, :line 3163, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3163, :column 16, :line 3163, :file "cljs/core.cljs"} even? ^{:arglists (^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3163, :column 8, :line 3163, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3163, :column 16, :line 3163, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3163, :column 8, :line 3163, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3163, :column 16, :line 3163, :file "cljs/core.cljs"} even?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1836, :column 21, :line 1836, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1836, :column 22, :line 1836, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1836, :column 7, :line 1836, :file "cljs/core.cljs"} unchecked-dec ^{:arglists (^{:end-column 24, :end-line 1836, :column 21, :line 1836, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1836, :column 22, :line 1836, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1836, :column 7, :line 1836, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1836, :column 22, :line 1836, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1836, :column 21, :line 1836, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1836, :column 22, :line 1836, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1836, :column 7, :line 1836, :file "cljs/core.cljs"} unchecked-dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 52, :end-line 5722, :column 39, :line 5722, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5722, :column 40, :line 5722, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5722, :column 44, :line 5722, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5722, :column 48, :line 5722, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5722, :column 8, :line 5722, :file "cljs/core.cljs"} hash-collision-node-find-index ^{:arglists (^{:end-column 52, :end-line 5722, :column 39, :line 5722, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5722, :column 40, :line 5722, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5722, :column 44, :line 5722, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5722, :column 48, :line 5722, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5722, :column 8, :line 5722, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 44, :end-line 5722, :column 40, :line 5722, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5722, :column 44, :line 5722, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5722, :column 48, :line 5722, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 52, :end-line 5722, :column 39, :line 5722, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5722, :column 40, :line 5722, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5722, :column 44, :line 5722, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5722, :column 48, :line 5722, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5722, :column 8, :line 5722, :file "cljs/core.cljs"} hash-collision-node-find-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5079, :column 32, :line 5079, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5079, :column 33, :line 5079, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5079, :column 37, :line 5079, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5079, :column 39, :line 5079, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 5079, :column 7, :line 5079, :file "cljs/core.cljs"} persistent-array-map-seq ^{:arglists (^{:end-column 45, :end-line 5079, :column 32, :line 5079, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5079, :column 33, :line 5079, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5079, :column 37, :line 5079, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5079, :column 39, :line 5079, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 5079, :column 7, :line 5079, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 5079, :column 33, :line 5079, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5079, :column 37, :line 5079, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5079, :column 39, :line 5079, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5079, :column 32, :line 5079, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5079, :column 33, :line 5079, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5079, :column 37, :line 5079, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5079, :column 39, :line 5079, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 5079, :column 7, :line 5079, :file "cljs/core.cljs"} persistent-array-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 7515, :column 10, :line 7515, :file "cljs/core.cljs"} RangeIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 7515, :column 10, :line 7515, :file "cljs/core.cljs"} RangeIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 7515, :column 24, :line 7515, :file "cljs/core.cljs"} [^{:mutable true, :end-column 37, :end-line 7515, :column 35, :line 7515, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 7515, :column 37, :line 7515, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 7515, :column 41, :line 7515, :file "cljs/core.cljs"} step], :protocols #{Object}}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 3002, :column 10, :line 3002, :file "cljs/core.cljs"} MultiStepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 3002, :column 10, :line 3002, :file "cljs/core.cljs"} MultiStepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 3002, :column 23, :line 3002, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 3002, :column 24, :line 3002, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 3002, :column 30, :line 3002, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 3002, :column 36, :line 3002, :file "cljs/core.cljs"} nexts], :protocols #{Object}}, ^{:arglists (^{:end-column 17, :end-line 2664, :column 4, :line 2664, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2664, :column 5, :line 2664, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2668, :column 4, :line 2668, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2668, :column 5, :line 2668, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2668, :column 10, :line 2668, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} double-array ^{:arglists (^{:end-column 17, :end-line 2664, :column 4, :line 2664, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2664, :column 5, :line 2664, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2668, :column 4, :line 2668, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2668, :column 5, :line 2668, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2668, :column 10, :line 2668, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2664, :column 5, :line 2664, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 10, :end-line 2668, :column 5, :line 2668, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2668, :column 10, :line 2668, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2664, :column 4, :line 2664, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2664, :column 5, :line 2664, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2668, :column 4, :line 2668, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2668, :column 5, :line 2668, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2668, :column 10, :line 2668, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} double-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 2197, :column 21, :line 2197, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} ->EmptyList ^{:arglists ([^{:end-column 26, :end-line 2197, :column 21, :line 2197, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} {:arglists (^cljs.core/EmptyList [^{:end-column 26, :end-line 2197, :column 21, :line 2197, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 2197, :column 21, :line 2197, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} ->EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 955, :column 20, :line 955, :file "cljs/core.cljs"} seq-reduce ^{:arglists (^{:end-column 12, :end-line 1600, :column 4, :line 1600, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1600, :column 5, :line 1600, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1600, :column 7, :line 1600, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1604, :column 5, :line 1604, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1604, :column 7, :line 1604, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1604, :column 11, :line 1604, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1599, :column 8, :line 1599, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1600, :column 5, :line 1600, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1600, :column 7, :line 1600, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1604, :column 5, :line 1604, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1604, :column 7, :line 1604, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1604, :column 11, :line 1604, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1600, :column 4, :line 1600, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1600, :column 5, :line 1600, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1600, :column 7, :line 1600, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1604, :column 5, :line 1604, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1604, :column 7, :line 1604, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1604, :column 11, :line 1604, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1599, :column 8, :line 1599, :file "cljs/core.cljs"} seq-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2712, :column 3, :line 2712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2712, :column 4, :line 2712, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2711, :column 7, :line 2711, :file "cljs/core.cljs"} spread ^{:arglists (^{:end-column 12, :end-line 2712, :column 3, :line 2712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2712, :column 4, :line 2712, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2711, :column 7, :line 2711, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 2712, :column 4, :line 2712, :file "cljs/core.cljs"} arglist]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2712, :column 3, :line 2712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2712, :column 4, :line 2712, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2711, :column 7, :line 2711, :file "cljs/core.cljs"} spread, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6266, :column 21, :line 6266, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6266, :column 22, :line 6266, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6266, :column 26, :line 6266, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6266, :column 30, :line 6266, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6266, :column 34, :line 6266, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6266, :column 8, :line 6266, :file "cljs/core.cljs"} balance-left ^{:arglists (^{:end-column 40, :end-line 6266, :column 21, :line 6266, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6266, :column 22, :line 6266, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6266, :column 26, :line 6266, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6266, :column 30, :line 6266, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6266, :column 34, :line 6266, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6266, :column 8, :line 6266, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 6266, :column 22, :line 6266, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6266, :column 26, :line 6266, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6266, :column 30, :line 6266, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6266, :column 34, :line 6266, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6266, :column 21, :line 6266, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6266, :column 22, :line 6266, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6266, :column 26, :line 6266, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6266, :column 30, :line 6266, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6266, :column 34, :line 6266, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6266, :column 8, :line 6266, :file "cljs/core.cljs"} balance-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 2254, :column 17, :line 2254, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2254, :column 18, :line 2254, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2254, :column 8, :line 2254, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2254, :column 12, :line 2254, :file "cljs/core.cljs"} rseq ^{:arglists (^{:end-column 23, :end-line 2254, :column 17, :line 2254, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2254, :column 18, :line 2254, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2254, :column 8, :line 2254, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2254, :column 12, :line 2254, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj [^{:end-column 23, :end-line 2254, :column 18, :line 2254, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2254, :column 17, :line 2254, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2254, :column 18, :line 2254, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2254, :column 8, :line 2254, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2254, :column 12, :line 2254, :file "cljs/core.cljs"} rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8893, :column 3, :line 8893, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8893, :column 4, :line 8893, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8888, :column 7, :line 8888, :file "cljs/core.cljs"} ex-cause ^{:arglists (^{:end-column 7, :end-line 8893, :column 3, :line 8893, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8893, :column 4, :line 8893, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8888, :column 7, :line 8888, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8893, :column 4, :line 8893, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8893, :column 3, :line 8893, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8893, :column 4, :line 8893, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8888, :column 7, :line 8888, :file "cljs/core.cljs"} ex-cause, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 21, :end-line 388, :column 14, :line 388, :file "cljs/core.cljs"} IReset ^{:protocol-info {:methods {^{:end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 21, :end-line 388, :column 14, :line 388, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 21, :end-line 388, :column 14, :line 388, :file "cljs/core.cljs"} IReset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 35, :end-line 237, :column 14, :line 237, :file "cljs/core.cljs"} IEmptyableCollection ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 35, :end-line 237, :column 14, :line 237, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 35, :end-line 237, :column 14, :line 237, :file "cljs/core.cljs"} IEmptyableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 4997, :column 27, :line 4997, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4997, :column 28, :line 4997, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4997, :column 30, :line 4997, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4997, :column 8, :line 4997, :file "cljs/core.cljs"} array-map-index-of ^{:arglists (^{:end-column 32, :end-line 4997, :column 27, :line 4997, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4997, :column 28, :line 4997, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4997, :column 30, :line 4997, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4997, :column 8, :line 4997, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 4997, :column 28, :line 4997, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4997, :column 30, :line 4997, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 4997, :column 27, :line 4997, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4997, :column 28, :line 4997, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4997, :column 30, :line 4997, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4997, :column 8, :line 4997, :file "cljs/core.cljs"} array-map-index-of, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8884, :column 3, :line 8884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8884, :column 4, :line 8884, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8880, :column 7, :line 8880, :file "cljs/core.cljs"} ex-message ^{:arglists (^{:end-column 7, :end-line 8884, :column 3, :line 8884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8884, :column 4, :line 8884, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8880, :column 7, :line 8880, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8884, :column 4, :line 8884, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8884, :column 3, :line 8884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8884, :column 4, :line 8884, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8880, :column 7, :line 8880, :file "cljs/core.cljs"} ex-message, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7847, :column 20, :line 7847, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7847, :column 21, :line 7847, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7847, :column 7, :line 7847, :file "cljs/core.cljs"} string-print ^{:arglists (^{:end-column 23, :end-line 7847, :column 20, :line 7847, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7847, :column 21, :line 7847, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7847, :column 7, :line 7847, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 23, :end-line 7847, :column 21, :line 7847, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7847, :column 20, :line 7847, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7847, :column 21, :line 7847, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7847, :column 7, :line 7847, :file "cljs/core.cljs"} string-print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1813, :column 21, :line 1813, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1813, :column 22, :line 1813, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1813, :column 8, :line 1813, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1813, :column 15, :line 1813, :file "cljs/core.cljs"} float ^{:arglists (^{:end-column 24, :end-line 1813, :column 21, :line 1813, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1813, :column 22, :line 1813, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1813, :column 8, :line 1813, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1813, :column 15, :line 1813, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1813, :column 22, :line 1813, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1813, :column 21, :line 1813, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1813, :column 22, :line 1813, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1813, :column 8, :line 1813, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1813, :column 15, :line 1813, :file "cljs/core.cljs"} float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8218, :column 1, :line 8218, :file "cljs/core.cljs"} fixture2 ^{:end-column 17, :end-line 8218, :column 1, :line 8218, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8218, :column 1, :line 8218, :file "cljs/core.cljs"} fixture2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 22, :end-line 317, :column 14, :line 317, :file "cljs/core.cljs"} IRecord ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 22, :end-line 317, :column 14, :line 317, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 22, :end-line 317, :column 14, :line 317, :file "cljs/core.cljs"} IRecord, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 3352, :column 10, :line 3352, :file "cljs/core.cljs"} pr-str ^{:arglists (^{:end-column 11, :end-line 7987, :column 3, :line 7987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7987, :column 4, :line 7987, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7987, :column 6, :line 7987, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7985, :column 7, :line 7985, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7987, :column 6, :line 7987, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7987, :column 3, :line 7987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7987, :column 4, :line 7987, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7987, :column 6, :line 7987, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7985, :column 7, :line 7985, :file "cljs/core.cljs"} pr-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 3968, :column 32, :line 3968, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3968, :column 33, :line 3968, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3968, :column 8, :line 3968, :file "cljs/core.cljs"} first-array-for-longvec ^{:arglists (^{:end-column 36, :end-line 3968, :column 32, :line 3968, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3968, :column 33, :line 3968, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3968, :column 8, :line 3968, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 3968, :column 33, :line 3968, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 3968, :column 32, :line 3968, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3968, :column 33, :line 3968, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3968, :column 8, :line 3968, :file "cljs/core.cljs"} first-array-for-longvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 4946, :column 32, :line 4946, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 4946, :column 33, :line 4946, :file "cljs/core.cljs"} coll]), :end-column 32, :end-line 4946, :column 7, :line 4946, :file "cljs/core.cljs"} es6-set-entries-iterator ^{:arglists (^{:end-column 38, :end-line 4946, :column 32, :line 4946, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 4946, :column 33, :line 4946, :file "cljs/core.cljs"} coll]), :end-column 32, :end-line 4946, :column 7, :line 4946, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6SetEntriesIterator [^{:end-column 38, :end-line 4946, :column 33, :line 4946, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 4946, :column 32, :line 4946, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 4946, :column 33, :line 4946, :file "cljs/core.cljs"} coll]), :end-column 32, :end-line 4946, :column 7, :line 4946, :file "cljs/core.cljs"} es6-set-entries-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2731, :column 5, :line 2731, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2731, :column 7, :line 2731, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2731, :column 9, :line 2731, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2731, :column 11, :line 2731, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2719, :column 7, :line 2719, :file "cljs/core.cljs"} concat ^{:arglists (^{:end-column 6, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2731, :column 5, :line 2731, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2731, :column 7, :line 2731, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2731, :column 9, :line 2731, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2731, :column 11, :line 2731, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2719, :column 7, :line 2719, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} y] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2731, :column 5, :line 2731, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2731, :column 7, :line 2731, :file "cljs/core.cljs"} y & ^{:end-column 14, :end-line 2731, :column 11, :line 2731, :file "cljs/core.cljs"} zs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2731, :column 5, :line 2731, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2731, :column 7, :line 2731, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2731, :column 9, :line 2731, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2731, :column 11, :line 2731, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2719, :column 7, :line 2719, :file "cljs/core.cljs"} concat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} -methods ^{:arglists (^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} -methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 32, :end-line 287, :column 14, :line 287, :file "cljs/core.cljs"} IDerefWithTimeout ^{:protocol-info {:methods {^{:end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 32, :end-line 287, :column 14, :line 287, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 32, :end-line 287, :column 14, :line 287, :file "cljs/core.cljs"} IDerefWithTimeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 601, :column 8, :line 601, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 596, :column 7, :line 596, :file "cljs/core.cljs"} symbol ^{:arglists (^{:end-column 10, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 601, :column 8, :line 601, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 596, :column 7, :line 596, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} name] ^cljs.core/Symbol [^{:end-column 8, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 601, :column 8, :line 601, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 601, :column 8, :line 601, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 596, :column 7, :line 596, :file "cljs/core.cljs"} symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2615, :column 3, :line 2615, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2615, :column 4, :line 2615, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2612, :column 7, :line 2612, :file "cljs/core.cljs"} to-array-2d ^{:arglists (^{:end-column 9, :end-line 2615, :column 3, :line 2615, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2615, :column 4, :line 2615, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2612, :column 7, :line 2612, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 9, :end-line 2615, :column 4, :line 2615, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2615, :column 3, :line 2615, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2615, :column 4, :line 2615, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2612, :column 7, :line 2612, :file "cljs/core.cljs"} to-array-2d, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4333, :column 10, :line 4333, :file "cljs/core.cljs"} Subvec {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4333, :column 10, :line 4333, :file "cljs/core.cljs"} Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 4333, :column 17, :line 4333, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4333, :column 18, :line 4333, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4333, :column 23, :line 4333, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4333, :column 25, :line 4333, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4333, :column 31, :line 4333, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4333, :column 45, :line 4333, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8857, :column 10, :line 8857, :file "cljs/core.cljs"} ExceptionInfo {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8857, :column 10, :line 8857, :file "cljs/core.cljs"} ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 44, :end-line 8857, :column 24, :line 8857, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 8857, :column 25, :line 8857, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8857, :column 33, :line 8857, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8857, :column 38, :line 8857, :file "cljs/core.cljs"} cause], :protocols #{}}, ^{:declared true, :end-column 14, :end-line 1875, :column 10, :line 1875, :file "cljs/core.cljs"} mod ^{:arglists (^{:end-column 8, :end-line 1935, :column 3, :line 1935, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1935, :column 4, :line 1935, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1935, :column 6, :line 1935, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1935, :column 4, :line 1935, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1935, :column 6, :line 1935, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1935, :column 3, :line 1935, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1935, :column 4, :line 1935, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1935, :column 6, :line 1935, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 19, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} ISet ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentHashSet), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 19, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 19, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} ISet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1335, :column 3, :line 1335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1335, :column 4, :line 1335, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1331, :column 7, :line 1331, :file "cljs/core.cljs"} pop ^{:arglists (^{:end-column 9, :end-line 1335, :column 3, :line 1335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1335, :column 4, :line 1335, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1331, :column 7, :line 1331, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1335, :column 4, :line 1335, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1335, :column 3, :line 1335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1335, :column 4, :line 1335, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1331, :column 7, :line 1331, :file "cljs/core.cljs"} pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 23, :end-line 341, :column 14, :line 341, :file "cljs/core.cljs"} IPending ^{:impls (cljs.core/Delay), :protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 23, :end-line 341, :column 14, :line 341, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 23, :end-line 341, :column 14, :line 341, :file "cljs/core.cljs"} IPending, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -entry-key ^{:arglists (^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -entry-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 4002, :column 17, :line 4002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4002, :column 18, :line 4002, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4002, :column 21, :line 4002, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 4002, :column 27, :line 4002, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 4002, :column 8, :line 4002, :file "cljs/core.cljs"} pop-tail ^{:arglists (^{:end-column 32, :end-line 4002, :column 17, :line 4002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4002, :column 18, :line 4002, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4002, :column 21, :line 4002, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 4002, :column 27, :line 4002, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 4002, :column 8, :line 4002, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 4002, :column 18, :line 4002, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4002, :column 21, :line 4002, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 4002, :column 27, :line 4002, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 4002, :column 17, :line 4002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4002, :column 18, :line 4002, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4002, :column 21, :line 4002, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 4002, :column 27, :line 4002, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 4002, :column 8, :line 4002, :file "cljs/core.cljs"} pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2796, :column 4, :line 2796, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2796, :column 5, :line 2796, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2796, :column 11, :line 2796, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2798, :column 11, :line 2798, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2798, :column 15, :line 2798, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2798, :column 17, :line 2798, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2794, :column 7, :line 2794, :file "cljs/core.cljs"} dissoc! ^{:arglists (^{:end-column 15, :end-line 2796, :column 4, :line 2796, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2796, :column 5, :line 2796, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2796, :column 11, :line 2796, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2798, :column 11, :line 2798, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2798, :column 15, :line 2798, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2798, :column 17, :line 2798, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2794, :column 7, :line 2794, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2796, :column 5, :line 2796, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2796, :column 11, :line 2796, :file "cljs/core.cljs"} key] ^^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2798, :column 11, :line 2798, :file "cljs/core.cljs"} key & ^{:end-column 20, :end-line 2798, :column 17, :line 2798, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2796, :column 4, :line 2796, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2796, :column 5, :line 2796, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2796, :column 11, :line 2796, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2798, :column 11, :line 2798, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2798, :column 15, :line 2798, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2798, :column 17, :line 2798, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2794, :column 7, :line 2794, :file "cljs/core.cljs"} dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7700, :column 4, :line 7700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7700, :column 5, :line 7700, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7700, :column 7, :line 7700, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7705, :column 4, :line 7705, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7705, :column 5, :line 7705, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7705, :column 7, :line 7705, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7705, :column 12, :line 7705, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7697, :column 7, :line 7697, :file "cljs/core.cljs"} reductions ^{:arglists (^{:end-column 12, :end-line 7700, :column 4, :line 7700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7700, :column 5, :line 7700, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7700, :column 7, :line 7700, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7705, :column 4, :line 7705, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7705, :column 5, :line 7705, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7705, :column 7, :line 7705, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7705, :column 12, :line 7705, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7697, :column 7, :line 7697, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 7700, :column 5, :line 7700, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7700, :column 7, :line 7700, :file "cljs/core.cljs"} coll] ^cljs.core/Cons [^{:end-column 7, :end-line 7705, :column 5, :line 7705, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7705, :column 7, :line 7705, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7705, :column 12, :line 7705, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7700, :column 4, :line 7700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7700, :column 5, :line 7700, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7700, :column 7, :line 7700, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7705, :column 4, :line 7705, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7705, :column 5, :line 7705, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7705, :column 7, :line 7705, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7705, :column 12, :line 7705, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7697, :column 7, :line 7697, :file "cljs/core.cljs"} reductions, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 863, :column 3, :line 863, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 863, :column 4, :line 863, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 861, :column 8, :line 861, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 861, :column 16, :line 861, :file "cljs/core.cljs"} indexed? ^{:arglists (^{:end-column 6, :end-line 863, :column 3, :line 863, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 863, :column 4, :line 863, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 861, :column 8, :line 861, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 861, :column 16, :line 861, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 863, :column 4, :line 863, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 863, :column 3, :line 863, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 863, :column 4, :line 863, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 861, :column 8, :line 861, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 861, :column 16, :line 861, :file "cljs/core.cljs"} indexed?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1717, :column 4, :line 1717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1717, :column 5, :line 1717, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1718, :column 4, :line 1718, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1718, :column 5, :line 1718, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1718, :column 9, :line 1718, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1718, :column 11, :line 1718, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1713, :column 8, :line 1713, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1713, :column 15, :line 1713, :file "cljs/core.cljs"} - ^{:arglists (^{:end-column 7, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1717, :column 4, :line 1717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1717, :column 5, :line 1717, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1718, :column 4, :line 1718, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1718, :column 5, :line 1718, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1718, :column 9, :line 1718, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1718, :column 11, :line 1718, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1713, :column 8, :line 1713, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1713, :column 15, :line 1713, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1717, :column 5, :line 1717, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1718, :column 5, :line 1718, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1718, :column 11, :line 1718, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1717, :column 4, :line 1717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1717, :column 5, :line 1717, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1718, :column 4, :line 1718, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1718, :column 5, :line 1718, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1718, :column 9, :line 1718, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1718, :column 11, :line 1718, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1713, :column 8, :line 1713, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1713, :column 15, :line 1713, :file "cljs/core.cljs"} -, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} -equiv ^{:arglists (^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} -equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 37, :end-line 7515, :column 35, :line 7515, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 7515, :column 37, :line 7515, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 7515, :column 41, :line 7515, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 7515, :column 10, :line 7515, :file "cljs/core.cljs"} ->RangeIterator ^{:arglists ([^{:mutable true, :end-column 37, :end-line 7515, :column 35, :line 7515, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 7515, :column 37, :line 7515, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 7515, :column 41, :line 7515, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 7515, :column 10, :line 7515, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangeIterator [^{:mutable true, :end-column 37, :end-line 7515, :column 35, :line 7515, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 7515, :column 37, :line 7515, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 7515, :column 41, :line 7515, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 37, :end-line 7515, :column 35, :line 7515, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 7515, :column 37, :line 7515, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 7515, :column 41, :line 7515, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 7515, :column 10, :line 7515, :file "cljs/core.cljs"} ->RangeIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 5625, :column 21, :line 5625, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5625, :column 36, :line 5625, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5625, :column 50, :line 5625, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 5625, :column 10, :line 5625, :file "cljs/core.cljs"} ->ArrayNode ^{:arglists ([^{:end-column 26, :end-line 5625, :column 21, :line 5625, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5625, :column 36, :line 5625, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5625, :column 50, :line 5625, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 5625, :column 10, :line 5625, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayNode [^{:end-column 26, :end-line 5625, :column 21, :line 5625, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5625, :column 36, :line 5625, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5625, :column 50, :line 5625, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 5625, :column 21, :line 5625, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5625, :column 36, :line 5625, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5625, :column 50, :line 5625, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 5625, :column 10, :line 5625, :file "cljs/core.cljs"} ->ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 2786, :column 4, :line 2786, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2786, :column 5, :line 2786, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2786, :column 11, :line 2786, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2786, :column 15, :line 2786, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2788, :column 4, :line 2788, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2788, :column 5, :line 2788, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2788, :column 11, :line 2788, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2788, :column 15, :line 2788, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2788, :column 19, :line 2788, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2788, :column 21, :line 2788, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} assoc! ^{:arglists (^{:end-column 19, :end-line 2786, :column 4, :line 2786, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2786, :column 5, :line 2786, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2786, :column 11, :line 2786, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2786, :column 15, :line 2786, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2788, :column 4, :line 2788, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2788, :column 5, :line 2788, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2788, :column 11, :line 2788, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2788, :column 15, :line 2788, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2788, :column 19, :line 2788, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2788, :column 21, :line 2788, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2786, :column 5, :line 2786, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2786, :column 11, :line 2786, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2786, :column 15, :line 2786, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2788, :column 5, :line 2788, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2788, :column 11, :line 2788, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2788, :column 15, :line 2788, :file "cljs/core.cljs"} val & ^{:end-column 25, :end-line 2788, :column 21, :line 2788, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 2786, :column 4, :line 2786, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2786, :column 5, :line 2786, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2786, :column 11, :line 2786, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2786, :column 15, :line 2786, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2788, :column 4, :line 2788, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2788, :column 5, :line 2788, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2788, :column 11, :line 2788, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2788, :column 15, :line 2788, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2788, :column 19, :line 2788, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2788, :column 21, :line 2788, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7331, :column 4, :line 7331, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7332, :column 4, :line 7332, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7332, :column 5, :line 7332, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7330, :column 7, :line 7330, :file "cljs/core.cljs"} hash-set ^{:arglists (^{:end-column 6, :end-line 7331, :column 4, :line 7331, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7332, :column 4, :line 7332, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7332, :column 5, :line 7332, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7330, :column 7, :line 7330, :file "cljs/core.cljs"} {:arglists (^cljs.core/ISet [] [& ^{:end-column 12, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7331, :column 4, :line 7331, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7332, :column 4, :line 7332, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7332, :column 5, :line 7332, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7330, :column 7, :line 7330, :file "cljs/core.cljs"} hash-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1672, :column 4, :line 1672, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1672, :column 5, :line 1672, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1672, :column 7, :line 1672, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1672, :column 12, :line 1672, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} reduce-kv ^{:arglists (^{:end-column 17, :end-line 1672, :column 4, :line 1672, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1672, :column 5, :line 1672, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1672, :column 7, :line 1672, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1672, :column 12, :line 1672, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1672, :column 5, :line 1672, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1672, :column 7, :line 1672, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1672, :column 12, :line 1672, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1672, :column 4, :line 1672, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1672, :column 5, :line 1672, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1672, :column 7, :line 1672, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1672, :column 12, :line 1672, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} reduce-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 3357, :column 3, :line 3357, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3357, :column 4, :line 3357, :file "cljs/core.cljs"} a ^{:end-column 16, :end-line 3357, :column 6, :line 3357, :file "cljs/core.cljs"} new-value]), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", :end-column 14, :end-line 3354, :column 7, :line 3354, :file "cljs/core.cljs"} reset! ^{:declared true, :end-column 56, :end-line 5353, :column 49, :line 5353, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 56, :end-line 5353, :column 49, :line 5353, :file "cljs/core.cljs"} reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 2078, :column 14, :line 2078, :file "cljs/core.cljs"} name ^{:arglists (^{:end-column 6, :end-line 7385, :column 3, :line 7385, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7385, :column 4, :line 7385, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 7383, :column 7, :line 7383, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7385, :column 4, :line 7385, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7385, :column 3, :line 7385, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7385, :column 4, :line 7385, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 7383, :column 7, :line 7383, :file "cljs/core.cljs"} name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 6469, :column 19, :line 6469, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6469, :column 23, :line 6469, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6469, :column 27, :line 6469, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6469, :column 32, :line 6469, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6469, :column 48, :line 6469, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 6469, :column 10, :line 6469, :file "cljs/core.cljs"} ->RedNode ^{:arglists ([^{:end-column 23, :end-line 6469, :column 19, :line 6469, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6469, :column 23, :line 6469, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6469, :column 27, :line 6469, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6469, :column 32, :line 6469, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6469, :column 48, :line 6469, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 6469, :column 10, :line 6469, :file "cljs/core.cljs"} {:arglists (^cljs.core/RedNode [^{:end-column 23, :end-line 6469, :column 19, :line 6469, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6469, :column 23, :line 6469, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6469, :column 27, :line 6469, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6469, :column 32, :line 6469, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6469, :column 48, :line 6469, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 6469, :column 19, :line 6469, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6469, :column 23, :line 6469, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6469, :column 27, :line 6469, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6469, :column 32, :line 6469, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6469, :column 48, :line 6469, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 6469, :column 10, :line 6469, :file "cljs/core.cljs"} ->RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3976, :column 28, :line 3976, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3976, :column 29, :line 3976, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3976, :column 32, :line 3976, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3976, :column 8, :line 3976, :file "cljs/core.cljs"} unchecked-array-for ^{:arglists (^{:end-column 34, :end-line 3976, :column 28, :line 3976, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3976, :column 29, :line 3976, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3976, :column 32, :line 3976, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3976, :column 8, :line 3976, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 3976, :column 29, :line 3976, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3976, :column 32, :line 3976, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3976, :column 28, :line 3976, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3976, :column 29, :line 3976, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3976, :column 32, :line 3976, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3976, :column 8, :line 3976, :file "cljs/core.cljs"} unchecked-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} Fn ^{:impls (cljs.core/MetaFn ^{:end-column 23, :end-line 754, :column 14, :line 754, :file "cljs/core.cljs"} function), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} Fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} ffirst ^{:arglists (^{:end-column 9, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} ffirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7336, :column 7, :line 7336, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7334, :column 7, :line 7334, :file "cljs/core.cljs"} sorted-set ^{:arglists (^{:end-column 12, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7336, :column 7, :line 7336, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7334, :column 7, :line 7334, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 12, :end-line 7336, :column 7, :line 7336, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7336, :column 7, :line 7336, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7334, :column 7, :line 7334, :file "cljs/core.cljs"} sorted-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7977, :column 3, :line 7977, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7977, :column 4, :line 7977, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7977, :column 9, :line 7977, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7974, :column 8, :line 7974, :file "cljs/core.cljs"} pr-with-opts ^{:arglists (^{:end-column 14, :end-line 7977, :column 3, :line 7977, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7977, :column 4, :line 7977, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7977, :column 9, :line 7977, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7974, :column 8, :line 7974, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 7977, :column 4, :line 7977, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7977, :column 9, :line 7977, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7977, :column 3, :line 7977, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7977, :column 4, :line 7977, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7977, :column 9, :line 7977, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7974, :column 8, :line 7974, :file "cljs/core.cljs"} pr-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6717, :column 10, :line 6717, :file "cljs/core.cljs"} PersistentTreeMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6717, :column 10, :line 6717, :file "cljs/core.cljs"} PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 6717, :column 28, :line 6717, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6717, :column 29, :line 6717, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6717, :column 34, :line 6717, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6717, :column 39, :line 6717, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6717, :column 43, :line 6717, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6717, :column 58, :line 6717, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists ([^{:end-column 34, :end-line 6717, :column 29, :line 6717, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6717, :column 34, :line 6717, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6717, :column 39, :line 6717, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6717, :column 43, :line 6717, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6717, :column 58, :line 6717, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6717, :column 10, :line 6717, :file "cljs/core.cljs"} ->PersistentTreeMap ^{:arglists ([^{:end-column 34, :end-line 6717, :column 29, :line 6717, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6717, :column 34, :line 6717, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6717, :column 39, :line 6717, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6717, :column 43, :line 6717, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6717, :column 58, :line 6717, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6717, :column 10, :line 6717, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 34, :end-line 6717, :column 29, :line 6717, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6717, :column 34, :line 6717, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6717, :column 39, :line 6717, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6717, :column 43, :line 6717, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6717, :column 58, :line 6717, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 6717, :column 29, :line 6717, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6717, :column 34, :line 6717, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6717, :column 39, :line 6717, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6717, :column 43, :line 6717, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6717, :column 58, :line 6717, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6717, :column 10, :line 6717, :file "cljs/core.cljs"} ->PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 825, :column 4, :line 825, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 825, :column 5, :line 825, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 825, :column 9, :line 825, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 836, :column 4, :line 836, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 836, :column 5, :line 836, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 836, :column 9, :line 836, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 836, :column 11, :line 836, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 845, :column 9, :line 845, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 845, :column 11, :line 845, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 845, :column 15, :line 845, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 824, :column 8, :line 824, :file "cljs/core.cljs"} array-reduce ^{:arglists (^{:end-column 11, :end-line 825, :column 4, :line 825, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 825, :column 5, :line 825, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 825, :column 9, :line 825, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 836, :column 4, :line 836, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 836, :column 5, :line 836, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 836, :column 9, :line 836, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 836, :column 11, :line 836, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 845, :column 9, :line 845, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 845, :column 11, :line 845, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 845, :column 15, :line 845, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 824, :column 8, :line 824, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 825, :column 5, :line 825, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 825, :column 9, :line 825, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 836, :column 5, :line 836, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 836, :column 9, :line 836, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 836, :column 11, :line 836, :file "cljs/core.cljs"} val] [^{:end-column 9, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 845, :column 9, :line 845, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 845, :column 11, :line 845, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 845, :column 15, :line 845, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 825, :column 4, :line 825, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 825, :column 5, :line 825, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 825, :column 9, :line 825, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 836, :column 4, :line 836, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 836, :column 5, :line 836, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 836, :column 9, :line 836, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 836, :column 11, :line 836, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 845, :column 9, :line 845, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 845, :column 11, :line 845, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 845, :column 15, :line 845, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 824, :column 8, :line 824, :file "cljs/core.cljs"} array-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 859, :column 3, :line 859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 859, :column 4, :line 859, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 857, :column 8, :line 857, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 857, :column 16, :line 857, :file "cljs/core.cljs"} counted? ^{:arglists (^{:end-column 6, :end-line 859, :column 3, :line 859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 859, :column 4, :line 859, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 857, :column 8, :line 857, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 857, :column 16, :line 857, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 859, :column 4, :line 859, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 859, :column 3, :line 859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 859, :column 4, :line 859, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 857, :column 8, :line 857, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 857, :column 16, :line 857, :file "cljs/core.cljs"} counted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8017, :column 3, :line 8017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8017, :column 4, :line 8017, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8017, :column 6, :line 8017, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 8015, :column 7, :line 8015, :file "cljs/core.cljs"} println ^{:arglists (^{:end-column 11, :end-line 8017, :column 3, :line 8017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8017, :column 4, :line 8017, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8017, :column 6, :line 8017, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 8015, :column 7, :line 8015, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 8017, :column 6, :line 8017, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8017, :column 3, :line 8017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8017, :column 4, :line 8017, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8017, :column 6, :line 8017, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 8015, :column 7, :line 8015, :file "cljs/core.cljs"} println, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3885, :column 3, :line 3885, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3885, :column 4, :line 3885, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3885, :column 6, :line 3885, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3885, :column 7, :line 3885, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3885, :column 9, :line 3885, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3885, :column 11, :line 3885, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3885, :column 15, :line 3885, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3881, :column 7, :line 3881, :file "cljs/core.cljs"} assoc-in ^{:arglists (^{:end-column 17, :end-line 3885, :column 3, :line 3885, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3885, :column 4, :line 3885, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3885, :column 6, :line 3885, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3885, :column 7, :line 3885, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3885, :column 9, :line 3885, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3885, :column 11, :line 3885, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3885, :column 15, :line 3885, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3881, :column 7, :line 3881, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3885, :column 4, :line 3885, :file "cljs/core.cljs"} m p__8775 ^{:end-column 17, :end-line 3885, :column 15, :line 3885, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3885, :column 3, :line 3885, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3885, :column 4, :line 3885, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3885, :column 6, :line 3885, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3885, :column 7, :line 3885, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3885, :column 9, :line 3885, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3885, :column 11, :line 3885, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3885, :column 15, :line 3885, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3881, :column 7, :line 3881, :file "cljs/core.cljs"} assoc-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7086, :column 10, :line 7086, :file "cljs/core.cljs"} PersistentHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7086, :column 10, :line 7086, :file "cljs/core.cljs"} PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 7086, :column 28, :line 7086, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7086, :column 29, :line 7086, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7086, :column 34, :line 7086, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 7086, :column 53, :line 7086, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 1996, :column 3, :line 1996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1996, :column 4, :line 1996, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1996, :column 6, :line 1996, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1994, :column 7, :line 1994, :file "cljs/core.cljs"} bit-test ^{:arglists (^{:end-column 8, :end-line 1996, :column 3, :line 1996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1996, :column 4, :line 1996, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1996, :column 6, :line 1996, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1994, :column 7, :line 1994, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1996, :column 4, :line 1996, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1996, :column 6, :line 1996, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1996, :column 3, :line 1996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1996, :column 4, :line 1996, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1996, :column 6, :line 1996, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1994, :column 7, :line 1994, :file "cljs/core.cljs"} bit-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 5340, :column 10, :line 5340, :file "cljs/core.cljs"} TransientHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 6098, :column 10, :line 6098, :file "cljs/core.cljs"} TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 6102, :column 27, :line 6098, :file "cljs/core.cljs"} [^{:mutable true, :tag ^{:end-column 47, :end-line 6098, :column 39, :line 6098, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6098, :column 47, :line 6098, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6099, :column 38, :line 6099, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6100, :column 38, :line 6100, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6101, :column 39, :line 6101, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6101, :column 47, :line 6101, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6102, :column 38, :line 6102, :file "cljs/core.cljs"} nil-val], :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists ([^{:end-column 34, :end-line 5961, :column 29, :line 5961, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5961, :column 34, :line 5961, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5961, :column 38, :line 5961, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5961, :column 44, :line 5961, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5961, :column 52, :line 5961, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5961, :column 61, :line 5961, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5961, :column 79, :line 5961, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5961, :column 10, :line 5961, :file "cljs/core.cljs"} ->PersistentHashMap ^{:arglists ([^{:end-column 34, :end-line 5961, :column 29, :line 5961, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5961, :column 34, :line 5961, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5961, :column 38, :line 5961, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5961, :column 44, :line 5961, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5961, :column 52, :line 5961, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5961, :column 61, :line 5961, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5961, :column 79, :line 5961, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5961, :column 10, :line 5961, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentHashMap [^{:end-column 34, :end-line 5961, :column 29, :line 5961, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5961, :column 34, :line 5961, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5961, :column 38, :line 5961, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5961, :column 44, :line 5961, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5961, :column 52, :line 5961, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5961, :column 61, :line 5961, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5961, :column 79, :line 5961, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 5961, :column 29, :line 5961, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5961, :column 34, :line 5961, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5961, :column 38, :line 5961, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5961, :column 44, :line 5961, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5961, :column 52, :line 5961, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5961, :column 61, :line 5961, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5961, :column 79, :line 5961, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5961, :column 10, :line 5961, :file "cljs/core.cljs"} ->PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 20, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} ISwap ^{:protocol-info {:methods {^{:end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 20, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 20, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} ISwap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 1400, :column 10, :line 1400, :file "cljs/core.cljs"} ChunkedCons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2516, :column 10, :line 2516, :file "cljs/core.cljs"} ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 2516, :column 22, :line 2516, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2516, :column 23, :line 2516, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2516, :column 29, :line 2516, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2516, :column 34, :line 2516, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2516, :column 49, :line 2516, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8398, :column 3, :line 8398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8398, :column 4, :line 8398, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8393, :column 7, :line 8393, :file "cljs/core.cljs"} memoize ^{:arglists (^{:end-column 6, :end-line 8398, :column 3, :line 8398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8398, :column 4, :line 8398, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8393, :column 7, :line 8393, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 8398, :column 4, :line 8398, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8398, :column 3, :line 8398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8398, :column 4, :line 8398, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8393, :column 7, :line 8393, :file "cljs/core.cljs"} memoize, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8162, :column 3, :line 8162, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8162, :column 4, :line 8162, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8162, :column 9, :line 8162, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8162, :column 11, :line 8162, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8162, :column 13, :line 8162, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8156, :column 7, :line 8156, :file "cljs/core.cljs"} alter-meta! ^{:arglists (^{:end-column 18, :end-line 8162, :column 3, :line 8162, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8162, :column 4, :line 8162, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8162, :column 9, :line 8162, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8162, :column 11, :line 8162, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8162, :column 13, :line 8162, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8156, :column 7, :line 8156, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8162, :column 4, :line 8162, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8162, :column 9, :line 8162, :file "cljs/core.cljs"} f & ^{:end-column 18, :end-line 8162, :column 13, :line 8162, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8162, :column 3, :line 8162, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8162, :column 4, :line 8162, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8162, :column 9, :line 8162, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8162, :column 11, :line 8162, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8162, :column 13, :line 8162, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8156, :column 7, :line 8156, :file "cljs/core.cljs"} alter-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 399, :column 30, :line 399, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 399, :column 10, :line 399, :file "cljs/core.cljs"} ->StringBufferWriter ^{:arglists ([^{:end-column 33, :end-line 399, :column 30, :line 399, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 399, :column 10, :line 399, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringBufferWriter [^{:end-column 33, :end-line 399, :column 30, :line 399, :file "cljs/core.cljs"} sb]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 399, :column 30, :line 399, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 399, :column 10, :line 399, :file "cljs/core.cljs"} ->StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2039, :column 22, :line 2039, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2039, :column 23, :line 2039, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2039, :column 8, :line 2039, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2039, :column 16, :line 2039, :file "cljs/core.cljs"} zero? ^{:arglists (^{:end-column 25, :end-line 2039, :column 22, :line 2039, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2039, :column 23, :line 2039, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2039, :column 8, :line 2039, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2039, :column 16, :line 2039, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 2039, :column 23, :line 2039, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2039, :column 22, :line 2039, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2039, :column 23, :line 2039, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2039, :column 8, :line 2039, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2039, :column 16, :line 2039, :file "cljs/core.cljs"} zero?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 4449, :column 27, :line 4449, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4449, :column 28, :line 4449, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4449, :column 33, :line 4449, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4449, :column 8, :line 4449, :file "cljs/core.cljs"} tv-ensure-editable ^{:arglists (^{:end-column 38, :end-line 4449, :column 27, :line 4449, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4449, :column 28, :line 4449, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4449, :column 33, :line 4449, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4449, :column 8, :line 4449, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 4449, :column 28, :line 4449, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4449, :column 33, :line 4449, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 4449, :column 27, :line 4449, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4449, :column 28, :line 4449, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4449, :column 33, :line 4449, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4449, :column 8, :line 4449, :file "cljs/core.cljs"} tv-ensure-editable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn* ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} -assoc-n ^{:arglists (^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} -assoc-n, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1839, :column 25, :line 1839, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1839, :column 26, :line 1839, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1839, :column 7, :line 1839, :file "cljs/core.cljs"} unchecked-dec-int ^{:arglists (^{:end-column 28, :end-line 1839, :column 25, :line 1839, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1839, :column 26, :line 1839, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1839, :column 7, :line 1839, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1839, :column 26, :line 1839, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1839, :column 25, :line 1839, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1839, :column 26, :line 1839, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1839, :column 7, :line 1839, :file "cljs/core.cljs"} unchecked-dec-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2105, :column 18, :line 2105, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2105, :column 19, :line 2105, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2105, :column 8, :line 2105, :file "cljs/core.cljs"} hash-imap ^{:arglists (^{:end-column 21, :end-line 2105, :column 18, :line 2105, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2105, :column 19, :line 2105, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2105, :column 8, :line 2105, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 2105, :column 19, :line 2105, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2105, :column 18, :line 2105, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2105, :column 19, :line 2105, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2105, :column 8, :line 2105, :file "cljs/core.cljs"} hash-imap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8591, :column 3, :line 8591, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8591, :column 4, :line 8591, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8591, :column 6, :line 8591, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8591, :column 8, :line 8591, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} dominates ^{:arglists (^{:end-column 21, :end-line 8591, :column 3, :line 8591, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8591, :column 4, :line 8591, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8591, :column 6, :line 8591, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8591, :column 8, :line 8591, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8591, :column 4, :line 8591, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8591, :column 6, :line 8591, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8591, :column 8, :line 8591, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8591, :column 3, :line 8591, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8591, :column 4, :line 8591, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8591, :column 6, :line 8591, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8591, :column 8, :line 8591, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} dominates, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2766, :column 3, :line 2766, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2766, :column 4, :line 2766, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2762, :column 7, :line 2762, :file "cljs/core.cljs"} persistent! ^{:arglists (^{:end-column 10, :end-line 2766, :column 3, :line 2766, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2766, :column 4, :line 2766, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2762, :column 7, :line 2762, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2766, :column 4, :line 2766, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2766, :column 3, :line 2766, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2766, :column 4, :line 2766, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2762, :column 7, :line 2762, :file "cljs/core.cljs"} persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn! ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1032, :column 3, :line 1032, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1030, :column 7, :line 1030, :file "cljs/core.cljs"} nnext ^{:arglists (^{:end-column 9, :end-line 1032, :column 3, :line 1032, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1030, :column 7, :line 1030, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 667, :column 8, :line 667, :file "cljs/core.cljs"} seq [^{:end-column 9, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1032, :column 3, :line 1032, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1030, :column 7, :line 1030, :file "cljs/core.cljs"} nnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5351, :column 10, :line 5351, :file "cljs/core.cljs"} Box {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5351, :column 10, :line 5351, :file "cljs/core.cljs"} Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 29, :end-line 5351, :column 14, :line 5351, :file "cljs/core.cljs"} [^{:mutable true, :end-column 29, :end-line 5351, :column 25, :line 5351, :file "cljs/core.cljs"} val], :protocols #{}}, StringBuffer {:op :js-var, :ns goog.string, :name StringBuffer}, ^{:arglists (^{:end-column 40, :end-line 6291, :column 22, :line 6291, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6291, :column 23, :line 6291, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6291, :column 27, :line 6291, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6291, :column 31, :line 6291, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6291, :column 36, :line 6291, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6291, :column 8, :line 6291, :file "cljs/core.cljs"} balance-right ^{:arglists (^{:end-column 40, :end-line 6291, :column 22, :line 6291, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6291, :column 23, :line 6291, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6291, :column 27, :line 6291, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6291, :column 31, :line 6291, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6291, :column 36, :line 6291, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6291, :column 8, :line 6291, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 6291, :column 23, :line 6291, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6291, :column 27, :line 6291, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6291, :column 31, :line 6291, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6291, :column 36, :line 6291, :file "cljs/core.cljs"} ins]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6291, :column 22, :line 6291, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6291, :column 23, :line 6291, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6291, :column 27, :line 6291, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6291, :column 31, :line 6291, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6291, :column 36, :line 6291, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6291, :column 8, :line 6291, :file "cljs/core.cljs"} balance-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 8628, :column 30, :line 8628, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8628, :column 31, :line 8628, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8628, :column 36, :line 8628, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8628, :column 8, :line 8628, :file "cljs/core.cljs"} throw-no-method-error ^{:arglists (^{:end-column 49, :end-line 8628, :column 30, :line 8628, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8628, :column 31, :line 8628, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8628, :column 36, :line 8628, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8628, :column 8, :line 8628, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 36, :end-line 8628, :column 31, :line 8628, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8628, :column 36, :line 8628, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 8628, :column 30, :line 8628, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8628, :column 31, :line 8628, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8628, :column 36, :line 8628, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8628, :column 8, :line 8628, :file "cljs/core.cljs"} throw-no-method-error, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8191, :column 9, :line 8191, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8191, :column 13, :line 8191, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8170, :column 7, :line 8170, :file "cljs/core.cljs"} add-watch ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8191, :column 9, :line 8191, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8191, :column 13, :line 8191, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8170, :column 7, :line 8170, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8191, :column 9, :line 8191, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8191, :column 13, :line 8191, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8191, :column 9, :line 8191, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8191, :column 13, :line 8191, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8170, :column 7, :line 8170, :file "cljs/core.cljs"} add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3147, :column 3, :line 3147, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3147, :column 4, :line 3147, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3147, :column 9, :line 3147, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3144, :column 8, :line 3144, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3144, :column 16, :line 3144, :file "cljs/core.cljs"} not-every? ^{:arglists (^{:end-column 14, :end-line 3147, :column 3, :line 3147, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3147, :column 4, :line 3147, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3147, :column 9, :line 3147, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3144, :column 8, :line 3144, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3144, :column 16, :line 3144, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 3147, :column 4, :line 3147, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3147, :column 9, :line 3147, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3147, :column 3, :line 3147, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3147, :column 4, :line 3147, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3147, :column 9, :line 3147, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3144, :column 8, :line 3144, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3144, :column 16, :line 3144, :file "cljs/core.cljs"} not-every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1946, :column 3, :line 1946, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1946, :column 4, :line 1946, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1946, :column 6, :line 1946, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} rem ^{:arglists (^{:end-column 8, :end-line 1946, :column 3, :line 1946, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1946, :column 4, :line 1946, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1946, :column 6, :line 1946, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1946, :column 4, :line 1946, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1946, :column 6, :line 1946, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1946, :column 3, :line 1946, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1946, :column 4, :line 1946, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1946, :column 6, :line 1946, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} rem, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 7950, :column 24, :line 7950, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7950, :column 25, :line 7950, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7950, :column 30, :line 7950, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7950, :column 8, :line 7950, :file "cljs/core.cljs"} pr-sb-with-opts ^{:arglists (^{:end-column 35, :end-line 7950, :column 24, :line 7950, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7950, :column 25, :line 7950, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7950, :column 30, :line 7950, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7950, :column 8, :line 7950, :file "cljs/core.cljs"} {:arglists (^goog.string/StringBuffer [^{:end-column 30, :end-line 7950, :column 25, :line 7950, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7950, :column 30, :line 7950, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 7950, :column 24, :line 7950, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7950, :column 25, :line 7950, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7950, :column 30, :line 7950, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7950, :column 8, :line 7950, :file "cljs/core.cljs"} pr-sb-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5414, :column 10, :line 5414, :file "cljs/core.cljs"} BitmapIndexedNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5414, :column 10, :line 5414, :file "cljs/core.cljs"} BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 5414, :column 28, :line 5414, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5414, :column 29, :line 5414, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5414, :column 44, :line 5414, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5414, :column 61, :line 5414, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists ([^{:end-column 24, :end-line 5847, :column 19, :line 5847, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5847, :column 24, :line 5847, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5847, :column 30, :line 5847, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5847, :column 32, :line 5847, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5847, :column 44, :line 5847, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5847, :column 10, :line 5847, :file "cljs/core.cljs"} ->NodeSeq ^{:arglists ([^{:end-column 24, :end-line 5847, :column 19, :line 5847, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5847, :column 24, :line 5847, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5847, :column 30, :line 5847, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5847, :column 32, :line 5847, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5847, :column 44, :line 5847, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5847, :column 10, :line 5847, :file "cljs/core.cljs"} {:arglists (^cljs.core/NodeSeq [^{:end-column 24, :end-line 5847, :column 19, :line 5847, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5847, :column 24, :line 5847, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5847, :column 30, :line 5847, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5847, :column 32, :line 5847, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5847, :column 44, :line 5847, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 5847, :column 19, :line 5847, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5847, :column 24, :line 5847, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5847, :column 30, :line 5847, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5847, :column 32, :line 5847, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5847, :column 44, :line 5847, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5847, :column 10, :line 5847, :file "cljs/core.cljs"} ->NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3154, :column 3, :line 3154, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3154, :column 4, :line 3154, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3154, :column 9, :line 3154, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} some ^{:arglists (^{:end-column 14, :end-line 3154, :column 3, :line 3154, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3154, :column 4, :line 3154, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3154, :column 9, :line 3154, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3154, :column 4, :line 3154, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3154, :column 9, :line 3154, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3154, :column 3, :line 3154, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3154, :column 4, :line 3154, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3154, :column 9, :line 3154, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} some, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 21, :end-line 382, :column 14, :line 382, :file "cljs/core.cljs"} INamed ^{:impls (cljs.core/Keyword cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 21, :end-line 382, :column 14, :line 382, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 21, :end-line 382, :column 14, :line 382, :file "cljs/core.cljs"} INamed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 29, :end-line 5351, :column 25, :line 5351, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5351, :column 10, :line 5351, :file "cljs/core.cljs"} ->Box ^{:arglists ([^{:mutable true, :end-column 29, :end-line 5351, :column 25, :line 5351, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5351, :column 10, :line 5351, :file "cljs/core.cljs"} {:arglists (^cljs.core/Box [^{:mutable true, :end-column 29, :end-line 5351, :column 25, :line 5351, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 29, :end-line 5351, :column 25, :line 5351, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5351, :column 10, :line 5351, :file "cljs/core.cljs"} ->Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 22, :end-line 296, :column 14, :line 296, :file "cljs/core.cljs"} IReduce ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 22, :end-line 296, :column 14, :line 296, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 22, :end-line 296, :column 14, :line 296, :file "cljs/core.cljs"} IReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3604, :column 5, :line 3604, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3616, :column 4, :line 3616, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3616, :column 5, :line 3616, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3616, :column 7, :line 3616, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} drop ^{:arglists (^{:end-column 7, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3604, :column 5, :line 3604, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3616, :column 4, :line 3616, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3616, :column 5, :line 3616, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3616, :column 7, :line 3616, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3604, :column 5, :line 3604, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3616, :column 5, :line 3616, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3616, :column 7, :line 3616, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3604, :column 5, :line 3604, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3616, :column 4, :line 3616, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3616, :column 5, :line 3616, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3616, :column 7, :line 3616, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} drop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1407, :column 4, :line 1407, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1409, :column 7, :line 1409, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} js-obj ^{:arglists (^{:end-column 6, :end-line 1407, :column 4, :line 1407, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1409, :column 7, :line 1409, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} {:arglists (^object [] [& ^{:end-column 15, :end-line 1409, :column 7, :line 1409, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1407, :column 4, :line 1407, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1409, :column 7, :line 1409, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} js-obj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 35, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} ITransientCollection ^{:impls (cljs.core/TransientHashSet cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 35, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 35, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} ITransientCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3306, :column 10, :line 3306, :file "cljs/core.cljs"} Atom {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3306, :column 10, :line 3306, :file "cljs/core.cljs"} Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 3306, :column 15, :line 3306, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3306, :column 16, :line 3306, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3306, :column 27, :line 3306, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3306, :column 37, :line 3306, :file "cljs/core.cljs"} watches], :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}}, ^{:arglists (^{:end-column 12, :end-line 1120, :column 4, :line 1120, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1120, :column 5, :line 1120, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1120, :column 10, :line 1120, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1148, :column 4, :line 1148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1148, :column 5, :line 1148, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1148, :column 10, :line 1148, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1148, :column 12, :line 1148, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} nth ^{:arglists (^{:end-column 12, :end-line 1120, :column 4, :line 1120, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1120, :column 5, :line 1120, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1120, :column 10, :line 1120, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1148, :column 4, :line 1148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1148, :column 5, :line 1148, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1148, :column 10, :line 1148, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1148, :column 12, :line 1148, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1120, :column 5, :line 1120, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1120, :column 10, :line 1120, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 1148, :column 5, :line 1148, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1148, :column 10, :line 1148, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1148, :column 12, :line 1148, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1120, :column 4, :line 1120, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1120, :column 5, :line 1120, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1120, :column 10, :line 1120, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1148, :column 4, :line 1148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1148, :column 5, :line 1148, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1148, :column 10, :line 1148, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1148, :column 12, :line 1148, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1381, :column 8, :line 1381, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1381, :column 16, :line 1381, :file "cljs/core.cljs"} sorted? ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1381, :column 8, :line 1381, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1381, :column 16, :line 1381, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1381, :column 8, :line 1381, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1381, :column 16, :line 1381, :file "cljs/core.cljs"} sorted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil? ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3671, :column 3, :line 3671, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3671, :column 4, :line 3671, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3671, :column 6, :line 3671, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3669, :column 7, :line 3669, :file "cljs/core.cljs"} split-at ^{:arglists (^{:end-column 11, :end-line 3671, :column 3, :line 3671, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3671, :column 4, :line 3671, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3671, :column 6, :line 3671, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3669, :column 7, :line 3669, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 6, :end-line 3671, :column 4, :line 3671, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3671, :column 6, :line 3671, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3671, :column 3, :line 3671, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3671, :column 4, :line 3671, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3671, :column 6, :line 3671, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3669, :column 7, :line 3669, :file "cljs/core.cljs"} split-at, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 7084, :column 10, :line 7084, :file "cljs/core.cljs"} TransientHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 7179, :column 10, :line 7179, :file "cljs/core.cljs"} TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 7179, :column 27, :line 7179, :file "cljs/core.cljs"} [^{:mutable true, :end-column 52, :end-line 7179, :column 38, :line 7179, :file "cljs/core.cljs"} transient-map], :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}}, ^{:arglists (^{:end-column 35, :end-line 5012, :column 28, :line 5012, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5012, :column 29, :line 5012, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 5012, :column 31, :line 5012, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 5012, :column 33, :line 5012, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 5012, :column 8, :line 5012, :file "cljs/core.cljs"} array-map-extend-kv ^{:arglists (^{:end-column 35, :end-line 5012, :column 28, :line 5012, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5012, :column 29, :line 5012, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 5012, :column 31, :line 5012, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 5012, :column 33, :line 5012, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 5012, :column 8, :line 5012, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 31, :end-line 5012, :column 29, :line 5012, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 5012, :column 31, :line 5012, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 5012, :column 33, :line 5012, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 5012, :column 28, :line 5012, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5012, :column 29, :line 5012, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 5012, :column 31, :line 5012, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 5012, :column 33, :line 5012, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 5012, :column 8, :line 5012, :file "cljs/core.cljs"} array-map-extend-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7967, :column 3, :line 7967, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7967, :column 4, :line 7967, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7967, :column 9, :line 7967, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7965, :column 7, :line 7965, :file "cljs/core.cljs"} prn-str-with-opts ^{:arglists (^{:end-column 14, :end-line 7967, :column 3, :line 7967, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7967, :column 4, :line 7967, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7967, :column 9, :line 7967, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7965, :column 7, :line 7965, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7967, :column 4, :line 7967, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7967, :column 9, :line 7967, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7967, :column 3, :line 7967, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7967, :column 4, :line 7967, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7967, :column 9, :line 7967, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7965, :column 7, :line 7965, :file "cljs/core.cljs"} prn-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 8289, :column 4, :line 8289, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8289, :column 5, :line 8289, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8291, :column 4, :line 8291, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8291, :column 5, :line 8291, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8291, :column 10, :line 8291, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8286, :column 7, :line 8286, :file "cljs/core.cljs"} random-sample ^{:arglists (^{:end-column 10, :end-line 8289, :column 4, :line 8289, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8289, :column 5, :line 8289, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8291, :column 4, :line 8291, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8291, :column 5, :line 8291, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8291, :column 10, :line 8291, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8286, :column 7, :line 8286, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 8289, :column 5, :line 8289, :file "cljs/core.cljs"} prob] ^cljs.core/LazySeq [^{:end-column 10, :end-line 8291, :column 5, :line 8291, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8291, :column 10, :line 8291, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 8289, :column 4, :line 8289, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8289, :column 5, :line 8289, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8291, :column 4, :line 8291, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8291, :column 5, :line 8291, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8291, :column 10, :line 8291, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8286, :column 7, :line 8286, :file "cljs/core.cljs"} random-sample, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7070, :column 3, :line 7070, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7070, :column 4, :line 7070, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 7070, :column 8, :line 7070, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 7068, :column 7, :line 7068, :file "cljs/core.cljs"} select-keys ^{:arglists (^{:end-column 15, :end-line 7070, :column 3, :line 7070, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7070, :column 4, :line 7070, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 7070, :column 8, :line 7070, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 7068, :column 7, :line 7068, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap [^{:end-column 8, :end-line 7070, :column 4, :line 7070, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 7070, :column 8, :line 7070, :file "cljs/core.cljs"} keyseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7070, :column 3, :line 7070, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7070, :column 4, :line 7070, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 7070, :column 8, :line 7070, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 7068, :column 7, :line 7068, :file "cljs/core.cljs"} select-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1965, :column 3, :line 1965, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1965, :column 4, :line 1965, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1965, :column 6, :line 1965, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1963, :column 7, :line 1963, :file "cljs/core.cljs"} bit-and ^{:arglists (^{:end-column 8, :end-line 1965, :column 3, :line 1965, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1965, :column 4, :line 1965, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1965, :column 6, :line 1965, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1963, :column 7, :line 1963, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1965, :column 4, :line 1965, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1965, :column 6, :line 1965, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1965, :column 3, :line 1965, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1965, :column 4, :line 1965, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1965, :column 6, :line 1965, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1963, :column 7, :line 1963, :file "cljs/core.cljs"} bit-and, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2703, :column 22, :line 2703, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2703, :column 23, :line 2703, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2703, :column 25, :line 2703, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2703, :column 8, :line 2703, :file "cljs/core.cljs"} bounded-count ^{:arglists (^{:end-column 27, :end-line 2703, :column 22, :line 2703, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2703, :column 23, :line 2703, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2703, :column 25, :line 2703, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2703, :column 8, :line 2703, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2703, :column 23, :line 2703, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2703, :column 25, :line 2703, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2703, :column 22, :line 2703, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2703, :column 23, :line 2703, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2703, :column 25, :line 2703, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2703, :column 8, :line 2703, :file "cljs/core.cljs"} bounded-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 25, :end-line 8203, :column 1, :line 8203, :file "cljs/core.cljs"} gensym_counter ^{:end-column 25, :end-line 8203, :column 1, :line 8203, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 25, :end-line 8203, :column 1, :line 8203, :file "cljs/core.cljs"} gensym_counter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2747, :column 5, :line 2747, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2748, :column 7, :line 2748, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2749, :column 4, :line 2749, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2749, :column 5, :line 2749, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2749, :column 9, :line 2749, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2750, :column 4, :line 2750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2750, :column 5, :line 2750, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2750, :column 7, :line 2750, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2750, :column 9, :line 2750, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2750, :column 11, :line 2750, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2751, :column 4, :line 2751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2751, :column 5, :line 2751, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2751, :column 7, :line 2751, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2751, :column 9, :line 2751, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2751, :column 11, :line 2751, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2751, :column 13, :line 2751, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2751, :column 15, :line 2751, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2744, :column 7, :line 2744, :file "cljs/core.cljs"} list* ^{:arglists (^{:end-column 10, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2747, :column 5, :line 2747, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2748, :column 7, :line 2748, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2749, :column 4, :line 2749, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2749, :column 5, :line 2749, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2749, :column 9, :line 2749, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2750, :column 4, :line 2750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2750, :column 5, :line 2750, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2750, :column 7, :line 2750, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2750, :column 9, :line 2750, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2750, :column 11, :line 2750, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2751, :column 4, :line 2751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2751, :column 5, :line 2751, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2751, :column 7, :line 2751, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2751, :column 9, :line 2751, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2751, :column 11, :line 2751, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2751, :column 13, :line 2751, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2751, :column 15, :line 2751, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2744, :column 7, :line 2744, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq [^{:end-column 10, :end-line 2747, :column 5, :line 2747, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2748, :column 7, :line 2748, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2749, :column 5, :line 2749, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2749, :column 9, :line 2749, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2750, :column 5, :line 2750, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2750, :column 7, :line 2750, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2750, :column 9, :line 2750, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2750, :column 11, :line 2750, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2751, :column 5, :line 2751, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2751, :column 7, :line 2751, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2751, :column 9, :line 2751, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2751, :column 11, :line 2751, :file "cljs/core.cljs"} d & ^{:end-column 20, :end-line 2751, :column 15, :line 2751, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2747, :column 5, :line 2747, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2748, :column 7, :line 2748, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2749, :column 4, :line 2749, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2749, :column 5, :line 2749, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2749, :column 9, :line 2749, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2750, :column 4, :line 2750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2750, :column 5, :line 2750, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2750, :column 7, :line 2750, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2750, :column 9, :line 2750, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2750, :column 11, :line 2750, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2751, :column 4, :line 2751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2751, :column 5, :line 2751, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2751, :column 7, :line 2751, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2751, :column 9, :line 2751, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2751, :column 11, :line 2751, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2751, :column 13, :line 2751, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2751, :column 15, :line 2751, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2744, :column 7, :line 2744, :file "cljs/core.cljs"} list*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 2340, :column 19, :line 2340, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2340, :column 22, :line 2340, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2340, :column 27, :line 2340, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2340, :column 41, :line 2340, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2340, :column 10, :line 2340, :file "cljs/core.cljs"} ->Keyword ^{:arglists ([^{:end-column 22, :end-line 2340, :column 19, :line 2340, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2340, :column 22, :line 2340, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2340, :column 27, :line 2340, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2340, :column 41, :line 2340, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2340, :column 10, :line 2340, :file "cljs/core.cljs"} {:arglists (^cljs.core/Keyword [^{:end-column 22, :end-line 2340, :column 19, :line 2340, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2340, :column 22, :line 2340, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2340, :column 27, :line 2340, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2340, :column 41, :line 2340, :file "cljs/core.cljs"} _hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 2340, :column 19, :line 2340, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2340, :column 22, :line 2340, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2340, :column 27, :line 2340, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2340, :column 41, :line 2340, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2340, :column 10, :line 2340, :file "cljs/core.cljs"} ->Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 3896, :column 4, :line 3896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3896, :column 5, :line 3896, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3896, :column 7, :line 3896, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3896, :column 8, :line 3896, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3896, :column 10, :line 3896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3896, :column 12, :line 3896, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3896, :column 16, :line 3896, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3900, :column 4, :line 3900, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3900, :column 5, :line 3900, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3900, :column 7, :line 3900, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3900, :column 8, :line 3900, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3900, :column 10, :line 3900, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3900, :column 12, :line 3900, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3900, :column 16, :line 3900, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3900, :column 18, :line 3900, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3904, :column 4, :line 3904, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3904, :column 5, :line 3904, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3904, :column 7, :line 3904, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3904, :column 8, :line 3904, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3904, :column 10, :line 3904, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3904, :column 12, :line 3904, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3904, :column 16, :line 3904, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3904, :column 18, :line 3904, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3904, :column 20, :line 3904, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3908, :column 4, :line 3908, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3908, :column 5, :line 3908, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3908, :column 8, :line 3908, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3908, :column 10, :line 3908, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3908, :column 12, :line 3908, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3908, :column 16, :line 3908, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3908, :column 18, :line 3908, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3908, :column 20, :line 3908, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3908, :column 22, :line 3908, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3912, :column 4, :line 3912, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3912, :column 5, :line 3912, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3912, :column 7, :line 3912, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3912, :column 8, :line 3912, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3912, :column 10, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3912, :column 12, :line 3912, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3912, :column 16, :line 3912, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3912, :column 18, :line 3912, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3912, :column 20, :line 3912, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3912, :column 22, :line 3912, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3912, :column 24, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3912, :column 26, :line 3912, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3890, :column 7, :line 3890, :file "cljs/core.cljs"} update-in ^{:arglists (^{:end-column 18, :end-line 3896, :column 4, :line 3896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3896, :column 5, :line 3896, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3896, :column 7, :line 3896, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3896, :column 8, :line 3896, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3896, :column 10, :line 3896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3896, :column 12, :line 3896, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3896, :column 16, :line 3896, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3900, :column 4, :line 3900, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3900, :column 5, :line 3900, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3900, :column 7, :line 3900, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3900, :column 8, :line 3900, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3900, :column 10, :line 3900, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3900, :column 12, :line 3900, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3900, :column 16, :line 3900, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3900, :column 18, :line 3900, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3904, :column 4, :line 3904, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3904, :column 5, :line 3904, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3904, :column 7, :line 3904, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3904, :column 8, :line 3904, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3904, :column 10, :line 3904, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3904, :column 12, :line 3904, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3904, :column 16, :line 3904, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3904, :column 18, :line 3904, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3904, :column 20, :line 3904, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3908, :column 4, :line 3908, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3908, :column 5, :line 3908, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3908, :column 8, :line 3908, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3908, :column 10, :line 3908, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3908, :column 12, :line 3908, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3908, :column 16, :line 3908, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3908, :column 18, :line 3908, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3908, :column 20, :line 3908, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3908, :column 22, :line 3908, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3912, :column 4, :line 3912, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3912, :column 5, :line 3912, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3912, :column 7, :line 3912, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3912, :column 8, :line 3912, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3912, :column 10, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3912, :column 12, :line 3912, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3912, :column 16, :line 3912, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3912, :column 18, :line 3912, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3912, :column 20, :line 3912, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3912, :column 22, :line 3912, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3912, :column 24, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3912, :column 26, :line 3912, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3890, :column 7, :line 3890, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3896, :column 5, :line 3896, :file "cljs/core.cljs"} m p__8778 ^{:end-column 18, :end-line 3896, :column 16, :line 3896, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3900, :column 5, :line 3900, :file "cljs/core.cljs"} m p__8781 ^{:end-column 18, :end-line 3900, :column 16, :line 3900, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3900, :column 18, :line 3900, :file "cljs/core.cljs"} a] [^{:end-column 7, :end-line 3904, :column 5, :line 3904, :file "cljs/core.cljs"} m p__8784 ^{:end-column 18, :end-line 3904, :column 16, :line 3904, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3904, :column 18, :line 3904, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3904, :column 20, :line 3904, :file "cljs/core.cljs"} b] [^{:end-column 7, :end-line 3908, :column 5, :line 3908, :file "cljs/core.cljs"} m p__8787 ^{:end-column 18, :end-line 3908, :column 16, :line 3908, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3908, :column 18, :line 3908, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3908, :column 20, :line 3908, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3908, :column 22, :line 3908, :file "cljs/core.cljs"} c] [^{:end-column 7, :end-line 3912, :column 5, :line 3912, :file "cljs/core.cljs"} m p__8790 ^{:end-column 18, :end-line 3912, :column 16, :line 3912, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3912, :column 18, :line 3912, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3912, :column 20, :line 3912, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3912, :column 22, :line 3912, :file "cljs/core.cljs"} c & ^{:end-column 31, :end-line 3912, :column 26, :line 3912, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 3896, :column 4, :line 3896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3896, :column 5, :line 3896, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3896, :column 7, :line 3896, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3896, :column 8, :line 3896, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3896, :column 10, :line 3896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3896, :column 12, :line 3896, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3896, :column 16, :line 3896, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3900, :column 4, :line 3900, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3900, :column 5, :line 3900, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3900, :column 7, :line 3900, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3900, :column 8, :line 3900, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3900, :column 10, :line 3900, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3900, :column 12, :line 3900, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3900, :column 16, :line 3900, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3900, :column 18, :line 3900, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3904, :column 4, :line 3904, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3904, :column 5, :line 3904, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3904, :column 7, :line 3904, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3904, :column 8, :line 3904, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3904, :column 10, :line 3904, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3904, :column 12, :line 3904, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3904, :column 16, :line 3904, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3904, :column 18, :line 3904, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3904, :column 20, :line 3904, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3908, :column 4, :line 3908, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3908, :column 5, :line 3908, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3908, :column 8, :line 3908, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3908, :column 10, :line 3908, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3908, :column 12, :line 3908, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3908, :column 16, :line 3908, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3908, :column 18, :line 3908, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3908, :column 20, :line 3908, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3908, :column 22, :line 3908, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3912, :column 4, :line 3912, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3912, :column 5, :line 3912, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3912, :column 7, :line 3912, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3912, :column 8, :line 3912, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3912, :column 10, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3912, :column 12, :line 3912, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3912, :column 16, :line 3912, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3912, :column 18, :line 3912, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3912, :column 20, :line 3912, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3912, :column 22, :line 3912, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3912, :column 24, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3912, :column 26, :line 3912, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3890, :column 7, :line 3890, :file "cljs/core.cljs"} update-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 8819, :column 3, :line 8819, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8819, :column 4, :line 8819, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8819, :column 12, :line 8819, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8819, :column 27, :line 8819, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8816, :column 7, :line 8816, :file "cljs/core.cljs"} prefer-method ^{:arglists (^{:end-column 42, :end-line 8819, :column 3, :line 8819, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8819, :column 4, :line 8819, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8819, :column 12, :line 8819, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8819, :column 27, :line 8819, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8816, :column 7, :line 8816, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8819, :column 4, :line 8819, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8819, :column 12, :line 8819, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8819, :column 27, :line 8819, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 8819, :column 3, :line 8819, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8819, :column 4, :line 8819, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8819, :column 12, :line 8819, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8819, :column 27, :line 8819, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8816, :column 7, :line 8816, :file "cljs/core.cljs"} prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 545, :column 20, :line 545, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 545, :column 21, :line 545, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 545, :column 8, :line 545, :file "cljs/core.cljs"} hash-symbol ^{:arglists (^{:end-column 25, :end-line 545, :column 20, :line 545, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 545, :column 21, :line 545, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 545, :column 8, :line 545, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 545, :column 21, :line 545, :file "cljs/core.cljs"} sym]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 545, :column 20, :line 545, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 545, :column 21, :line 545, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 545, :column 8, :line 545, :file "cljs/core.cljs"} hash-symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 5386, :column 4, :line 5386, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5386, :column 5, :line 5386, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5386, :column 11, :line 5386, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5386, :column 16, :line 5386, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5386, :column 18, :line 5386, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5390, :column 4, :line 5390, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5390, :column 5, :line 5390, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5390, :column 11, :line 5390, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5390, :column 16, :line 5390, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5390, :column 18, :line 5390, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5390, :column 20, :line 5390, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5390, :column 22, :line 5390, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5385, :column 8, :line 5385, :file "cljs/core.cljs"} edit-and-set ^{:arglists (^{:end-column 20, :end-line 5386, :column 4, :line 5386, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5386, :column 5, :line 5386, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5386, :column 11, :line 5386, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5386, :column 16, :line 5386, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5386, :column 18, :line 5386, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5390, :column 4, :line 5390, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5390, :column 5, :line 5390, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5390, :column 11, :line 5390, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5390, :column 16, :line 5390, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5390, :column 18, :line 5390, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5390, :column 20, :line 5390, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5390, :column 22, :line 5390, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5385, :column 8, :line 5385, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5386, :column 5, :line 5386, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5386, :column 11, :line 5386, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5386, :column 16, :line 5386, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5386, :column 18, :line 5386, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 5390, :column 5, :line 5390, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5390, :column 11, :line 5390, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5390, :column 16, :line 5390, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5390, :column 18, :line 5390, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5390, :column 20, :line 5390, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5390, :column 22, :line 5390, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 5386, :column 4, :line 5386, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5386, :column 5, :line 5386, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5386, :column 11, :line 5386, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5386, :column 16, :line 5386, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5386, :column 18, :line 5386, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5390, :column 4, :line 5390, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5390, :column 5, :line 5390, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5390, :column 11, :line 5390, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5390, :column 16, :line 5390, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5390, :column 18, :line 5390, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5390, :column 20, :line 5390, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5390, :column 22, :line 5390, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5385, :column 8, :line 5385, :file "cljs/core.cljs"} edit-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 35, :end-line 5094, :column 30, :line 5094, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5094, :column 35, :line 5094, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5094, :column 39, :line 5094, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5094, :column 53, :line 5094, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5094, :column 10, :line 5094, :file "cljs/core.cljs"} ->PersistentArrayMap ^{:arglists ([^{:end-column 35, :end-line 5094, :column 30, :line 5094, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5094, :column 35, :line 5094, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5094, :column 39, :line 5094, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5094, :column 53, :line 5094, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5094, :column 10, :line 5094, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMap [^{:end-column 35, :end-line 5094, :column 30, :line 5094, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5094, :column 35, :line 5094, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5094, :column 39, :line 5094, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5094, :column 53, :line 5094, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 35, :end-line 5094, :column 30, :line 5094, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5094, :column 35, :line 5094, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5094, :column 39, :line 5094, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5094, :column 53, :line 5094, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5094, :column 10, :line 5094, :file "cljs/core.cljs"} ->PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 76, :column 10, :line 76, :file "cljs/core.cljs"} instance? ^{:arglists (^{:end-column 31, :end-line 539, :column 26, :line 539, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 539, :column 27, :line 539, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 539, :column 29, :line 539, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 539, :column 8, :line 539, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 539, :column 16, :line 539, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 29, :end-line 539, :column 27, :line 539, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 539, :column 29, :line 539, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 539, :column 26, :line 539, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 539, :column 27, :line 539, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 539, :column 29, :line 539, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 539, :column 8, :line 539, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 539, :column 16, :line 539, :file "cljs/core.cljs"} instance?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 702, :column 3, :line 702, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 702, :column 4, :line 702, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 702, :column 15, :line 702, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 696, :column 8, :line 696, :file "cljs/core.cljs"} number, :end-column 35, :end-line 696, :column 15, :line 696, :file "cljs/core.cljs"} mix-collection-hash ^{:arglists (^{:end-column 21, :end-line 702, :column 3, :line 702, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 702, :column 4, :line 702, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 702, :column 15, :line 702, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 696, :column 8, :line 696, :file "cljs/core.cljs"} number, :end-column 35, :end-line 696, :column 15, :line 696, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 15, :end-line 702, :column 4, :line 702, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 702, :column 15, :line 702, :file "cljs/core.cljs"} count]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 702, :column 3, :line 702, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 702, :column 4, :line 702, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 702, :column 15, :line 702, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 696, :column 8, :line 696, :file "cljs/core.cljs"} number, :end-column 35, :end-line 696, :column 15, :line 696, :file "cljs/core.cljs"} mix-collection-hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7796, :column 3, :line 7796, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7796, :column 4, :line 7796, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7796, :column 7, :line 7796, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7791, :column 7, :line 7791, :file "cljs/core.cljs"} re-find ^{:arglists (^{:end-column 9, :end-line 7796, :column 3, :line 7796, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7796, :column 4, :line 7796, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7796, :column 7, :line 7796, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7791, :column 7, :line 7791, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7796, :column 4, :line 7796, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7796, :column 7, :line 7796, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7796, :column 3, :line 7796, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7796, :column 4, :line 7796, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7796, :column 7, :line 7796, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7791, :column 7, :line 7791, :file "cljs/core.cljs"} re-find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 8317, :column 3, :line 8317, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8317, :column 4, :line 8317, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8317, :column 9, :line 8317, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} run! ^{:arglists (^{:end-column 14, :end-line 8317, :column 3, :line 8317, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8317, :column 4, :line 8317, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8317, :column 9, :line 8317, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8317, :column 4, :line 8317, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8317, :column 9, :line 8317, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8317, :column 3, :line 8317, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8317, :column 4, :line 8317, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8317, :column 9, :line 8317, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} run!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 17, :end-line 7862, :column 1, :line 7854, :file "cljs/core.cljs"} char-escapes ^{:private true, :end-column 17, :end-line 7862, :column 1, :line 7854, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 17, :end-line 7862, :column 1, :line 7854, :file "cljs/core.cljs"} char-escapes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 4911, :column 10, :line 4911, :file "cljs/core.cljs"} ES6Iterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 4911, :column 10, :line 4911, :file "cljs/core.cljs"} ES6Iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 35, :end-line 4911, :column 22, :line 4911, :file "cljs/core.cljs"} [^{:mutable true, :end-column 35, :end-line 4911, :column 33, :line 4911, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:declared true, :end-column 18, :end-line 2103, :column 14, :line 2103, :file "cljs/core.cljs"} val ^{:arglists (^{:end-column 14, :end-line 7041, :column 3, :line 7041, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 7041, :column 4, :line 7041, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 7039, :column 7, :line 7039, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 7041, :column 4, :line 7041, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7041, :column 3, :line 7041, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 7041, :column 4, :line 7041, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 7039, :column 7, :line 7039, :file "cljs/core.cljs"} val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1827, :column 4, :line 1827, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1827, :column 5, :line 1827, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1827, :column 9, :line 1827, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1827, :column 11, :line 1827, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1822, :column 8, :line 1822, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1822, :column 15, :line 1822, :file "cljs/core.cljs"} unchecked-add ^{:arglists (^{:end-column 6, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1827, :column 4, :line 1827, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1827, :column 5, :line 1827, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1827, :column 9, :line 1827, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1827, :column 11, :line 1827, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1822, :column 8, :line 1822, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1822, :column 15, :line 1822, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1827, :column 5, :line 1827, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1827, :column 11, :line 1827, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1827, :column 4, :line 1827, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1827, :column 5, :line 1827, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1827, :column 9, :line 1827, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1827, :column 11, :line 1827, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1822, :column 8, :line 1822, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1822, :column 15, :line 1822, :file "cljs/core.cljs"} unchecked-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1561, :column 3, :line 1561, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1558, :column 17, :line 1558, :file "cljs/core.cljs"} fn->comparator ^{:arglists (^{:end-column 6, :end-line 1561, :column 3, :line 1561, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1558, :column 17, :line 1558, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1561, :column 3, :line 1561, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1558, :column 17, :line 1558, :file "cljs/core.cljs"} fn->comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 752, :column 10, :line 752, :file "cljs/core.cljs"} with-meta ^{:arglists (^{:end-column 11, :end-line 1311, :column 3, :line 1311, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1311, :column 4, :line 1311, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1311, :column 6, :line 1311, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1308, :column 7, :line 1308, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1311, :column 4, :line 1311, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1311, :column 6, :line 1311, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1311, :column 3, :line 1311, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1311, :column 4, :line 1311, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1311, :column 6, :line 1311, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1308, :column 7, :line 1308, :file "cljs/core.cljs"} with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical? ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} -namespace ^{:arglists (^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} -namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1845, :column 4, :line 1845, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1845, :column 5, :line 1845, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1846, :column 4, :line 1846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1846, :column 5, :line 1846, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1847, :column 4, :line 1847, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1847, :column 5, :line 1847, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1847, :column 9, :line 1847, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1847, :column 11, :line 1847, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1842, :column 8, :line 1842, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1842, :column 15, :line 1842, :file "cljs/core.cljs"} unchecked-divide-int ^{:arglists (^{:end-column 7, :end-line 1845, :column 4, :line 1845, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1845, :column 5, :line 1845, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1846, :column 4, :line 1846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1846, :column 5, :line 1846, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1847, :column 4, :line 1847, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1847, :column 5, :line 1847, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1847, :column 9, :line 1847, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1847, :column 11, :line 1847, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1842, :column 8, :line 1842, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1842, :column 15, :line 1842, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1845, :column 5, :line 1845, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1846, :column 5, :line 1846, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1847, :column 5, :line 1847, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1847, :column 11, :line 1847, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1845, :column 4, :line 1845, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1845, :column 5, :line 1845, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1846, :column 4, :line 1846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1846, :column 5, :line 1846, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1847, :column 4, :line 1847, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1847, :column 5, :line 1847, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1847, :column 9, :line 1847, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1847, :column 11, :line 1847, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1842, :column 8, :line 1842, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1842, :column 15, :line 1842, :file "cljs/core.cljs"} unchecked-divide-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 8464, :column 31, :line 8464, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8464, :column 32, :line 8464, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8464, :column 34, :line 8464, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8464, :column 36, :line 8464, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8464, :column 8, :line 8464, :file "cljs/core.cljs"} swap-global-hierarchy! ^{:arglists (^{:end-column 41, :end-line 8464, :column 31, :line 8464, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8464, :column 32, :line 8464, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8464, :column 34, :line 8464, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8464, :column 36, :line 8464, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8464, :column 8, :line 8464, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 8464, :column 32, :line 8464, :file "cljs/core.cljs"} f & ^{:end-column 41, :end-line 8464, :column 36, :line 8464, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 8464, :column 31, :line 8464, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8464, :column 32, :line 8464, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8464, :column 34, :line 8464, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8464, :column 36, :line 8464, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8464, :column 8, :line 8464, :file "cljs/core.cljs"} swap-global-hierarchy!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7406, :column 4, :line 7406, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7406, :column 5, :line 7406, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7406, :column 7, :line 7406, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7407, :column 4, :line 7407, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7407, :column 5, :line 7407, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7407, :column 7, :line 7407, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7407, :column 9, :line 7407, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7408, :column 7, :line 7408, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7408, :column 9, :line 7408, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7408, :column 11, :line 7408, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} max-key ^{:arglists (^{:end-column 9, :end-line 7406, :column 4, :line 7406, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7406, :column 5, :line 7406, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7406, :column 7, :line 7406, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7407, :column 4, :line 7407, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7407, :column 5, :line 7407, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7407, :column 7, :line 7407, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7407, :column 9, :line 7407, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7408, :column 7, :line 7408, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7408, :column 9, :line 7408, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7408, :column 11, :line 7408, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7406, :column 5, :line 7406, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7406, :column 7, :line 7406, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7407, :column 5, :line 7407, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7407, :column 7, :line 7407, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7407, :column 9, :line 7407, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7408, :column 7, :line 7408, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7408, :column 9, :line 7408, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7406, :column 4, :line 7406, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7406, :column 5, :line 7406, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7406, :column 7, :line 7406, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7407, :column 4, :line 7407, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7407, :column 5, :line 7407, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7407, :column 7, :line 7407, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7407, :column 9, :line 7407, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7408, :column 7, :line 7408, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7408, :column 9, :line 7408, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7408, :column 11, :line 7408, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} max-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 34, :end-line 7216, :column 29, :line 7216, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7216, :column 34, :line 7216, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7216, :column 53, :line 7216, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7216, :column 10, :line 7216, :file "cljs/core.cljs"} ->PersistentTreeSet ^{:arglists ([^{:end-column 34, :end-line 7216, :column 29, :line 7216, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7216, :column 34, :line 7216, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7216, :column 53, :line 7216, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7216, :column 10, :line 7216, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeSet [^{:end-column 34, :end-line 7216, :column 29, :line 7216, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7216, :column 34, :line 7216, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7216, :column 53, :line 7216, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 7216, :column 29, :line 7216, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7216, :column 34, :line 7216, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7216, :column 53, :line 7216, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7216, :column 10, :line 7216, :file "cljs/core.cljs"} ->PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 37, :end-line 2467, :column 33, :line 2467, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2467, :column 47, :line 2467, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2467, :column 10, :line 2467, :file "cljs/core.cljs"} ->ChunkBuffer ^{:arglists ([^{:mutable true, :end-column 37, :end-line 2467, :column 33, :line 2467, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2467, :column 47, :line 2467, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2467, :column 10, :line 2467, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:mutable true, :end-column 37, :end-line 2467, :column 33, :line 2467, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2467, :column 47, :line 2467, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 37, :end-line 2467, :column 33, :line 2467, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2467, :column 47, :line 2467, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2467, :column 10, :line 2467, :file "cljs/core.cljs"} ->ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 503, :column 19, :line 503, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 503, :column 20, :line 503, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 503, :column 7, :line 503, :file "cljs/core.cljs"} hash-string ^{:arglists (^{:end-column 22, :end-line 503, :column 19, :line 503, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 503, :column 20, :line 503, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 503, :column 7, :line 503, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 503, :column 20, :line 503, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 503, :column 19, :line 503, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 503, :column 20, :line 503, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 503, :column 7, :line 503, :file "cljs/core.cljs"} hash-string, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6978, :column 10, :line 6978, :file "cljs/core.cljs"} ValSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6978, :column 10, :line 6978, :file "cljs/core.cljs"} ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6978, :column 17, :line 6978, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6978, :column 19, :line 6978, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6978, :column 30, :line 6978, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6978, :column 35, :line 6978, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} -prefers ^{:arglists (^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} -prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3407, :column 3, :line 3407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3407, :column 4, :line 3407, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3407, :column 9, :line 3407, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3400, :column 7, :line 3400, :file "cljs/core.cljs"} set-validator! ^{:arglists (^{:end-column 13, :end-line 3407, :column 3, :line 3407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3407, :column 4, :line 3407, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3407, :column 9, :line 3407, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3400, :column 7, :line 3400, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3407, :column 4, :line 3407, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3407, :column 9, :line 3407, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3407, :column 3, :line 3407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3407, :column 4, :line 3407, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3407, :column 9, :line 3407, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3400, :column 7, :line 3400, :file "cljs/core.cljs"} set-validator!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4989, :column 34, :line 4989, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4989, :column 35, :line 4989, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4989, :column 39, :line 4989, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4989, :column 41, :line 4989, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4989, :column 8, :line 4989, :file "cljs/core.cljs"} array-map-index-of-equiv? ^{:arglists (^{:end-column 43, :end-line 4989, :column 34, :line 4989, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4989, :column 35, :line 4989, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4989, :column 39, :line 4989, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4989, :column 41, :line 4989, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4989, :column 8, :line 4989, :file "cljs/core.cljs"} {:arglists ([^{:end-column 39, :end-line 4989, :column 35, :line 4989, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4989, :column 39, :line 4989, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4989, :column 41, :line 4989, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4989, :column 34, :line 4989, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4989, :column 35, :line 4989, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4989, :column 39, :line 4989, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4989, :column 41, :line 4989, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4989, :column 8, :line 4989, :file "cljs/core.cljs"} array-map-index-of-equiv?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} -meta ^{:arglists (^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} -meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 6264, :column 10, :line 6264, :file "cljs/core.cljs"} RedNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 6469, :column 10, :line 6469, :file "cljs/core.cljs"} RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 6469, :column 18, :line 6469, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 6469, :column 19, :line 6469, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6469, :column 23, :line 6469, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6469, :column 27, :line 6469, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6469, :column 32, :line 6469, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6469, :column 48, :line 6469, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists ([^{:end-column 34, :end-line 865, :column 30, :line 865, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 46, :end-line 865, :column 44, :line 865, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 865, :column 10, :line 865, :file "cljs/core.cljs"} ->IndexedSeqIterator ^{:arglists ([^{:end-column 34, :end-line 865, :column 30, :line 865, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 46, :end-line 865, :column 44, :line 865, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 865, :column 10, :line 865, :file "cljs/core.cljs"} {:arglists (^cljs.core/IndexedSeqIterator [^{:end-column 34, :end-line 865, :column 30, :line 865, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 46, :end-line 865, :column 44, :line 865, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 865, :column 30, :line 865, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 46, :end-line 865, :column 44, :line 865, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 865, :column 10, :line 865, :file "cljs/core.cljs"} ->IndexedSeqIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} -add-method ^{:arglists (^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} -add-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 6313, :column 25, :line 6313, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6313, :column 26, :line 6313, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6313, :column 30, :line 6313, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6313, :column 34, :line 6313, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6313, :column 38, :line 6313, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6313, :column 8, :line 6313, :file "cljs/core.cljs"} balance-left-del ^{:arglists (^{:end-column 44, :end-line 6313, :column 25, :line 6313, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6313, :column 26, :line 6313, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6313, :column 30, :line 6313, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6313, :column 34, :line 6313, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6313, :column 38, :line 6313, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6313, :column 8, :line 6313, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6313, :column 26, :line 6313, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6313, :column 30, :line 6313, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6313, :column 34, :line 6313, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6313, :column 38, :line 6313, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6313, :column 25, :line 6313, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6313, :column 26, :line 6313, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6313, :column 30, :line 6313, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6313, :column 34, :line 6313, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6313, :column 38, :line 6313, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6313, :column 8, :line 6313, :file "cljs/core.cljs"} balance-left-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3374, :column 4, :line 3374, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3374, :column 5, :line 3374, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3374, :column 7, :line 3374, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3378, :column 4, :line 3378, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3378, :column 5, :line 3378, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3378, :column 7, :line 3378, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3378, :column 9, :line 3378, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3382, :column 4, :line 3382, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3382, :column 5, :line 3382, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3382, :column 9, :line 3382, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3382, :column 11, :line 3382, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3386, :column 4, :line 3386, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3386, :column 5, :line 3386, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3386, :column 7, :line 3386, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3386, :column 9, :line 3386, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3386, :column 11, :line 3386, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3386, :column 13, :line 3386, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3386, :column 15, :line 3386, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3369, :column 7, :line 3369, :file "cljs/core.cljs"} swap! ^{:arglists (^{:end-column 9, :end-line 3374, :column 4, :line 3374, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3374, :column 5, :line 3374, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3374, :column 7, :line 3374, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3378, :column 4, :line 3378, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3378, :column 5, :line 3378, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3378, :column 7, :line 3378, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3378, :column 9, :line 3378, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3382, :column 4, :line 3382, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3382, :column 5, :line 3382, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3382, :column 9, :line 3382, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3382, :column 11, :line 3382, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3386, :column 4, :line 3386, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3386, :column 5, :line 3386, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3386, :column 7, :line 3386, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3386, :column 9, :line 3386, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3386, :column 11, :line 3386, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3386, :column 13, :line 3386, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3386, :column 15, :line 3386, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3369, :column 7, :line 3369, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3374, :column 5, :line 3374, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3374, :column 7, :line 3374, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3378, :column 5, :line 3378, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3378, :column 7, :line 3378, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3378, :column 9, :line 3378, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 3382, :column 5, :line 3382, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3382, :column 9, :line 3382, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3382, :column 11, :line 3382, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 3386, :column 5, :line 3386, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3386, :column 7, :line 3386, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3386, :column 9, :line 3386, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3386, :column 11, :line 3386, :file "cljs/core.cljs"} y & ^{:end-column 20, :end-line 3386, :column 15, :line 3386, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3374, :column 4, :line 3374, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3374, :column 5, :line 3374, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3374, :column 7, :line 3374, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3378, :column 4, :line 3378, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3378, :column 5, :line 3378, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3378, :column 7, :line 3378, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3378, :column 9, :line 3378, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3382, :column 4, :line 3382, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3382, :column 5, :line 3382, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3382, :column 9, :line 3382, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3382, :column 11, :line 3382, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3386, :column 4, :line 3386, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3386, :column 5, :line 3386, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3386, :column 7, :line 3386, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3386, :column 9, :line 3386, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3386, :column 11, :line 3386, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3386, :column 13, :line 3386, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3386, :column 15, :line 3386, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3369, :column 7, :line 3369, :file "cljs/core.cljs"} swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 5083, :column 15, :line 5083, :file "cljs/core.cljs"} vals ^{:arglists (^{:end-column 13, :end-line 7035, :column 3, :line 7035, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7035, :column 4, :line 7035, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 7033, :column 7, :line 7033, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 7035, :column 4, :line 7035, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7035, :column 3, :line 7035, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7035, :column 4, :line 7035, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 7033, :column 7, :line 7033, :file "cljs/core.cljs"} vals, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} -chunked-next ^{:arglists (^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} -chunked-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1883, :column 4, :line 1883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1883, :column 5, :line 1883, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1884, :column 4, :line 1884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1884, :column 5, :line 1884, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1885, :column 4, :line 1885, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1885, :column 5, :line 1885, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1885, :column 7, :line 1885, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1885, :column 9, :line 1885, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1885, :column 11, :line 1885, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} unchecked-subtract ^{:arglists (^{:end-column 7, :end-line 1883, :column 4, :line 1883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1883, :column 5, :line 1883, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1884, :column 4, :line 1884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1884, :column 5, :line 1884, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1885, :column 4, :line 1885, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1885, :column 5, :line 1885, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1885, :column 7, :line 1885, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1885, :column 9, :line 1885, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1885, :column 11, :line 1885, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1883, :column 5, :line 1883, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1884, :column 5, :line 1884, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1885, :column 5, :line 1885, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1885, :column 7, :line 1885, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1885, :column 11, :line 1885, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1883, :column 4, :line 1883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1883, :column 5, :line 1883, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1884, :column 4, :line 1884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1884, :column 5, :line 1884, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1885, :column 4, :line 1885, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1885, :column 5, :line 1885, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1885, :column 7, :line 1885, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1885, :column 9, :line 1885, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1885, :column 11, :line 1885, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} unchecked-subtract, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5373, :column 20, :line 5373, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5373, :column 21, :line 5373, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5373, :column 25, :line 5373, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5373, :column 8, :line 5373, :file "cljs/core.cljs"} remove-pair ^{:arglists (^{:end-column 27, :end-line 5373, :column 20, :line 5373, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5373, :column 21, :line 5373, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5373, :column 25, :line 5373, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5373, :column 8, :line 5373, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 25, :end-line 5373, :column 21, :line 5373, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5373, :column 25, :line 5373, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5373, :column 20, :line 5373, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5373, :column 21, :line 5373, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5373, :column 25, :line 5373, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5373, :column 8, :line 5373, :file "cljs/core.cljs"} remove-pair, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} IMap ^{:impls (cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} IMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 34, :end-line 2938, :column 29, :line 2938, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2938, :column 44, :line 2938, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} ->SeqIter ^{:arglists ([^{:mutable true, :end-column 34, :end-line 2938, :column 29, :line 2938, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2938, :column 44, :line 2938, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} {:arglists (^cljs.core/SeqIter [^{:mutable true, :end-column 34, :end-line 2938, :column 29, :line 2938, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2938, :column 44, :line 2938, :file "cljs/core.cljs"} _next]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 34, :end-line 2938, :column 29, :line 2938, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2938, :column 44, :line 2938, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} ->SeqIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7341, :column 4, :line 7341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7341, :column 5, :line 7341, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7341, :column 16, :line 7341, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7341, :column 18, :line 7341, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7339, :column 7, :line 7339, :file "cljs/core.cljs"} sorted-set-by ^{:arglists (^{:end-column 23, :end-line 7341, :column 4, :line 7341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7341, :column 5, :line 7341, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7341, :column 16, :line 7341, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7341, :column 18, :line 7341, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7339, :column 7, :line 7339, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 7341, :column 5, :line 7341, :file "cljs/core.cljs"} comparator & ^{:end-column 23, :end-line 7341, :column 18, :line 7341, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7341, :column 4, :line 7341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7341, :column 5, :line 7341, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7341, :column 16, :line 7341, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7341, :column 18, :line 7341, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7339, :column 7, :line 7339, :file "cljs/core.cljs"} sorted-set-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 4038, :column 10, :line 4038, :file "cljs/core.cljs"} PersistentVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 4038, :column 10, :line 4038, :file "cljs/core.cljs"} PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 70, :end-line 4038, :column 27, :line 4038, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4038, :column 28, :line 4038, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4038, :column 33, :line 4038, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4038, :column 37, :line 4038, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 4038, :column 43, :line 4038, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 4038, :column 48, :line 4038, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 4038, :column 63, :line 4038, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 617, :column 18, :line 617, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 617, :column 19, :line 617, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 617, :column 7, :line 617, :file "cljs/core.cljs"} cloneable? ^{:arglists (^{:end-column 25, :end-line 617, :column 18, :line 617, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 617, :column 19, :line 617, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 617, :column 7, :line 617, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 25, :end-line 617, :column 19, :line 617, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 617, :column 18, :line 617, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 617, :column 19, :line 617, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 617, :column 7, :line 617, :file "cljs/core.cljs"} cloneable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 486, :column 20, :line 486, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 486, :column 21, :line 486, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 486, :column 7, :line 486, :file "cljs/core.cljs"} hash-string* ^{:arglists (^{:end-column 23, :end-line 486, :column 20, :line 486, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 486, :column 21, :line 486, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 486, :column 7, :line 486, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 486, :column 21, :line 486, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 486, :column 20, :line 486, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 486, :column 21, :line 486, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 486, :column 7, :line 486, :file "cljs/core.cljs"} hash-string*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5355, :column 25, :line 5355, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5355, :column 26, :line 5355, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5355, :column 30, :line 5355, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5355, :column 8, :line 5355, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5355, :column 16, :line 5355, :file "cljs/core.cljs"} key-test ^{:arglists (^{:end-column 36, :end-line 5355, :column 25, :line 5355, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5355, :column 26, :line 5355, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5355, :column 30, :line 5355, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5355, :column 8, :line 5355, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5355, :column 16, :line 5355, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 5355, :column 26, :line 5355, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5355, :column 30, :line 5355, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5355, :column 25, :line 5355, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5355, :column 26, :line 5355, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5355, :column 30, :line 5355, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5355, :column 8, :line 5355, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5355, :column 16, :line 5355, :file "cljs/core.cljs"} key-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 45, :end-line 3047, :column 37, :line 3047, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3047, :column 55, :line 3047, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3047, :column 71, :line 3047, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3047, :column 76, :line 3047, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3047, :column 10, :line 3047, :file "cljs/core.cljs"} ->LazyTransformer ^{:arglists ([^{:mutable true, :end-column 45, :end-line 3047, :column 37, :line 3047, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3047, :column 55, :line 3047, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3047, :column 71, :line 3047, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3047, :column 76, :line 3047, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3047, :column 10, :line 3047, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazyTransformer [^{:mutable true, :end-column 45, :end-line 3047, :column 37, :line 3047, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3047, :column 55, :line 3047, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3047, :column 71, :line 3047, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3047, :column 76, :line 3047, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 45, :end-line 3047, :column 37, :line 3047, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3047, :column 55, :line 3047, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3047, :column 71, :line 3047, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3047, :column 76, :line 3047, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3047, :column 10, :line 3047, :file "cljs/core.cljs"} ->LazyTransformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} -reset ^{:arglists (^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} -reset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} true? ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} true?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} array ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8008, :column 1, :line 8003, :file "cljs/core.cljs"} print ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8008, :column 1, :line 8003, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 31, :end-line 8007, :column 26, :line 8007, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8008, :column 1, :line 8003, :file "cljs/core.cljs"} print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} -peek ^{:arglists (^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} -peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} ISeq ^{:impls (cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/ChunkedSeq cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} ISeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1064, :column 3, :line 1064, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1064, :column 4, :line 1064, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1062, :column 7, :line 1062, :file "cljs/core.cljs"} empty ^{:arglists (^{:end-column 9, :end-line 1064, :column 3, :line 1064, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1064, :column 4, :line 1064, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1062, :column 7, :line 1062, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1064, :column 4, :line 1064, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1064, :column 3, :line 1064, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1064, :column 4, :line 1064, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1062, :column 7, :line 1062, :file "cljs/core.cljs"} empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 8813, :column 2, :line 8813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8813, :column 3, :line 8813, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8813, :column 11, :line 8813, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8811, :column 7, :line 8811, :file "cljs/core.cljs"} remove-method ^{:arglists (^{:end-column 24, :end-line 8813, :column 2, :line 8813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8813, :column 3, :line 8813, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8813, :column 11, :line 8813, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8811, :column 7, :line 8811, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8813, :column 3, :line 8813, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8813, :column 11, :line 8813, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8813, :column 2, :line 8813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8813, :column 3, :line 8813, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8813, :column 11, :line 8813, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8811, :column 7, :line 8811, :file "cljs/core.cljs"} remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4637, :column 10, :line 4637, :file "cljs/core.cljs"} PersistentQueueSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4637, :column 10, :line 4637, :file "cljs/core.cljs"} PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 63, :end-line 4637, :column 29, :line 4637, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4637, :column 30, :line 4637, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4637, :column 35, :line 4637, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4637, :column 41, :line 4637, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4637, :column 56, :line 4637, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 44, :end-line 6332, :column 26, :line 6332, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6332, :column 27, :line 6332, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6332, :column 31, :line 6332, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6332, :column 35, :line 6332, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6332, :column 40, :line 6332, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6332, :column 8, :line 6332, :file "cljs/core.cljs"} balance-right-del ^{:arglists (^{:end-column 44, :end-line 6332, :column 26, :line 6332, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6332, :column 27, :line 6332, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6332, :column 31, :line 6332, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6332, :column 35, :line 6332, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6332, :column 40, :line 6332, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6332, :column 8, :line 6332, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 6332, :column 27, :line 6332, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6332, :column 31, :line 6332, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6332, :column 35, :line 6332, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6332, :column 40, :line 6332, :file "cljs/core.cljs"} del]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6332, :column 26, :line 6332, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6332, :column 27, :line 6332, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6332, :column 31, :line 6332, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6332, :column 35, :line 6332, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6332, :column 40, :line 6332, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6332, :column 8, :line 6332, :file "cljs/core.cljs"} balance-right-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1732, :column 4, :line 1732, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1732, :column 5, :line 1732, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1733, :column 5, :line 1733, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1733, :column 7, :line 1733, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1734, :column 4, :line 1734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1734, :column 5, :line 1734, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1734, :column 7, :line 1734, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1734, :column 9, :line 1734, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1734, :column 11, :line 1734, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1729, :column 8, :line 1729, :file "cljs/core.cljs"} number} / ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1732, :column 4, :line 1732, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1732, :column 5, :line 1732, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1733, :column 5, :line 1733, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1733, :column 7, :line 1733, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1734, :column 4, :line 1734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1734, :column 5, :line 1734, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1734, :column 7, :line 1734, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1734, :column 9, :line 1734, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1734, :column 11, :line 1734, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1729, :column 8, :line 1729, :file "cljs/core.cljs"} number} {:arglists (^number [^{:end-column 7, :end-line 1732, :column 5, :line 1732, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1733, :column 5, :line 1733, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1733, :column 7, :line 1733, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1734, :column 5, :line 1734, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1734, :column 7, :line 1734, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1734, :column 11, :line 1734, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1732, :column 4, :line 1732, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1732, :column 5, :line 1732, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1733, :column 5, :line 1733, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1733, :column 7, :line 1733, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1734, :column 4, :line 1734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1734, :column 5, :line 1734, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1734, :column 7, :line 1734, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1734, :column 9, :line 1734, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1734, :column 11, :line 1734, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1729, :column 8, :line 1729, :file "cljs/core.cljs"} number} /, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5382, :column 15, :line 5382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5382, :column 16, :line 5382, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5382, :column 21, :line 5382, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5382, :column 8, :line 5382, :file "cljs/core.cljs"} bitpos ^{:arglists (^{:end-column 27, :end-line 5382, :column 15, :line 5382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5382, :column 16, :line 5382, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5382, :column 21, :line 5382, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5382, :column 8, :line 5382, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 5382, :column 16, :line 5382, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5382, :column 21, :line 5382, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5382, :column 15, :line 5382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5382, :column 16, :line 5382, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5382, :column 21, :line 5382, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5382, :column 8, :line 5382, :file "cljs/core.cljs"} bitpos, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1969, :column 3, :line 1969, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1969, :column 4, :line 1969, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1969, :column 6, :line 1969, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1967, :column 7, :line 1967, :file "cljs/core.cljs"} bit-or ^{:arglists (^{:end-column 8, :end-line 1969, :column 3, :line 1969, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1969, :column 4, :line 1969, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1969, :column 6, :line 1969, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1967, :column 7, :line 1967, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1969, :column 4, :line 1969, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1969, :column 6, :line 1969, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1969, :column 3, :line 1969, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1969, :column 4, :line 1969, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1969, :column 6, :line 1969, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1967, :column 7, :line 1967, :file "cljs/core.cljs"} bit-or, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 447, :column 23, :line 447, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 447, :column 24, :line 447, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 447, :column 27, :line 447, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 447, :column 8, :line 447, :file "cljs/core.cljs"} number, :end-column 23, :end-line 447, :column 15, :line 447, :file "cljs/core.cljs"} m3-fmix ^{:arglists (^{:end-column 31, :end-line 447, :column 23, :line 447, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 447, :column 24, :line 447, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 447, :column 27, :line 447, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 447, :column 8, :line 447, :file "cljs/core.cljs"} number, :end-column 23, :end-line 447, :column 15, :line 447, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 447, :column 24, :line 447, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 447, :column 27, :line 447, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 447, :column 23, :line 447, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 447, :column 24, :line 447, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 447, :column 27, :line 447, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 447, :column 8, :line 447, :file "cljs/core.cljs"} number, :end-column 23, :end-line 447, :column 15, :line 447, :file "cljs/core.cljs"} m3-fmix, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 4244, :column 14, :line 4244, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4244, :column 15, :line 4244, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4244, :column 17, :line 4244, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4244, :column 7, :line 4244, :file "cljs/core.cljs"} vector ^{:arglists (^{:end-column 22, :end-line 4244, :column 14, :line 4244, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4244, :column 15, :line 4244, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4244, :column 17, :line 4244, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4244, :column 7, :line 4244, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 22, :end-line 4244, :column 17, :line 4244, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 4244, :column 14, :line 4244, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4244, :column 15, :line 4244, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4244, :column 17, :line 4244, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4244, :column 7, :line 4244, :file "cljs/core.cljs"} vector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 855, :column 10, :line 855, :file "cljs/core.cljs"} hash-coll ^{:arglists (^{:end-column 24, :end-line 2095, :column 18, :line 2095, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2095, :column 19, :line 2095, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 2095, :column 8, :line 2095, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 2095, :column 19, :line 2095, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 2095, :column 18, :line 2095, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2095, :column 19, :line 2095, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 2095, :column 8, :line 2095, :file "cljs/core.cljs"} hash-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 5365, :column 4, :line 5365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5365, :column 5, :line 5365, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5365, :column 9, :line 5365, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5365, :column 11, :line 5365, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5368, :column 4, :line 5368, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5368, :column 5, :line 5368, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5368, :column 9, :line 5368, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5368, :column 11, :line 5368, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5368, :column 13, :line 5368, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5368, :column 15, :line 5368, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5364, :column 8, :line 5364, :file "cljs/core.cljs"} clone-and-set ^{:arglists (^{:end-column 13, :end-line 5365, :column 4, :line 5365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5365, :column 5, :line 5365, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5365, :column 9, :line 5365, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5365, :column 11, :line 5365, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5368, :column 4, :line 5368, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5368, :column 5, :line 5368, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5368, :column 9, :line 5368, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5368, :column 11, :line 5368, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5368, :column 13, :line 5368, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5368, :column 15, :line 5368, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5364, :column 8, :line 5364, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 9, :end-line 5365, :column 5, :line 5365, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5365, :column 9, :line 5365, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5365, :column 11, :line 5365, :file "cljs/core.cljs"} a] ^array [^{:end-column 9, :end-line 5368, :column 5, :line 5368, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5368, :column 9, :line 5368, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5368, :column 11, :line 5368, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5368, :column 13, :line 5368, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5368, :column 15, :line 5368, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 5365, :column 4, :line 5365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5365, :column 5, :line 5365, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5365, :column 9, :line 5365, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5365, :column 11, :line 5365, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5368, :column 4, :line 5368, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5368, :column 5, :line 5368, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5368, :column 9, :line 5368, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5368, :column 11, :line 5368, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5368, :column 13, :line 5368, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5368, :column 15, :line 5368, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5364, :column 8, :line 5364, :file "cljs/core.cljs"} clone-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 36, :end-line 5270, :column 10, :line 5270, :file "cljs/core.cljs"} array->transient-hash-map ^{:arglists (^{:end-column 43, :end-line 5342, :column 34, :line 5342, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5342, :column 35, :line 5342, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5342, :column 39, :line 5342, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 5342, :column 8, :line 5342, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj [^{:end-column 39, :end-line 5342, :column 35, :line 5342, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5342, :column 39, :line 5342, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 5342, :column 34, :line 5342, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5342, :column 35, :line 5342, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5342, :column 39, :line 5342, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 5342, :column 8, :line 5342, :file "cljs/core.cljs"} array->transient-hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1772, :column 16, :line 1772, :file "cljs/core.cljs"} >= ^{:arglists (^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1772, :column 16, :line 1772, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1772, :column 16, :line 1772, :file "cljs/core.cljs"} >=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 52, :end-line 7179, :column 38, :line 7179, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 7179, :column 10, :line 7179, :file "cljs/core.cljs"} ->TransientHashSet ^{:arglists ([^{:mutable true, :end-column 52, :end-line 7179, :column 38, :line 7179, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 7179, :column 10, :line 7179, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientHashSet [^{:mutable true, :end-column 52, :end-line 7179, :column 38, :line 7179, :file "cljs/core.cljs"} transient-map]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 52, :end-line 7179, :column 38, :line 7179, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 7179, :column 10, :line 7179, :file "cljs/core.cljs"} ->TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3626, :column 4, :line 3626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3626, :column 5, :line 3626, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3627, :column 7, :line 3627, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} drop-last ^{:arglists (^{:end-column 7, :end-line 3626, :column 4, :line 3626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3626, :column 5, :line 3626, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3627, :column 7, :line 3627, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3626, :column 5, :line 3626, :file "cljs/core.cljs"} s] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3627, :column 7, :line 3627, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3626, :column 4, :line 3626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3626, :column 5, :line 3626, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3627, :column 7, :line 3627, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} drop-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 2923, :column 21, :line 2923, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2923, :column 35, :line 2923, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2923, :column 10, :line 2923, :file "cljs/core.cljs"} ->ArrayIter ^{:arglists ([^{:end-column 25, :end-line 2923, :column 21, :line 2923, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2923, :column 35, :line 2923, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2923, :column 10, :line 2923, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayIter [^{:end-column 25, :end-line 2923, :column 21, :line 2923, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2923, :column 35, :line 2923, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 2923, :column 21, :line 2923, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2923, :column 35, :line 2923, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2923, :column 10, :line 2923, :file "cljs/core.cljs"} ->ArrayIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object? ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 29, :end-line 5908, :column 24, :line 5908, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5908, :column 35, :line 5908, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5908, :column 37, :line 5908, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5908, :column 49, :line 5908, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} ->ArrayNodeSeq ^{:arglists ([^{:end-column 29, :end-line 5908, :column 24, :line 5908, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5908, :column 35, :line 5908, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5908, :column 37, :line 5908, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5908, :column 49, :line 5908, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayNodeSeq [^{:end-column 29, :end-line 5908, :column 24, :line 5908, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5908, :column 35, :line 5908, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5908, :column 37, :line 5908, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5908, :column 49, :line 5908, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 29, :end-line 5908, :column 24, :line 5908, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5908, :column 35, :line 5908, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5908, :column 37, :line 5908, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5908, :column 49, :line 5908, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} ->ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 6629, :column 24, :line 6629, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6629, :column 25, :line 6629, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6629, :column 30, :line 6629, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6629, :column 8, :line 6629, :file "cljs/core.cljs"} tree-map-append ^{:arglists (^{:end-column 36, :end-line 6629, :column 24, :line 6629, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6629, :column 25, :line 6629, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6629, :column 30, :line 6629, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6629, :column 8, :line 6629, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6629, :column 25, :line 6629, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6629, :column 30, :line 6629, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 6629, :column 24, :line 6629, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6629, :column 25, :line 6629, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6629, :column 30, :line 6629, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6629, :column 8, :line 6629, :file "cljs/core.cljs"} tree-map-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2902, :column 3, :line 2902, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2902, :column 4, :line 2902, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2900, :column 7, :line 2900, :file "cljs/core.cljs"} not-empty ^{:arglists (^{:end-column 9, :end-line 2902, :column 3, :line 2902, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2902, :column 4, :line 2902, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2900, :column 7, :line 2900, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2902, :column 4, :line 2902, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2902, :column 3, :line 2902, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2902, :column 4, :line 2902, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2900, :column 7, :line 2900, :file "cljs/core.cljs"} not-empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7365, :column 3, :line 7365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7365, :column 4, :line 7365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7363, :column 7, :line 7363, :file "cljs/core.cljs"} distinct ^{:arglists (^{:end-column 9, :end-line 7365, :column 3, :line 7365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7365, :column 4, :line 7365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7363, :column 7, :line 7363, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 7365, :column 4, :line 7365, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7365, :column 3, :line 7365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7365, :column 4, :line 7365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7363, :column 7, :line 7363, :file "cljs/core.cljs"} distinct, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3844, :column 4, :line 3844, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3844, :column 5, :line 3844, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3844, :column 7, :line 3844, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3846, :column 4, :line 3846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3846, :column 5, :line 3846, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3846, :column 7, :line 3846, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3846, :column 12, :line 3846, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3852, :column 7, :line 3852, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3852, :column 12, :line 3852, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3852, :column 16, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3838, :column 7, :line 3838, :file "cljs/core.cljs"} partition ^{:arglists (^{:end-column 12, :end-line 3844, :column 4, :line 3844, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3844, :column 5, :line 3844, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3844, :column 7, :line 3844, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3846, :column 4, :line 3846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3846, :column 5, :line 3846, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3846, :column 7, :line 3846, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3846, :column 12, :line 3846, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3852, :column 7, :line 3852, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3852, :column 12, :line 3852, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3852, :column 16, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3838, :column 7, :line 3838, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3844, :column 5, :line 3844, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3844, :column 7, :line 3844, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3846, :column 5, :line 3846, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3846, :column 7, :line 3846, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3846, :column 12, :line 3846, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3852, :column 7, :line 3852, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3852, :column 12, :line 3852, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3852, :column 16, :line 3852, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3844, :column 4, :line 3844, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3844, :column 5, :line 3844, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3844, :column 7, :line 3844, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3846, :column 4, :line 3846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3846, :column 5, :line 3846, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3846, :column 7, :line 3846, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3846, :column 12, :line 3846, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3852, :column 7, :line 3852, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3852, :column 12, :line 3852, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3852, :column 16, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3838, :column 7, :line 3838, :file "cljs/core.cljs"} partition, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]], ^{:end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]], ^{:end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]], ^{:end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 23, :end-line 8619, :column 14, :line 8619, :file "cljs/core.cljs"} IMultiFn ^{:impls (cljs.core/MultiFn), :protocol-info {:methods {^{:end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]], ^{:end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]], ^{:end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]], ^{:end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 23, :end-line 8619, :column 14, :line 8619, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]], ^{:end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]], ^{:end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]], ^{:end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 23, :end-line 8619, :column 14, :line 8619, :file "cljs/core.cljs"} IMultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1894, :column 20, :line 1894, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1894, :column 21, :line 1894, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} fix ^{:arglists (^{:end-column 23, :end-line 1894, :column 20, :line 1894, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1894, :column 21, :line 1894, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1894, :column 21, :line 1894, :file "cljs/core.cljs"} q]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1894, :column 20, :line 1894, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1894, :column 21, :line 1894, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} fix, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} EmptyList {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 2197, :column 20, :line 2197, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 2197, :column 21, :line 2197, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} IAssociative ^{:impls (cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} IAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1982, :column 3, :line 1982, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1982, :column 4, :line 1982, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1982, :column 6, :line 1982, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1980, :column 7, :line 1980, :file "cljs/core.cljs"} bit-flip ^{:arglists (^{:end-column 8, :end-line 1982, :column 3, :line 1982, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1982, :column 4, :line 1982, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1982, :column 6, :line 1982, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1980, :column 7, :line 1980, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1982, :column 4, :line 1982, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1982, :column 6, :line 1982, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1982, :column 3, :line 1982, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1982, :column 4, :line 1982, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1982, :column 6, :line 1982, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1980, :column 7, :line 1980, :file "cljs/core.cljs"} bit-flip, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2644, :column 4, :line 2644, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2644, :column 5, :line 2644, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2648, :column 4, :line 2648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2648, :column 10, :line 2648, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2643, :column 7, :line 2643, :file "cljs/core.cljs"} long-array ^{:arglists (^{:end-column 17, :end-line 2644, :column 4, :line 2644, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2644, :column 5, :line 2644, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2648, :column 4, :line 2648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2648, :column 10, :line 2648, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2643, :column 7, :line 2643, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2644, :column 5, :line 2644, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 10, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2648, :column 10, :line 2648, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2644, :column 4, :line 2644, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2644, :column 5, :line 2644, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2648, :column 4, :line 2648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2648, :column 10, :line 2648, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2643, :column 7, :line 2643, :file "cljs/core.cljs"} long-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8509, :column 4, :line 8509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8509, :column 5, :line 8509, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8510, :column 4, :line 8510, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8510, :column 5, :line 8510, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8510, :column 7, :line 8510, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8503, :column 7, :line 8503, :file "cljs/core.cljs"} descendants ^{:arglists (^{:end-column 9, :end-line 8509, :column 4, :line 8509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8509, :column 5, :line 8509, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8510, :column 4, :line 8510, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8510, :column 5, :line 8510, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8510, :column 7, :line 8510, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8503, :column 7, :line 8503, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8509, :column 5, :line 8509, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8510, :column 5, :line 8510, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8510, :column 7, :line 8510, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8509, :column 4, :line 8509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8509, :column 5, :line 8509, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8510, :column 4, :line 8510, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8510, :column 5, :line 8510, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8510, :column 7, :line 8510, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8503, :column 7, :line 8503, :file "cljs/core.cljs"} descendants, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 425, :column 22, :line 425, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 425, :column 23, :line 425, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 425, :column 25, :line 425, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 425, :column 10, :line 425, :file "cljs/core.cljs"} number, :end-column 22, :end-line 425, :column 17, :line 425, :file "cljs/core.cljs"} imul ^{:arglists (^{:end-column 27, :end-line 426, :column 22, :line 426, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 426, :column 23, :line 426, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 426, :column 25, :line 426, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 426, :column 10, :line 426, :file "cljs/core.cljs"} number, :end-column 22, :end-line 426, :column 17, :line 426, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 426, :column 23, :line 426, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 426, :column 25, :line 426, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 426, :column 22, :line 426, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 426, :column 23, :line 426, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 426, :column 25, :line 426, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 426, :column 10, :line 426, :file "cljs/core.cljs"} number, :end-column 22, :end-line 426, :column 17, :line 426, :file "cljs/core.cljs"} imul, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 29, :end-line 8222, :column 27, :line 8222, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8222, :column 39, :line 8222, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8222, :column 10, :line 8222, :file "cljs/core.cljs"} ->Delay ^{:arglists ([^{:mutable true, :end-column 29, :end-line 8222, :column 27, :line 8222, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8222, :column 39, :line 8222, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8222, :column 10, :line 8222, :file "cljs/core.cljs"} {:arglists (^cljs.core/Delay [^{:mutable true, :end-column 29, :end-line 8222, :column 27, :line 8222, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8222, :column 39, :line 8222, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 29, :end-line 8222, :column 27, :line 8222, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8222, :column 39, :line 8222, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8222, :column 10, :line 8222, :file "cljs/core.cljs"} ->Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3987, :column 19, :line 3987, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} array-for ^{:arglists (^{:end-column 24, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3987, :column 19, :line 3987, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3987, :column 19, :line 3987, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3987, :column 19, :line 3987, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7048, :column 3, :line 7048, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7048, :column 4, :line 7048, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7048, :column 6, :line 7048, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} merge ^{:arglists (^{:end-column 11, :end-line 7048, :column 3, :line 7048, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7048, :column 4, :line 7048, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7048, :column 6, :line 7048, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7048, :column 6, :line 7048, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7048, :column 3, :line 7048, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7048, :column 4, :line 7048, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7048, :column 6, :line 7048, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} merge, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 23, :end-line 308, :column 14, :line 308, :file "cljs/core.cljs"} ISeqable ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 23, :end-line 308, :column 14, :line 308, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 23, :end-line 308, :column 14, :line 308, :file "cljs/core.cljs"} ISeqable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1930, :column 3, :line 1930, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1930, :column 4, :line 1930, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1930, :column 6, :line 1930, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1928, :column 7, :line 1928, :file "cljs/core.cljs"} js-mod ^{:arglists (^{:end-column 8, :end-line 1930, :column 3, :line 1930, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1930, :column 4, :line 1930, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1930, :column 6, :line 1930, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1928, :column 7, :line 1928, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1930, :column 4, :line 1930, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1930, :column 6, :line 1930, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1930, :column 3, :line 1930, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1930, :column 4, :line 1930, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1930, :column 6, :line 1930, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1928, :column 7, :line 1928, :file "cljs/core.cljs"} js-mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1471, :column 3, :line 1471, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} integer? ^{:arglists (^{:end-column 6, :end-line 1471, :column 3, :line 1471, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1471, :column 3, :line 1471, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} integer?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1255, :column 10, :line 1255, :file "cljs/core.cljs"} MetaFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1255, :column 10, :line 1255, :file "cljs/core.cljs"} MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 27, :end-line 1255, :column 17, :line 1255, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1255, :column 18, :line 1255, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1255, :column 22, :line 1255, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 12, :end-line 3819, :column 4, :line 3819, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3819, :column 5, :line 3819, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3819, :column 7, :line 3819, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3822, :column 7, :line 3822, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3822, :column 10, :line 3822, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3824, :column 4, :line 3824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3824, :column 5, :line 3824, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3824, :column 7, :line 3824, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3824, :column 10, :line 3824, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3824, :column 13, :line 3824, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3826, :column 4, :line 3826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3826, :column 5, :line 3826, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3826, :column 7, :line 3826, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3826, :column 10, :line 3826, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3826, :column 13, :line 3826, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3826, :column 16, :line 3826, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3826, :column 18, :line 3826, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3813, :column 7, :line 3813, :file "cljs/core.cljs"} mapv ^{:arglists (^{:end-column 12, :end-line 3819, :column 4, :line 3819, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3819, :column 5, :line 3819, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3819, :column 7, :line 3819, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3822, :column 7, :line 3822, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3822, :column 10, :line 3822, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3824, :column 4, :line 3824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3824, :column 5, :line 3824, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3824, :column 7, :line 3824, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3824, :column 10, :line 3824, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3824, :column 13, :line 3824, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3826, :column 4, :line 3826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3826, :column 5, :line 3826, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3826, :column 7, :line 3826, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3826, :column 10, :line 3826, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3826, :column 13, :line 3826, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3826, :column 16, :line 3826, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3826, :column 18, :line 3826, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3813, :column 7, :line 3813, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 7, :end-line 3819, :column 5, :line 3819, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3819, :column 7, :line 3819, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3822, :column 7, :line 3822, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3822, :column 10, :line 3822, :file "cljs/core.cljs"} c2] [^{:end-column 7, :end-line 3824, :column 5, :line 3824, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3824, :column 7, :line 3824, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3824, :column 10, :line 3824, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3824, :column 13, :line 3824, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 3826, :column 5, :line 3826, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3826, :column 7, :line 3826, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3826, :column 10, :line 3826, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3826, :column 13, :line 3826, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 3826, :column 18, :line 3826, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3819, :column 4, :line 3819, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3819, :column 5, :line 3819, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3819, :column 7, :line 3819, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3822, :column 7, :line 3822, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3822, :column 10, :line 3822, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3824, :column 4, :line 3824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3824, :column 5, :line 3824, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3824, :column 7, :line 3824, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3824, :column 10, :line 3824, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3824, :column 13, :line 3824, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3826, :column 4, :line 3826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3826, :column 5, :line 3826, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3826, :column 7, :line 3826, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3826, :column 10, :line 3826, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3826, :column 13, :line 3826, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3826, :column 16, :line 3826, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3826, :column 18, :line 3826, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3813, :column 7, :line 3813, :file "cljs/core.cljs"} mapv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7453, :column 4, :line 7453, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7453, :column 5, :line 7453, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7453, :column 7, :line 7453, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7455, :column 4, :line 7455, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7455, :column 5, :line 7455, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7455, :column 7, :line 7455, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7455, :column 12, :line 7455, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7429, :column 7, :line 7429, :file "cljs/core.cljs"} partition-all ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7453, :column 4, :line 7453, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7453, :column 5, :line 7453, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7453, :column 7, :line 7453, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7455, :column 4, :line 7455, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7455, :column 5, :line 7455, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7455, :column 7, :line 7455, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7455, :column 12, :line 7455, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7429, :column 7, :line 7429, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} n] [^{:end-column 7, :end-line 7453, :column 5, :line 7453, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7453, :column 7, :line 7453, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7455, :column 5, :line 7455, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7455, :column 7, :line 7455, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7455, :column 12, :line 7455, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7453, :column 4, :line 7453, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7453, :column 5, :line 7453, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7453, :column 7, :line 7453, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7455, :column 4, :line 7455, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7455, :column 5, :line 7455, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7455, :column 7, :line 7455, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7455, :column 12, :line 7455, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7429, :column 7, :line 7429, :file "cljs/core.cljs"} partition-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7680, :column 4, :line 7680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7680, :column 5, :line 7680, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7680, :column 7, :line 7680, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7647, :column 7, :line 7647, :file "cljs/core.cljs"} partition-by ^{:arglists (^{:end-column 7, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7680, :column 4, :line 7680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7680, :column 5, :line 7680, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7680, :column 7, :line 7680, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7647, :column 7, :line 7647, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7680, :column 5, :line 7680, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7680, :column 7, :line 7680, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7680, :column 4, :line 7680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7680, :column 5, :line 7680, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7680, :column 7, :line 7680, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7647, :column 7, :line 7647, :file "cljs/core.cljs"} partition-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 47, :end-line 4981, :column 38, :line 4981, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4981, :column 39, :line 4981, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4981, :column 43, :line 4981, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4981, :column 45, :line 4981, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4981, :column 8, :line 4981, :file "cljs/core.cljs"} array-map-index-of-identical? ^{:arglists (^{:end-column 47, :end-line 4981, :column 38, :line 4981, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4981, :column 39, :line 4981, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4981, :column 43, :line 4981, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4981, :column 45, :line 4981, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4981, :column 8, :line 4981, :file "cljs/core.cljs"} {:arglists ([^{:end-column 43, :end-line 4981, :column 39, :line 4981, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4981, :column 43, :line 4981, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4981, :column 45, :line 4981, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 47, :end-line 4981, :column 38, :line 4981, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4981, :column 39, :line 4981, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4981, :column 43, :line 4981, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4981, :column 45, :line 4981, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4981, :column 8, :line 4981, :file "cljs/core.cljs"} array-map-index-of-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 26, :end-line 311, :column 14, :line 311, :file "cljs/core.cljs"} ISequential ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 26, :end-line 311, :column 14, :line 311, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 26, :end-line 311, :column 14, :line 311, :file "cljs/core.cljs"} ISequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 2401, :column 19, :line 2401, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2401, :column 34, :line 2401, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2401, :column 47, :line 2401, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2401, :column 59, :line 2401, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2401, :column 10, :line 2401, :file "cljs/core.cljs"} ->LazySeq ^{:arglists ([^{:end-column 24, :end-line 2401, :column 19, :line 2401, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2401, :column 34, :line 2401, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2401, :column 47, :line 2401, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2401, :column 59, :line 2401, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2401, :column 10, :line 2401, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 24, :end-line 2401, :column 19, :line 2401, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2401, :column 34, :line 2401, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2401, :column 47, :line 2401, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2401, :column 59, :line 2401, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 2401, :column 19, :line 2401, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2401, :column 34, :line 2401, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2401, :column 47, :line 2401, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2401, :column 59, :line 2401, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2401, :column 10, :line 2401, :file "cljs/core.cljs"} ->LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 4743, :column 3, :line 4743, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4743, :column 4, :line 4743, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4743, :column 6, :line 4743, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4740, :column 8, :line 4740, :file "cljs/core.cljs"} equiv-map ^{:arglists (^{:end-column 8, :end-line 4743, :column 3, :line 4743, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4743, :column 4, :line 4743, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4743, :column 6, :line 4743, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4740, :column 8, :line 4740, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 4743, :column 4, :line 4743, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4743, :column 6, :line 4743, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 4743, :column 3, :line 4743, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4743, :column 4, :line 4743, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4743, :column 6, :line 4743, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4740, :column 8, :line 4740, :file "cljs/core.cljs"} equiv-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2684, :column 5, :line 2684, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2688, :column 10, :line 2688, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} object-array ^{:arglists (^{:end-column 17, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2684, :column 5, :line 2684, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2688, :column 10, :line 2688, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2684, :column 5, :line 2684, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 10, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2688, :column 10, :line 2688, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2684, :column 5, :line 2684, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2688, :column 10, :line 2688, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} object-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 76, :column 20, :line 76, :file "cljs/core.cljs"} Keyword {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2340, :column 10, :line 2340, :file "cljs/core.cljs"} Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 47, :end-line 2340, :column 18, :line 2340, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2340, :column 19, :line 2340, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2340, :column 22, :line 2340, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2340, :column 27, :line 2340, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2340, :column 41, :line 2340, :file "cljs/core.cljs"} _hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 16, :end-line 8518, :column 4, :line 8518, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8518, :column 5, :line 8518, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8518, :column 9, :line 8518, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8522, :column 4, :line 8522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8522, :column 5, :line 8522, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8522, :column 7, :line 8522, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8522, :column 11, :line 8522, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8512, :column 7, :line 8512, :file "cljs/core.cljs"} derive ^{:arglists (^{:end-column 16, :end-line 8518, :column 4, :line 8518, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8518, :column 5, :line 8518, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8518, :column 9, :line 8518, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8522, :column 4, :line 8522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8522, :column 5, :line 8522, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8522, :column 7, :line 8522, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8522, :column 11, :line 8522, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8512, :column 7, :line 8512, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 8518, :column 5, :line 8518, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8518, :column 9, :line 8518, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8522, :column 5, :line 8522, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8522, :column 7, :line 8522, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8522, :column 11, :line 8522, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8518, :column 4, :line 8518, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8518, :column 5, :line 8518, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8518, :column 9, :line 8518, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8522, :column 4, :line 8522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8522, :column 5, :line 8522, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8522, :column 7, :line 8522, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8522, :column 11, :line 8522, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8512, :column 7, :line 8512, :file "cljs/core.cljs"} derive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 17, :line 2956, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} seq-iter ^{:arglists (^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 17, :line 2956, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} {:arglists (^cljs.core/SeqIter [^{:end-column 22, :end-line 2956, :column 17, :line 2956, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 17, :line 2956, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} seq-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]], ^{:end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 375, :column 14, :line 375, :file "cljs/core.cljs"} IChunkedSeq ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons), :protocol-info {:methods {^{:end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]], ^{:end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 375, :column 14, :line 375, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]], ^{:end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 375, :column 14, :line 375, :file "cljs/core.cljs"} IChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 8903, :column 32, :line 8903, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8903, :column 33, :line 8903, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8903, :column 8, :line 8903, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8903, :column 16, :line 8903, :file "cljs/core.cljs"} special-symbol? ^{:arglists (^{:end-column 35, :end-line 8903, :column 32, :line 8903, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8903, :column 33, :line 8903, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8903, :column 8, :line 8903, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8903, :column 16, :line 8903, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 35, :end-line 8903, :column 33, :line 8903, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 8903, :column 32, :line 8903, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8903, :column 33, :line 8903, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8903, :column 8, :line 8903, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8903, :column 16, :line 8903, :file "cljs/core.cljs"} special-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8500, :column 5, :line 8500, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8501, :column 5, :line 8501, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8501, :column 7, :line 8501, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8495, :column 7, :line 8495, :file "cljs/core.cljs"} ancestors ^{:arglists (^{:end-column 9, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8500, :column 5, :line 8500, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8501, :column 5, :line 8501, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8501, :column 7, :line 8501, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8495, :column 7, :line 8495, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8500, :column 5, :line 8500, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8501, :column 5, :line 8501, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8501, :column 7, :line 8501, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8500, :column 5, :line 8500, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8501, :column 5, :line 8501, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8501, :column 7, :line 8501, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8495, :column 7, :line 8495, :file "cljs/core.cljs"} ancestors, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7489, :column 4, :line 7489, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7489, :column 5, :line 7489, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7489, :column 8, :line 7489, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7489, :column 13, :line 7489, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7495, :column 4, :line 7495, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7495, :column 8, :line 7495, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7495, :column 19, :line 7495, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7495, :column 29, :line 7495, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7495, :column 38, :line 7495, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7485, :column 7, :line 7485, :file "cljs/core.cljs"} subseq ^{:arglists (^{:end-column 17, :end-line 7489, :column 4, :line 7489, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7489, :column 5, :line 7489, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7489, :column 8, :line 7489, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7489, :column 13, :line 7489, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7495, :column 4, :line 7495, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7495, :column 8, :line 7495, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7495, :column 19, :line 7495, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7495, :column 29, :line 7495, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7495, :column 38, :line 7495, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7485, :column 7, :line 7485, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7489, :column 5, :line 7489, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7489, :column 8, :line 7489, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7489, :column 13, :line 7489, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7495, :column 8, :line 7495, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7495, :column 19, :line 7495, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7495, :column 29, :line 7495, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7495, :column 38, :line 7495, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7489, :column 4, :line 7489, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7489, :column 5, :line 7489, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7489, :column 8, :line 7489, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7489, :column 13, :line 7489, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7495, :column 4, :line 7495, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7495, :column 8, :line 7495, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7495, :column 19, :line 7495, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7495, :column 29, :line 7495, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7495, :column 38, :line 7495, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7485, :column 7, :line 7485, :file "cljs/core.cljs"} subseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 2968, :column 10, :line 2968, :file "cljs/core.cljs"} LazyTransformer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3047, :column 10, :line 3047, :file "cljs/core.cljs"} LazyTransformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 81, :end-line 3047, :column 26, :line 3047, :file "cljs/core.cljs"} [^{:mutable true, :end-column 45, :end-line 3047, :column 37, :line 3047, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3047, :column 55, :line 3047, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3047, :column 71, :line 3047, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3047, :column 76, :line 3047, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8209, :column 4, :line 8209, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8210, :column 4, :line 8210, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8210, :column 5, :line 8210, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8205, :column 7, :line 8205, :file "cljs/core.cljs"} gensym ^{:arglists (^{:end-column 6, :end-line 8209, :column 4, :line 8209, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8210, :column 4, :line 8210, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8210, :column 5, :line 8210, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8205, :column 7, :line 8205, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 19, :end-line 8210, :column 5, :line 8210, :file "cljs/core.cljs"} prefix-string]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8209, :column 4, :line 8209, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8210, :column 4, :line 8210, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8210, :column 5, :line 8210, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8205, :column 7, :line 8205, :file "cljs/core.cljs"} gensym, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} -next ^{:arglists (^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} -next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 34, :end-line 5731, :column 29, :line 5731, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5732, :column 39, :line 5732, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5733, :column 39, :line 5733, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5734, :column 39, :line 5734, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5731, :column 10, :line 5731, :file "cljs/core.cljs"} ->HashCollisionNode ^{:arglists ([^{:end-column 34, :end-line 5731, :column 29, :line 5731, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5732, :column 39, :line 5732, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5733, :column 39, :line 5733, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5734, :column 39, :line 5734, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5731, :column 10, :line 5731, :file "cljs/core.cljs"} {:arglists (^cljs.core/HashCollisionNode [^{:end-column 34, :end-line 5731, :column 29, :line 5731, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5732, :column 39, :line 5732, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5733, :column 39, :line 5733, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5734, :column 39, :line 5734, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 5731, :column 29, :line 5731, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5732, :column 39, :line 5732, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5733, :column 39, :line 5733, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5734, :column 39, :line 5734, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5731, :column 10, :line 5731, :file "cljs/core.cljs"} ->HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8236, :column 3, :line 8236, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8236, :column 4, :line 8236, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8234, :column 8, :line 8234, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8234, :column 16, :line 8234, :file "cljs/core.cljs"} delay? ^{:arglists (^{:end-column 6, :end-line 8236, :column 3, :line 8236, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8236, :column 4, :line 8236, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8234, :column 8, :line 8234, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8234, :column 16, :line 8234, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 8236, :column 4, :line 8236, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8236, :column 3, :line 8236, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8236, :column 4, :line 8236, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8234, :column 8, :line 8234, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8234, :column 16, :line 8234, :file "cljs/core.cljs"} delay?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 5353, :column 10, :line 5353, :file "cljs/core.cljs"} create-inode-seq ^{:arglists (^{:end-column 11, :end-line 5892, :column 4, :line 5892, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5892, :column 5, :line 5892, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5894, :column 4, :line 5894, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5894, :column 5, :line 5894, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5894, :column 11, :line 5894, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5894, :column 13, :line 5894, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5891, :column 8, :line 5891, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5892, :column 5, :line 5892, :file "cljs/core.cljs"} nodes] [^{:end-column 11, :end-line 5894, :column 5, :line 5894, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5894, :column 11, :line 5894, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5894, :column 13, :line 5894, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5892, :column 4, :line 5892, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5892, :column 5, :line 5892, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5894, :column 4, :line 5894, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5894, :column 5, :line 5894, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5894, :column 11, :line 5894, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5894, :column 13, :line 5894, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5891, :column 8, :line 5891, :file "cljs/core.cljs"} create-inode-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3795, :column 3, :line 3795, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3795, :column 4, :line 3795, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3791, :column 7, :line 3791, :file "cljs/core.cljs"} flatten ^{:arglists (^{:end-column 6, :end-line 3795, :column 3, :line 3795, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3795, :column 4, :line 3795, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3791, :column 7, :line 3791, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3795, :column 4, :line 3795, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3795, :column 3, :line 3795, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3795, :column 4, :line 3795, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3791, :column 7, :line 3791, :file "cljs/core.cljs"} flatten, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} -dissoc ^{:arglists (^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} -dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1925, :column 15, :line 1925, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1925, :column 16, :line 1925, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1925, :column 7, :line 1925, :file "cljs/core.cljs"} doubles ^{:arglists (^{:end-column 18, :end-line 1925, :column 15, :line 1925, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1925, :column 16, :line 1925, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1925, :column 7, :line 1925, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 1925, :column 16, :line 1925, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1925, :column 15, :line 1925, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1925, :column 16, :line 1925, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1925, :column 7, :line 1925, :file "cljs/core.cljs"} doubles, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} -contains-key? ^{:arglists (^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} -contains-key?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 8198, :column 3, :line 8198, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8198, :column 4, :line 8198, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8198, :column 9, :line 8198, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} remove-watch ^{:arglists (^{:end-column 13, :end-line 8198, :column 3, :line 8198, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8198, :column 4, :line 8198, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8198, :column 9, :line 8198, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8198, :column 4, :line 8198, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8198, :column 9, :line 8198, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 8198, :column 3, :line 8198, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8198, :column 4, :line 8198, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8198, :column 9, :line 8198, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 8867, :column 4, :line 8867, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8867, :column 5, :line 8867, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8867, :column 9, :line 8867, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8869, :column 4, :line 8869, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8869, :column 5, :line 8869, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8869, :column 9, :line 8869, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8869, :column 13, :line 8869, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8863, :column 7, :line 8863, :file "cljs/core.cljs"} ex-info ^{:arglists (^{:end-column 13, :end-line 8867, :column 4, :line 8867, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8867, :column 5, :line 8867, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8867, :column 9, :line 8867, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8869, :column 4, :line 8869, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8869, :column 5, :line 8869, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8869, :column 9, :line 8869, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8869, :column 13, :line 8869, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8863, :column 7, :line 8863, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 8867, :column 5, :line 8867, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8867, :column 9, :line 8867, :file "cljs/core.cljs"} map] ^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 8869, :column 5, :line 8869, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8869, :column 9, :line 8869, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8869, :column 13, :line 8869, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 8867, :column 4, :line 8867, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8867, :column 5, :line 8867, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8867, :column 9, :line 8867, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8869, :column 4, :line 8869, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8869, :column 5, :line 8869, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8869, :column 9, :line 8869, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8869, :column 13, :line 8869, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8863, :column 7, :line 8863, :file "cljs/core.cljs"} ex-info, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1466, :column 21, :line 1466, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1466, :column 22, :line 1466, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1466, :column 8, :line 1466, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1466, :column 16, :line 1466, :file "cljs/core.cljs"} ifn? ^{:arglists (^{:end-column 24, :end-line 1466, :column 21, :line 1466, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1466, :column 22, :line 1466, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1466, :column 8, :line 1466, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1466, :column 16, :line 1466, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1253, :column 8, :line 1253, :file "cljs/core.cljs"} boolean [^{:end-column 24, :end-line 1466, :column 22, :line 1466, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1466, :column 21, :line 1466, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1466, :column 22, :line 1466, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1466, :column 8, :line 1466, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1466, :column 16, :line 1466, :file "cljs/core.cljs"} ifn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} IAtom ^{:impls (cljs.core/Atom), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} IAtom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 32, :end-line 4675, :column 27, :line 4675, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4675, :column 32, :line 4675, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4675, :column 38, :line 4675, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4675, :column 44, :line 4675, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4675, :column 59, :line 4675, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4675, :column 10, :line 4675, :file "cljs/core.cljs"} ->PersistentQueue ^{:arglists ([^{:end-column 32, :end-line 4675, :column 27, :line 4675, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4675, :column 32, :line 4675, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4675, :column 38, :line 4675, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4675, :column 44, :line 4675, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4675, :column 59, :line 4675, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4675, :column 10, :line 4675, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentQueue [^{:end-column 32, :end-line 4675, :column 27, :line 4675, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4675, :column 32, :line 4675, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4675, :column 38, :line 4675, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4675, :column 44, :line 4675, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4675, :column 59, :line 4675, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 32, :end-line 4675, :column 27, :line 4675, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4675, :column 32, :line 4675, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4675, :column 38, :line 4675, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4675, :column 44, :line 4675, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4675, :column 59, :line 4675, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4675, :column 10, :line 4675, :file "cljs/core.cljs"} ->PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]], ^{:end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]], ^{:end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 25, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IWatchable ^{:impls (cljs.core/Atom), :protocol-info {:methods {^{:end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]], ^{:end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]], ^{:end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 25, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]], ^{:end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]], ^{:end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 25, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IWatchable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 2973, :column 19, :line 2973, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2973, :column 25, :line 2973, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} ->Stepper ^{:arglists ([^{:end-column 25, :end-line 2973, :column 19, :line 2973, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2973, :column 25, :line 2973, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} {:arglists (^cljs.core/Stepper [^{:end-column 25, :end-line 2973, :column 19, :line 2973, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2973, :column 25, :line 2973, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 2973, :column 19, :line 2973, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2973, :column 25, :line 2973, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} ->Stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 3921, :column 22, :line 3921, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3921, :column 23, :line 3921, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3921, :column 8, :line 3921, :file "cljs/core.cljs"} pv-fresh-node ^{:arglists (^{:end-column 28, :end-line 3921, :column 22, :line 3921, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3921, :column 23, :line 3921, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3921, :column 8, :line 3921, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3921, :column 23, :line 3921, :file "cljs/core.cljs"} edit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3921, :column 22, :line 3921, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3921, :column 23, :line 3921, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3921, :column 8, :line 3921, :file "cljs/core.cljs"} pv-fresh-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 4249, :column 10, :line 4249, :file "cljs/core.cljs"} subvec ^{:arglists (^{:end-column 13, :end-line 4444, :column 4, :line 4444, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4444, :column 5, :line 4444, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4444, :column 7, :line 4444, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4446, :column 4, :line 4446, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4446, :column 5, :line 4446, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4446, :column 7, :line 4446, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4446, :column 13, :line 4446, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 4438, :column 7, :line 4438, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 4444, :column 5, :line 4444, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4444, :column 7, :line 4444, :file "cljs/core.cljs"} start] ^cljs.core/Subvec [^{:end-column 7, :end-line 4446, :column 5, :line 4446, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4446, :column 7, :line 4446, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4446, :column 13, :line 4446, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 4444, :column 4, :line 4444, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4444, :column 5, :line 4444, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4444, :column 7, :line 4444, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4446, :column 4, :line 4446, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4446, :column 5, :line 4446, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4446, :column 7, :line 4446, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4446, :column 13, :line 4446, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 4438, :column 7, :line 4438, :file "cljs/core.cljs"} subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -pop! ^{:arglists (^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3221, :column 4, :line 3221, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3221, :column 5, :line 3221, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3221, :column 7, :line 3221, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3223, :column 4, :line 3223, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3223, :column 5, :line 3223, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3223, :column 7, :line 3223, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3223, :column 12, :line 3223, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3225, :column 4, :line 3225, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3225, :column 5, :line 3225, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3225, :column 12, :line 3225, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3225, :column 17, :line 3225, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3227, :column 4, :line 3227, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3227, :column 5, :line 3227, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3227, :column 7, :line 3227, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3227, :column 12, :line 3227, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3227, :column 17, :line 3227, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3227, :column 22, :line 3227, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3227, :column 24, :line 3227, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3216, :column 7, :line 3216, :file "cljs/core.cljs"} partial ^{:arglists (^{:end-column 7, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3221, :column 4, :line 3221, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3221, :column 5, :line 3221, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3221, :column 7, :line 3221, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3223, :column 4, :line 3223, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3223, :column 5, :line 3223, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3223, :column 7, :line 3223, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3223, :column 12, :line 3223, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3225, :column 4, :line 3225, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3225, :column 5, :line 3225, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3225, :column 12, :line 3225, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3225, :column 17, :line 3225, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3227, :column 4, :line 3227, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3227, :column 5, :line 3227, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3227, :column 7, :line 3227, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3227, :column 12, :line 3227, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3227, :column 17, :line 3227, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3227, :column 22, :line 3227, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3227, :column 24, :line 3227, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3216, :column 7, :line 3216, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 3221, :column 5, :line 3221, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3221, :column 7, :line 3221, :file "cljs/core.cljs"} arg1] ^function [^{:end-column 7, :end-line 3223, :column 5, :line 3223, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3223, :column 7, :line 3223, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3223, :column 12, :line 3223, :file "cljs/core.cljs"} arg2] ^function [^{:end-column 7, :end-line 3225, :column 5, :line 3225, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3225, :column 12, :line 3225, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3225, :column 17, :line 3225, :file "cljs/core.cljs"} arg3] ^function [^{:end-column 7, :end-line 3227, :column 5, :line 3227, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3227, :column 7, :line 3227, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3227, :column 12, :line 3227, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3227, :column 17, :line 3227, :file "cljs/core.cljs"} arg3 & ^{:end-column 29, :end-line 3227, :column 24, :line 3227, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3221, :column 4, :line 3221, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3221, :column 5, :line 3221, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3221, :column 7, :line 3221, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3223, :column 4, :line 3223, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3223, :column 5, :line 3223, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3223, :column 7, :line 3223, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3223, :column 12, :line 3223, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3225, :column 4, :line 3225, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3225, :column 5, :line 3225, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3225, :column 12, :line 3225, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3225, :column 17, :line 3225, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3227, :column 4, :line 3227, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3227, :column 5, :line 3227, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3227, :column 7, :line 3227, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3227, :column 12, :line 3227, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3227, :column 17, :line 3227, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3227, :column 22, :line 3227, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3227, :column 24, :line 3227, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3216, :column 7, :line 3216, :file "cljs/core.cljs"} partial, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1403, :column 3, :line 1403, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1402, :column 8, :line 1402, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1402, :column 16, :line 1402, :file "cljs/core.cljs"} chunked-seq? ^{:arglists (^{:end-column 6, :end-line 1403, :column 3, :line 1403, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1402, :column 8, :line 1402, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1402, :column 16, :line 1402, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1403, :column 3, :line 1403, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1402, :column 8, :line 1402, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1402, :column 16, :line 1402, :file "cljs/core.cljs"} chunked-seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3681, :column 3, :line 3681, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3681, :column 4, :line 3681, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3681, :column 6, :line 3681, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3679, :column 7, :line 3679, :file "cljs/core.cljs"} replicate ^{:arglists (^{:end-column 8, :end-line 3681, :column 3, :line 3681, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3681, :column 4, :line 3681, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3681, :column 6, :line 3681, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3679, :column 7, :line 3679, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3681, :column 4, :line 3681, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3681, :column 6, :line 3681, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3681, :column 3, :line 3681, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3681, :column 4, :line 3681, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3681, :column 6, :line 3681, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3679, :column 7, :line 3679, :file "cljs/core.cljs"} replicate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4675, :column 10, :line 4675, :file "cljs/core.cljs"} PersistentQueue {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4675, :column 10, :line 4675, :file "cljs/core.cljs"} PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 4675, :column 26, :line 4675, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4675, :column 27, :line 4675, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4675, :column 32, :line 4675, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4675, :column 38, :line 4675, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4675, :column 44, :line 4675, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4675, :column 59, :line 4675, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 9, :end-line 7413, :column 4, :line 7413, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7413, :column 5, :line 7413, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7413, :column 7, :line 7413, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7414, :column 7, :line 7414, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7414, :column 9, :line 7414, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7415, :column 4, :line 7415, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7415, :column 5, :line 7415, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7415, :column 7, :line 7415, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7415, :column 9, :line 7415, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7415, :column 11, :line 7415, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7415, :column 13, :line 7415, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7411, :column 7, :line 7411, :file "cljs/core.cljs"} min-key ^{:arglists (^{:end-column 9, :end-line 7413, :column 4, :line 7413, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7413, :column 5, :line 7413, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7413, :column 7, :line 7413, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7414, :column 7, :line 7414, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7414, :column 9, :line 7414, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7415, :column 4, :line 7415, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7415, :column 5, :line 7415, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7415, :column 7, :line 7415, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7415, :column 9, :line 7415, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7415, :column 11, :line 7415, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7415, :column 13, :line 7415, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7411, :column 7, :line 7411, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7413, :column 5, :line 7413, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7413, :column 7, :line 7413, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7414, :column 7, :line 7414, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7414, :column 9, :line 7414, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 7415, :column 5, :line 7415, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7415, :column 7, :line 7415, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7415, :column 9, :line 7415, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 7415, :column 13, :line 7415, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7413, :column 4, :line 7413, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7413, :column 5, :line 7413, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7413, :column 7, :line 7413, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7414, :column 7, :line 7414, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7414, :column 9, :line 7414, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7415, :column 4, :line 7415, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7415, :column 5, :line 7415, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7415, :column 7, :line 7415, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7415, :column 9, :line 7415, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7415, :column 11, :line 7415, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7415, :column 13, :line 7415, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7411, :column 7, :line 7411, :file "cljs/core.cljs"} min-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2115, :column 18, :line 2115, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2115, :column 19, :line 2115, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2115, :column 8, :line 2115, :file "cljs/core.cljs"} hash-iset ^{:arglists (^{:end-column 21, :end-line 2115, :column 18, :line 2115, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2115, :column 19, :line 2115, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2115, :column 8, :line 2115, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 2115, :column 19, :line 2115, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2115, :column 18, :line 2115, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2115, :column 19, :line 2115, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2115, :column 8, :line 2115, :file "cljs/core.cljs"} hash-iset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 777, :column 3, :line 777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 777, :column 4, :line 777, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 775, :column 7, :line 775, :file "cljs/core.cljs"} reduced ^{:arglists (^{:end-column 6, :end-line 777, :column 3, :line 777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 777, :column 4, :line 777, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 775, :column 7, :line 775, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 6, :end-line 777, :column 4, :line 777, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 777, :column 3, :line 777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 777, :column 4, :line 777, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 775, :column 7, :line 775, :file "cljs/core.cljs"} reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7781, :column 3, :line 7781, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7781, :column 4, :line 7781, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7781, :column 7, :line 7781, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7779, :column 7, :line 7779, :file "cljs/core.cljs"} re-matches ^{:arglists (^{:end-column 9, :end-line 7781, :column 3, :line 7781, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7781, :column 4, :line 7781, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7781, :column 7, :line 7781, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7779, :column 7, :line 7779, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7781, :column 4, :line 7781, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7781, :column 7, :line 7781, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7781, :column 3, :line 7781, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7781, :column 4, :line 7781, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7781, :column 7, :line 7781, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7779, :column 7, :line 7779, :file "cljs/core.cljs"} re-matches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6877, :column 3, :line 6877, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6877, :column 4, :line 6877, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6877, :column 6, :line 6877, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6874, :column 7, :line 6874, :file "cljs/core.cljs"} array-map ^{:arglists (^{:end-column 14, :end-line 6877, :column 3, :line 6877, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6877, :column 4, :line 6877, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6877, :column 6, :line 6877, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6874, :column 7, :line 6874, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMap [& ^{:end-column 14, :end-line 6877, :column 6, :line 6877, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6877, :column 3, :line 6877, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6877, :column 4, :line 6877, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6877, :column 6, :line 6877, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6874, :column 7, :line 6874, :file "cljs/core.cljs"} array-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 28, :end-line 366, :column 14, :line 366, :file "cljs/core.cljs"} ITransientSet ^{:impls (cljs.core/TransientHashSet), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 28, :end-line 366, :column 14, :line 366, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 28, :end-line 366, :column 14, :line 366, :file "cljs/core.cljs"} ITransientSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1816, :column 30, :line 1816, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1816, :column 31, :line 1816, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1816, :column 8, :line 1816, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1816, :column 15, :line 1816, :file "cljs/core.cljs"} unchecked-byte ^{:arglists (^{:end-column 33, :end-line 1816, :column 30, :line 1816, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1816, :column 31, :line 1816, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1816, :column 8, :line 1816, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1816, :column 15, :line 1816, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1816, :column 31, :line 1816, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1816, :column 30, :line 1816, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1816, :column 31, :line 1816, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1816, :column 8, :line 1816, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1816, :column 15, :line 1816, :file "cljs/core.cljs"} unchecked-byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 5412, :column 10, :line 5412, :file "cljs/core.cljs"} ArrayNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 5625, :column 10, :line 5625, :file "cljs/core.cljs"} ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 5625, :column 20, :line 5625, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 5625, :column 21, :line 5625, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5625, :column 36, :line 5625, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5625, :column 50, :line 5625, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists ([^{:end-column 26, :end-line 4251, :column 22, :line 4251, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4251, :column 26, :line 4251, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4251, :column 31, :line 4251, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4251, :column 33, :line 4251, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4251, :column 37, :line 4251, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4251, :column 52, :line 4251, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 4251, :column 10, :line 4251, :file "cljs/core.cljs"} ->ChunkedSeq ^{:arglists ([^{:end-column 26, :end-line 4251, :column 22, :line 4251, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4251, :column 26, :line 4251, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4251, :column 31, :line 4251, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4251, :column 33, :line 4251, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4251, :column 37, :line 4251, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4251, :column 52, :line 4251, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 4251, :column 10, :line 4251, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 26, :end-line 4251, :column 22, :line 4251, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4251, :column 26, :line 4251, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4251, :column 31, :line 4251, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4251, :column 33, :line 4251, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4251, :column 37, :line 4251, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4251, :column 52, :line 4251, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 4251, :column 22, :line 4251, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4251, :column 26, :line 4251, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4251, :column 31, :line 4251, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4251, :column 33, :line 4251, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4251, :column 37, :line 4251, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4251, :column 52, :line 4251, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 4251, :column 10, :line 4251, :file "cljs/core.cljs"} ->ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3456, :column 4, :line 3456, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3456, :column 5, :line 3456, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3464, :column 4, :line 3464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3464, :column 5, :line 3464, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3464, :column 8, :line 3464, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3472, :column 4, :line 3472, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3472, :column 5, :line 3472, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3472, :column 8, :line 3472, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3472, :column 11, :line 3472, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3480, :column 4, :line 3480, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3480, :column 5, :line 3480, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3480, :column 8, :line 3480, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3480, :column 11, :line 3480, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3480, :column 14, :line 3480, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3480, :column 16, :line 3480, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3451, :column 7, :line 3451, :file "cljs/core.cljs"} every-pred ^{:arglists (^{:end-column 7, :end-line 3456, :column 4, :line 3456, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3456, :column 5, :line 3456, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3464, :column 4, :line 3464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3464, :column 5, :line 3464, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3464, :column 8, :line 3464, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3472, :column 4, :line 3472, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3472, :column 5, :line 3472, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3472, :column 8, :line 3472, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3472, :column 11, :line 3472, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3480, :column 4, :line 3480, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3480, :column 5, :line 3480, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3480, :column 8, :line 3480, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3480, :column 11, :line 3480, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3480, :column 14, :line 3480, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3480, :column 16, :line 3480, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3451, :column 7, :line 3451, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3456, :column 5, :line 3456, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 3464, :column 5, :line 3464, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3464, :column 8, :line 3464, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 3472, :column 5, :line 3472, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3472, :column 8, :line 3472, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3472, :column 11, :line 3472, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 3480, :column 5, :line 3480, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3480, :column 8, :line 3480, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3480, :column 11, :line 3480, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 3480, :column 16, :line 3480, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3456, :column 4, :line 3456, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3456, :column 5, :line 3456, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3464, :column 4, :line 3464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3464, :column 5, :line 3464, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3464, :column 8, :line 3464, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3472, :column 4, :line 3472, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3472, :column 5, :line 3472, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3472, :column 8, :line 3472, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3472, :column 11, :line 3472, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3480, :column 4, :line 3480, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3480, :column 5, :line 3480, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3480, :column 8, :line 3480, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3480, :column 11, :line 3480, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3480, :column 14, :line 3480, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3480, :column 16, :line 3480, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3451, :column 7, :line 3451, :file "cljs/core.cljs"} every-pred, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 5083, :column 10, :line 5083, :file "cljs/core.cljs"} keys ^{:arglists (^{:end-column 13, :end-line 6969, :column 3, :line 6969, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6969, :column 4, :line 6969, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6967, :column 7, :line 6967, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 6969, :column 4, :line 6969, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6969, :column 3, :line 6969, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6969, :column 4, :line 6969, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6967, :column 7, :line 6967, :file "cljs/core.cljs"} keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} {:arglists (^js/Error [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5094, :column 10, :line 5094, :file "cljs/core.cljs"} PersistentArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5094, :column 10, :line 5094, :file "cljs/core.cljs"} PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 5094, :column 29, :line 5094, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 5094, :column 30, :line 5094, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5094, :column 35, :line 5094, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5094, :column 39, :line 5094, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5094, :column 53, :line 5094, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 1498, :column 4, :line 1498, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1498, :column 5, :line 1498, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1499, :column 4, :line 1499, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1499, :column 5, :line 1499, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1499, :column 7, :line 1499, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1500, :column 4, :line 1500, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1500, :column 5, :line 1500, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1500, :column 7, :line 1500, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1500, :column 9, :line 1500, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1500, :column 11, :line 1500, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1496, :column 8, :line 1496, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1496, :column 16, :line 1496, :file "cljs/core.cljs"} distinct? ^{:arglists (^{:end-column 7, :end-line 1498, :column 4, :line 1498, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1498, :column 5, :line 1498, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1499, :column 4, :line 1499, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1499, :column 5, :line 1499, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1499, :column 7, :line 1499, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1500, :column 4, :line 1500, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1500, :column 5, :line 1500, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1500, :column 7, :line 1500, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1500, :column 9, :line 1500, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1500, :column 11, :line 1500, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1496, :column 8, :line 1496, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1496, :column 16, :line 1496, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 1498, :column 5, :line 1498, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 7, :end-line 1499, :column 5, :line 1499, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1499, :column 7, :line 1499, :file "cljs/core.cljs"} y] ^boolean [^{:end-column 7, :end-line 1500, :column 5, :line 1500, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1500, :column 7, :line 1500, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1500, :column 11, :line 1500, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1498, :column 4, :line 1498, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1498, :column 5, :line 1498, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1499, :column 4, :line 1499, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1499, :column 5, :line 1499, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1499, :column 7, :line 1499, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1500, :column 4, :line 1500, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1500, :column 5, :line 1500, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1500, :column 7, :line 1500, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1500, :column 9, :line 1500, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1500, :column 11, :line 1500, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1496, :column 8, :line 1496, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1496, :column 16, :line 1496, :file "cljs/core.cljs"} distinct?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 42, :end-line 4738, :column 1, :line 4738, :file "cljs/core.cljs"} never-equiv ^{:private true, :end-column 42, :end-line 4738, :column 1, :line 4738, :file "cljs/core.cljs"} {:tag cljs.core/NeverEquiv, :op :var, :name ^{:private true, :end-column 42, :end-line 4738, :column 1, :line 4738, :file "cljs/core.cljs"} never-equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} Stepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} Stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 30, :end-line 2973, :column 18, :line 2973, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2973, :column 19, :line 2973, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2973, :column 25, :line 2973, :file "cljs/core.cljs"} iter], :protocols #{Object}}, ^{:arglists (^{:end-column 34, :end-line 1818, :column 31, :line 1818, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1818, :column 32, :line 1818, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1818, :column 8, :line 1818, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1818, :column 15, :line 1818, :file "cljs/core.cljs"} unchecked-short ^{:arglists (^{:end-column 34, :end-line 1818, :column 31, :line 1818, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1818, :column 32, :line 1818, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1818, :column 8, :line 1818, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1818, :column 15, :line 1818, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1818, :column 32, :line 1818, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1818, :column 31, :line 1818, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1818, :column 32, :line 1818, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1818, :column 8, :line 1818, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1818, :column 15, :line 1818, :file "cljs/core.cljs"} unchecked-short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 7526, :column 17, :line 7526, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7526, :column 22, :line 7526, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7526, :column 28, :line 7526, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7526, :column 32, :line 7526, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7526, :column 47, :line 7526, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7526, :column 10, :line 7526, :file "cljs/core.cljs"} ->Range ^{:arglists ([^{:end-column 22, :end-line 7526, :column 17, :line 7526, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7526, :column 22, :line 7526, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7526, :column 28, :line 7526, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7526, :column 32, :line 7526, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7526, :column 47, :line 7526, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7526, :column 10, :line 7526, :file "cljs/core.cljs"} {:arglists (^cljs.core/Range [^{:end-column 22, :end-line 7526, :column 17, :line 7526, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7526, :column 22, :line 7526, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7526, :column 28, :line 7526, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7526, :column 32, :line 7526, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7526, :column 47, :line 7526, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 7526, :column 17, :line 7526, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7526, :column 22, :line 7526, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7526, :column 28, :line 7526, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7526, :column 32, :line 7526, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7526, :column 47, :line 7526, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7526, :column 10, :line 7526, :file "cljs/core.cljs"} ->Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8824, :column 3, :line 8824, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8824, :column 4, :line 8824, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8822, :column 7, :line 8822, :file "cljs/core.cljs"} methods ^{:arglists (^{:end-column 12, :end-line 8824, :column 3, :line 8824, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8824, :column 4, :line 8824, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8822, :column 7, :line 8822, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8824, :column 4, :line 8824, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8824, :column 3, :line 8824, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8824, :column 4, :line 8824, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8822, :column 7, :line 8822, :file "cljs/core.cljs"} methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3171, :column 3, :line 3171, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3171, :column 4, :line 3171, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3169, :column 8, :line 3169, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3169, :column 16, :line 3169, :file "cljs/core.cljs"} odd? ^{:arglists (^{:end-column 6, :end-line 3171, :column 3, :line 3171, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3171, :column 4, :line 3171, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3169, :column 8, :line 3169, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3169, :column 16, :line 3169, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 3171, :column 4, :line 3171, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3171, :column 3, :line 3171, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3171, :column 4, :line 3171, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3169, :column 8, :line 3169, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3169, :column 16, :line 3169, :file "cljs/core.cljs"} odd?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 2484, :column 22, :line 2484, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2484, :column 26, :line 2484, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2484, :column 30, :line 2484, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2484, :column 10, :line 2484, :file "cljs/core.cljs"} ->ArrayChunk ^{:arglists ([^{:end-column 26, :end-line 2484, :column 22, :line 2484, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2484, :column 26, :line 2484, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2484, :column 30, :line 2484, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2484, :column 10, :line 2484, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 26, :end-line 2484, :column 22, :line 2484, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2484, :column 26, :line 2484, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2484, :column 30, :line 2484, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 2484, :column 22, :line 2484, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2484, :column 26, :line 2484, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2484, :column 30, :line 2484, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2484, :column 10, :line 2484, :file "cljs/core.cljs"} ->ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 2970, :column 24, :line 2970, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2970, :column 25, :line 2970, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2970, :column 7, :line 2970, :file "cljs/core.cljs"} lazy-transformer ^{:arglists (^{:end-column 33, :end-line 2970, :column 24, :line 2970, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2970, :column 25, :line 2970, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2970, :column 7, :line 2970, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazyTransformer [^{:end-column 33, :end-line 2970, :column 25, :line 2970, :file "cljs/core.cljs"} stepper]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 2970, :column 24, :line 2970, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2970, :column 25, :line 2970, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2970, :column 7, :line 2970, :file "cljs/core.cljs"} lazy-transformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 794, :column 4, :line 794, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 794, :column 5, :line 794, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 794, :column 12, :line 794, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 805, :column 4, :line 805, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 805, :column 5, :line 805, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 805, :column 12, :line 805, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 805, :column 14, :line 805, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 814, :column 4, :line 814, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 814, :column 5, :line 814, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 814, :column 12, :line 814, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 814, :column 14, :line 814, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 814, :column 18, :line 814, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 791, :column 8, :line 791, :file "cljs/core.cljs"} ci-reduce ^{:arglists (^{:end-column 14, :end-line 794, :column 4, :line 794, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 794, :column 5, :line 794, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 794, :column 12, :line 794, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 805, :column 4, :line 805, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 805, :column 5, :line 805, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 805, :column 12, :line 805, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 805, :column 14, :line 805, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 814, :column 4, :line 814, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 814, :column 5, :line 814, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 814, :column 12, :line 814, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 814, :column 14, :line 814, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 814, :column 18, :line 814, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 791, :column 8, :line 791, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 794, :column 5, :line 794, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 794, :column 12, :line 794, :file "cljs/core.cljs"} f] [^{:end-column 12, :end-line 805, :column 5, :line 805, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 805, :column 12, :line 805, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 805, :column 14, :line 805, :file "cljs/core.cljs"} val] [^{:end-column 12, :end-line 814, :column 5, :line 814, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 814, :column 12, :line 814, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 814, :column 14, :line 814, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 814, :column 18, :line 814, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 794, :column 4, :line 794, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 794, :column 5, :line 794, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 794, :column 12, :line 794, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 805, :column 4, :line 805, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 805, :column 5, :line 805, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 805, :column 12, :line 805, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 805, :column 14, :line 805, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 814, :column 4, :line 814, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 814, :column 5, :line 814, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 814, :column 12, :line 814, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 814, :column 14, :line 814, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 814, :column 18, :line 814, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 791, :column 8, :line 791, :file "cljs/core.cljs"} ci-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3 ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} -get-method ^{:arglists (^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} -get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7691, :column 3, :line 7691, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} frequencies ^{:arglists (^{:end-column 9, :end-line 7691, :column 3, :line 7691, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7691, :column 3, :line 7691, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} frequencies, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1387, :column 3, :line 1387, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1385, :column 8, :line 1385, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1385, :column 16, :line 1385, :file "cljs/core.cljs"} reduceable? ^{:arglists (^{:end-column 6, :end-line 1387, :column 3, :line 1387, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1385, :column 8, :line 1385, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1385, :column 16, :line 1385, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1387, :column 3, :line 1387, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1385, :column 8, :line 1385, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1385, :column 16, :line 1385, :file "cljs/core.cljs"} reduceable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 33, :end-line 482, :column 1, :line 482, :file "cljs/core.cljs"} string-hash-cache ^{:end-column 33, :end-line 482, :column 1, :line 482, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 33, :end-line 482, :column 1, :line 482, :file "cljs/core.cljs"} string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7504, :column 4, :line 7504, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7504, :column 5, :line 7504, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7504, :column 8, :line 7504, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7504, :column 13, :line 7504, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7510, :column 4, :line 7510, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7510, :column 5, :line 7510, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7510, :column 8, :line 7510, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7510, :column 19, :line 7510, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7510, :column 29, :line 7510, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7510, :column 38, :line 7510, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7500, :column 7, :line 7500, :file "cljs/core.cljs"} rsubseq ^{:arglists (^{:end-column 17, :end-line 7504, :column 4, :line 7504, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7504, :column 5, :line 7504, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7504, :column 8, :line 7504, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7504, :column 13, :line 7504, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7510, :column 4, :line 7510, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7510, :column 5, :line 7510, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7510, :column 8, :line 7510, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7510, :column 19, :line 7510, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7510, :column 29, :line 7510, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7510, :column 38, :line 7510, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7500, :column 7, :line 7500, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7504, :column 5, :line 7504, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7504, :column 8, :line 7504, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7504, :column 13, :line 7504, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 7510, :column 5, :line 7510, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7510, :column 8, :line 7510, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7510, :column 19, :line 7510, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7510, :column 29, :line 7510, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7510, :column 38, :line 7510, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7504, :column 4, :line 7504, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7504, :column 5, :line 7504, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7504, :column 8, :line 7504, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7504, :column 13, :line 7504, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7510, :column 4, :line 7510, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7510, :column 5, :line 7510, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7510, :column 8, :line 7510, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7510, :column 19, :line 7510, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7510, :column 29, :line 7510, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7510, :column 38, :line 7510, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7500, :column 7, :line 7500, :file "cljs/core.cljs"} rsubseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 767, :column 3, :line 767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 767, :column 4, :line 767, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 765, :column 7, :line 765, :file "cljs/core.cljs"} inc ^{:arglists (^{:end-column 6, :end-line 767, :column 3, :line 767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 767, :column 4, :line 767, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 765, :column 7, :line 765, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 767, :column 4, :line 767, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 767, :column 3, :line 767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 767, :column 4, :line 767, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 765, :column 7, :line 765, :file "cljs/core.cljs"} inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4790, :column 18, :line 4790, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4790, :column 19, :line 4790, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4790, :column 23, :line 4790, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4790, :column 8, :line 4790, :file "cljs/core.cljs"} obj-clone ^{:arglists (^{:end-column 26, :end-line 4790, :column 18, :line 4790, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4790, :column 19, :line 4790, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4790, :column 23, :line 4790, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4790, :column 8, :line 4790, :file "cljs/core.cljs"} {:arglists (^object [^{:end-column 23, :end-line 4790, :column 19, :line 4790, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4790, :column 23, :line 4790, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4790, :column 18, :line 4790, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4790, :column 19, :line 4790, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4790, :column 23, :line 4790, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4790, :column 8, :line 4790, :file "cljs/core.cljs"} obj-clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 8829, :column 3, :line 8829, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8829, :column 4, :line 8829, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8829, :column 12, :line 8829, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8826, :column 7, :line 8826, :file "cljs/core.cljs"} get-method ^{:arglists (^{:end-column 25, :end-line 8829, :column 3, :line 8829, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8829, :column 4, :line 8829, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8829, :column 12, :line 8829, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8826, :column 7, :line 8826, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8829, :column 4, :line 8829, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8829, :column 12, :line 8829, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 8829, :column 3, :line 8829, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8829, :column 4, :line 8829, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8829, :column 12, :line 8829, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8826, :column 7, :line 8826, :file "cljs/core.cljs"} get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 3965, :column 35, :line 3965, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3965, :column 36, :line 3965, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3965, :column 38, :line 3965, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3965, :column 8, :line 3965, :file "cljs/core.cljs"} vector-index-out-of-bounds ^{:arglists (^{:end-column 42, :end-line 3965, :column 35, :line 3965, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3965, :column 36, :line 3965, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3965, :column 38, :line 3965, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3965, :column 8, :line 3965, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 38, :end-line 3965, :column 36, :line 3965, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3965, :column 38, :line 3965, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 3965, :column 35, :line 3965, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3965, :column 36, :line 3965, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3965, :column 38, :line 3965, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3965, :column 8, :line 3965, :file "cljs/core.cljs"} vector-index-out-of-bounds, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4933, :column 28, :line 4933, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4933, :column 7, :line 4933, :file "cljs/core.cljs"} es6-entries-iterator ^{:arglists (^{:end-column 34, :end-line 4933, :column 28, :line 4933, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4933, :column 7, :line 4933, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6EntriesIterator [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4933, :column 28, :line 4933, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4933, :column 7, :line 4933, :file "cljs/core.cljs"} es6-entries-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1977, :column 3, :line 1977, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1977, :column 4, :line 1977, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1977, :column 6, :line 1977, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1975, :column 7, :line 1975, :file "cljs/core.cljs"} bit-clear ^{:arglists (^{:end-column 8, :end-line 1977, :column 3, :line 1977, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1977, :column 4, :line 1977, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1977, :column 6, :line 1977, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1975, :column 7, :line 1975, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1977, :column 4, :line 1977, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1977, :column 6, :line 1977, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1977, :column 3, :line 1977, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1977, :column 4, :line 1977, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1977, :column 6, :line 1977, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1975, :column 7, :line 1975, :file "cljs/core.cljs"} bit-clear, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7526, :column 10, :line 7526, :file "cljs/core.cljs"} Range {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7526, :column 10, :line 7526, :file "cljs/core.cljs"} Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 7526, :column 16, :line 7526, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7526, :column 17, :line 7526, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7526, :column 22, :line 7526, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7526, :column 28, :line 7526, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7526, :column 32, :line 7526, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7526, :column 47, :line 7526, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 10, :end-line 3743, :column 4, :line 3743, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3752, :column 4, :line 3752, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3752, :column 5, :line 3752, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3752, :column 10, :line 3752, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3739, :column 7, :line 3739, :file "cljs/core.cljs"} filter ^{:arglists (^{:end-column 10, :end-line 3743, :column 4, :line 3743, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3752, :column 4, :line 3752, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3752, :column 5, :line 3752, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3752, :column 10, :line 3752, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3739, :column 7, :line 3739, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3752, :column 5, :line 3752, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3752, :column 10, :line 3752, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3743, :column 4, :line 3743, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3752, :column 4, :line 3752, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3752, :column 5, :line 3752, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3752, :column 10, :line 3752, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3739, :column 7, :line 3739, :file "cljs/core.cljs"} filter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 37, :end-line 6210, :column 32, :line 6210, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6210, :column 37, :line 6210, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6210, :column 44, :line 6210, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6210, :column 52, :line 6210, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6210, :column 63, :line 6210, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6210, :column 77, :line 6210, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6210, :column 10, :line 6210, :file "cljs/core.cljs"} ->PersistentTreeMapSeq ^{:arglists ([^{:end-column 37, :end-line 6210, :column 32, :line 6210, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6210, :column 37, :line 6210, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6210, :column 44, :line 6210, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6210, :column 52, :line 6210, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6210, :column 63, :line 6210, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6210, :column 77, :line 6210, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6210, :column 10, :line 6210, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 37, :end-line 6210, :column 32, :line 6210, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6210, :column 37, :line 6210, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6210, :column 44, :line 6210, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6210, :column 52, :line 6210, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6210, :column 63, :line 6210, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6210, :column 77, :line 6210, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 37, :end-line 6210, :column 32, :line 6210, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6210, :column 37, :line 6210, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6210, :column 44, :line 6210, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6210, :column 52, :line 6210, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6210, :column 63, :line 6210, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6210, :column 77, :line 6210, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6210, :column 10, :line 6210, :file "cljs/core.cljs"} ->PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 49, :end-line 5353, :column 27, :line 5353, :file "cljs/core.cljs"} create-array-node-seq ^{:arglists (^{:end-column 11, :end-line 5946, :column 4, :line 5946, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5946, :column 5, :line 5946, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5947, :column 4, :line 5947, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5947, :column 5, :line 5947, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5947, :column 10, :line 5947, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5947, :column 16, :line 5947, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5947, :column 18, :line 5947, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5945, :column 8, :line 5945, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5946, :column 5, :line 5946, :file "cljs/core.cljs"} nodes] [^{:end-column 10, :end-line 5947, :column 5, :line 5947, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5947, :column 10, :line 5947, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5947, :column 16, :line 5947, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5947, :column 18, :line 5947, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5946, :column 4, :line 5946, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5946, :column 5, :line 5946, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5947, :column 4, :line 5947, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5947, :column 5, :line 5947, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5947, :column 10, :line 5947, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5947, :column 16, :line 5947, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5947, :column 18, :line 5947, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5945, :column 8, :line 5945, :file "cljs/core.cljs"} create-array-node-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -assoc-n! ^{:arglists (^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -assoc-n!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 24, :end-line 293, :column 14, :line 293, :file "cljs/core.cljs"} IWithMeta ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/MetaFn cljs.core/RSeq cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 24, :end-line 293, :column 14, :line 293, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 24, :end-line 293, :column 14, :line 293, :file "cljs/core.cljs"} IWithMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 479, :column 10, :line 479, :file "cljs/core.cljs"} list ^{:arglists (^{:end-column 18, :end-line 2264, :column 12, :line 2264, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2264, :column 13, :line 2264, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2264, :column 15, :line 2264, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2264, :column 7, :line 2264, :file "cljs/core.cljs"} {:arglists (^^{:end-column 40, :end-line 2274, :column 29, :line 2274, :file "cljs/core.cljs"} not-native [& ^{:end-column 18, :end-line 2264, :column 15, :line 2264, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2264, :column 12, :line 2264, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2264, :column 13, :line 2264, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2264, :column 15, :line 2264, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2264, :column 7, :line 2264, :file "cljs/core.cljs"} list, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1710, :column 4, :line 1710, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1710, :column 5, :line 1710, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1710, :column 7, :line 1710, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1710, :column 9, :line 1710, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1710, :column 11, :line 1710, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1705, :column 8, :line 1705, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1705, :column 15, :line 1705, :file "cljs/core.cljs"} + ^{:arglists (^{:end-column 6, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1710, :column 4, :line 1710, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1710, :column 5, :line 1710, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1710, :column 7, :line 1710, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1710, :column 9, :line 1710, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1710, :column 11, :line 1710, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1705, :column 8, :line 1705, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1705, :column 15, :line 1705, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1710, :column 5, :line 1710, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1710, :column 7, :line 1710, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1710, :column 11, :line 1710, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1710, :column 4, :line 1710, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1710, :column 5, :line 1710, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1710, :column 7, :line 1710, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1710, :column 9, :line 1710, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1710, :column 11, :line 1710, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1705, :column 8, :line 1705, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1705, :column 15, :line 1705, :file "cljs/core.cljs"} +, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 865, :column 10, :line 865, :file "cljs/core.cljs"} IndexedSeqIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 865, :column 10, :line 865, :file "cljs/core.cljs"} IndexedSeqIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 865, :column 29, :line 865, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 865, :column 30, :line 865, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 46, :end-line 865, :column 44, :line 865, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 14, :end-line 7644, :column 3, :line 7644, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7644, :column 4, :line 7644, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7644, :column 9, :line 7644, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7642, :column 7, :line 7642, :file "cljs/core.cljs"} split-with ^{:arglists (^{:end-column 14, :end-line 7644, :column 3, :line 7644, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7644, :column 4, :line 7644, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7644, :column 9, :line 7644, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7642, :column 7, :line 7642, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 9, :end-line 7644, :column 4, :line 7644, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7644, :column 9, :line 7644, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7644, :column 3, :line 7644, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7644, :column 4, :line 7644, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7644, :column 9, :line 7644, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7642, :column 7, :line 7642, :file "cljs/core.cljs"} split-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 27, :end-line 3919, :column 22, :line 3919, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3919, :column 27, :line 3919, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3919, :column 10, :line 3919, :file "cljs/core.cljs"} ->VectorNode ^{:arglists ([^{:end-column 27, :end-line 3919, :column 22, :line 3919, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3919, :column 27, :line 3919, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3919, :column 10, :line 3919, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 27, :end-line 3919, :column 22, :line 3919, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3919, :column 27, :line 3919, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 27, :end-line 3919, :column 22, :line 3919, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3919, :column 27, :line 3919, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3919, :column 10, :line 3919, :file "cljs/core.cljs"} ->VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} aset ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 417, :column 31, :line 417, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 417, :column 32, :line 417, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 417, :column 34, :line 417, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 417, :column 8, :line 417, :file "cljs/core.cljs"} number, :end-column 31, :end-line 417, :column 15, :line 417, :file "cljs/core.cljs"} int-rotate-left ^{:arglists (^{:end-column 36, :end-line 417, :column 31, :line 417, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 417, :column 32, :line 417, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 417, :column 34, :line 417, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 417, :column 8, :line 417, :file "cljs/core.cljs"} number, :end-column 31, :end-line 417, :column 15, :line 417, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 34, :end-line 417, :column 32, :line 417, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 417, :column 34, :line 417, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 417, :column 31, :line 417, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 417, :column 32, :line 417, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 417, :column 34, :line 417, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 417, :column 8, :line 417, :file "cljs/core.cljs"} number, :end-column 31, :end-line 417, :column 15, :line 417, :file "cljs/core.cljs"} int-rotate-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2389, :column 4, :line 2389, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2389, :column 5, :line 2389, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2398, :column 4, :line 2398, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2398, :column 5, :line 2398, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2398, :column 8, :line 2398, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2386, :column 7, :line 2386, :file "cljs/core.cljs"} keyword ^{:arglists (^{:end-column 10, :end-line 2389, :column 4, :line 2389, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2389, :column 5, :line 2389, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2398, :column 4, :line 2398, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2398, :column 5, :line 2398, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2398, :column 8, :line 2398, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2386, :column 7, :line 2386, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 2389, :column 5, :line 2389, :file "cljs/core.cljs"} name] ^cljs.core/Keyword [^{:end-column 8, :end-line 2398, :column 5, :line 2398, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2398, :column 8, :line 2398, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2389, :column 4, :line 2389, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2389, :column 5, :line 2389, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2398, :column 4, :line 2398, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2398, :column 5, :line 2398, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2398, :column 8, :line 2398, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2386, :column 7, :line 2386, :file "cljs/core.cljs"} keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 2279, :column 16, :line 2279, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2279, :column 27, :line 2279, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2279, :column 42, :line 2279, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} ->Cons ^{:arglists ([^{:end-column 21, :end-line 2279, :column 16, :line 2279, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2279, :column 27, :line 2279, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2279, :column 42, :line 2279, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 21, :end-line 2279, :column 16, :line 2279, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2279, :column 27, :line 2279, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2279, :column 42, :line 2279, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 2279, :column 16, :line 2279, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2279, :column 27, :line 2279, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2279, :column 42, :line 2279, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} ->Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 6261, :column 28, :line 6261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6261, :column 29, :line 6261, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6261, :column 34, :line 6261, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6261, :column 45, :line 6261, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6261, :column 8, :line 6261, :file "cljs/core.cljs"} create-tree-map-seq ^{:arglists (^{:end-column 49, :end-line 6261, :column 28, :line 6261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6261, :column 29, :line 6261, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6261, :column 34, :line 6261, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6261, :column 45, :line 6261, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6261, :column 8, :line 6261, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 34, :end-line 6261, :column 29, :line 6261, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6261, :column 34, :line 6261, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6261, :column 45, :line 6261, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 6261, :column 28, :line 6261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6261, :column 29, :line 6261, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6261, :column 34, :line 6261, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6261, :column 45, :line 6261, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6261, :column 8, :line 6261, :file "cljs/core.cljs"} create-tree-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 26, :end-line 240, :column 14, :line 240, :file "cljs/core.cljs"} ICollection ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 26, :end-line 240, :column 14, :line 240, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 26, :end-line 240, :column 14, :line 240, :file "cljs/core.cljs"} ICollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3028, :column 4, :line 3028, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3028, :column 5, :line 3028, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3028, :column 11, :line 3028, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3031, :column 4, :line 3031, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3031, :column 5, :line 3031, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3031, :column 11, :line 3031, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3031, :column 17, :line 3031, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 3027, :column 7, :line 3027, :file "cljs/core.cljs"} multi-stepper ^{:arglists (^{:end-column 17, :end-line 3028, :column 4, :line 3028, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3028, :column 5, :line 3028, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3028, :column 11, :line 3028, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3031, :column 4, :line 3031, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3031, :column 5, :line 3031, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3031, :column 11, :line 3031, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3031, :column 17, :line 3031, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 3027, :column 7, :line 3027, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 3028, :column 5, :line 3028, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3028, :column 11, :line 3028, :file "cljs/core.cljs"} iters] ^cljs.core/MultiStepper [^{:end-column 11, :end-line 3031, :column 5, :line 3031, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3031, :column 11, :line 3031, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3031, :column 17, :line 3031, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3028, :column 4, :line 3028, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3028, :column 5, :line 3028, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3028, :column 11, :line 3028, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3031, :column 4, :line 3031, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3031, :column 5, :line 3031, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3031, :column 11, :line 3031, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3031, :column 17, :line 3031, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 3027, :column 7, :line 3027, :file "cljs/core.cljs"} multi-stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1921, :column 13, :line 1921, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1921, :column 14, :line 1921, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1921, :column 7, :line 1921, :file "cljs/core.cljs"} chars ^{:arglists (^{:end-column 16, :end-line 1921, :column 13, :line 1921, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1921, :column 14, :line 1921, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1921, :column 7, :line 1921, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1921, :column 14, :line 1921, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1921, :column 13, :line 1921, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1921, :column 14, :line 1921, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1921, :column 7, :line 1921, :file "cljs/core.cljs"} chars, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2062, :column 4, :line 2062, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2063, :column 5, :line 2063, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2066, :column 4, :line 2066, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2066, :column 5, :line 2066, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2066, :column 9, :line 2066, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2058, :column 7, :line 2058, :file "cljs/core.cljs"} str ^{:arglists (^{:end-column 6, :end-line 2062, :column 4, :line 2062, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2063, :column 5, :line 2063, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2066, :column 4, :line 2066, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2066, :column 5, :line 2066, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2066, :column 9, :line 2066, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2058, :column 7, :line 2058, :file "cljs/core.cljs"} {:arglists (^string [] [^{:end-column 7, :end-line 2063, :column 5, :line 2063, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 2066, :column 5, :line 2066, :file "cljs/core.cljs"} x & ^{:end-column 12, :end-line 2066, :column 9, :line 2066, :file "cljs/core.cljs"} ys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2062, :column 4, :line 2062, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2063, :column 5, :line 2063, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2066, :column 4, :line 2066, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2066, :column 5, :line 2066, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2066, :column 9, :line 2066, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2058, :column 7, :line 2058, :file "cljs/core.cljs"} str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 667, :column 8, :line 667, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 667, :column 12, :line 667, :file "cljs/core.cljs"} next ^{:arglists (^{:end-column 9, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 667, :column 8, :line 667, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 667, :column 12, :line 667, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 667, :column 8, :line 667, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 667, :column 12, :line 667, :file "cljs/core.cljs"} next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 249, :column 14, :line 249, :file "cljs/core.cljs"} ASeq ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Cons cljs.core/List cljs.core/IndexedSeq), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 249, :column 14, :line 249, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 249, :column 14, :line 249, :file "cljs/core.cljs"} ASeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 39, :end-line 7944, :column 21, :line 7944, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7944, :column 22, :line 7944, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7944, :column 27, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7944, :column 34, :line 7944, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} pr-seq-writer ^{:arglists (^{:end-column 39, :end-line 7944, :column 21, :line 7944, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7944, :column 22, :line 7944, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7944, :column 27, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7944, :column 34, :line 7944, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 7944, :column 22, :line 7944, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7944, :column 27, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7944, :column 34, :line 7944, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 39, :end-line 7944, :column 21, :line 7944, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7944, :column 22, :line 7944, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7944, :column 27, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7944, :column 34, :line 7944, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} pr-seq-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} SeqIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} SeqIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 50, :end-line 2938, :column 18, :line 2938, :file "cljs/core.cljs"} [^{:mutable true, :end-column 34, :end-line 2938, :column 29, :line 2938, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2938, :column 44, :line 2938, :file "cljs/core.cljs"} _next], :protocols #{Object}}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} IFn ^{:impls (cljs.core/MultiFn cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/Keyword cljs.core/MetaFn cljs.core/Symbol), :protocol-info {:methods {^{:end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} IFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7776, :column 15, :line 7776, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7776, :column 16, :line 7776, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7776, :column 7, :line 7776, :file "cljs/core.cljs"} regexp? ^{:arglists (^{:end-column 18, :end-line 7776, :column 15, :line 7776, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7776, :column 16, :line 7776, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7776, :column 7, :line 7776, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 18, :end-line 7776, :column 16, :line 7776, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7776, :column 15, :line 7776, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7776, :column 16, :line 7776, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7776, :column 7, :line 7776, :file "cljs/core.cljs"} regexp?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 732, :column 10, :line 732, :file "cljs/core.cljs"} hash-map ^{:arglists (^{:end-column 14, :end-line 6868, :column 3, :line 6868, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6868, :column 4, :line 6868, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6868, :column 6, :line 6868, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6865, :column 7, :line 6865, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [& ^{:end-column 14, :end-line 6868, :column 6, :line 6868, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6868, :column 3, :line 6868, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6868, :column 4, :line 6868, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6868, :column 6, :line 6868, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6865, :column 7, :line 6865, :file "cljs/core.cljs"} hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8550, :column 4, :line 8550, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8550, :column 5, :line 8550, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8550, :column 9, :line 8550, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8553, :column 4, :line 8553, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8553, :column 5, :line 8553, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8553, :column 11, :line 8553, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8546, :column 7, :line 8546, :file "cljs/core.cljs"} underive ^{:arglists (^{:end-column 16, :end-line 8550, :column 4, :line 8550, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8550, :column 5, :line 8550, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8550, :column 9, :line 8550, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8553, :column 4, :line 8553, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8553, :column 5, :line 8553, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8553, :column 11, :line 8553, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8546, :column 7, :line 8546, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 8550, :column 5, :line 8550, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8550, :column 9, :line 8550, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8553, :column 5, :line 8553, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8553, :column 11, :line 8553, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8550, :column 4, :line 8550, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8550, :column 5, :line 8550, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8550, :column 9, :line 8550, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8553, :column 4, :line 8553, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8553, :column 5, :line 8553, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8553, :column 11, :line 8553, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8546, :column 7, :line 8546, :file "cljs/core.cljs"} underive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1421, :column 4, :line 1421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1421, :column 5, :line 1421, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1421, :column 10, :line 1421, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1421, :column 12, :line 1421, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1421, :column 15, :line 1421, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1421, :column 17, :line 1421, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} array-copy ^{:arglists (^{:end-column 21, :end-line 1421, :column 4, :line 1421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1421, :column 5, :line 1421, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1421, :column 10, :line 1421, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1421, :column 12, :line 1421, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1421, :column 15, :line 1421, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1421, :column 17, :line 1421, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1421, :column 5, :line 1421, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1421, :column 10, :line 1421, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1421, :column 12, :line 1421, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1421, :column 15, :line 1421, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1421, :column 17, :line 1421, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1421, :column 4, :line 1421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1421, :column 5, :line 1421, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1421, :column 10, :line 1421, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1421, :column 12, :line 1421, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1421, :column 15, :line 1421, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1421, :column 17, :line 1421, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} array-copy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4768, :column 29, :line 4768, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4768, :column 30, :line 4768, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4768, :column 32, :line 4768, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4768, :column 8, :line 4768, :file "cljs/core.cljs"} obj-map-compare-keys ^{:arglists (^{:end-column 34, :end-line 4768, :column 29, :line 4768, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4768, :column 30, :line 4768, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4768, :column 32, :line 4768, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4768, :column 8, :line 4768, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 4768, :column 30, :line 4768, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4768, :column 32, :line 4768, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4768, :column 29, :line 4768, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4768, :column 30, :line 4768, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4768, :column 32, :line 4768, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4768, :column 8, :line 4768, :file "cljs/core.cljs"} obj-map-compare-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} -reset! ^{:arglists (^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} -reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} -rest ^{:arglists (^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} -rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 2904, :column 16, :line 2904, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} nil-iter ^{:arglists (^{:end-column 18, :end-line 2904, :column 16, :line 2904, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} {:arglists (^cljs.core/t8427 []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2904, :column 16, :line 2904, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} nil-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 4036, :column 31, :line 4036, :file "cljs/core.cljs"} pr-writer ^{:arglists (^{:end-column 20, :end-line 7877, :column 3, :line 7877, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7877, :column 4, :line 7877, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7877, :column 8, :line 7877, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7877, :column 15, :line 7877, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 7873, :column 8, :line 7873, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7877, :column 4, :line 7877, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7877, :column 8, :line 7877, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7877, :column 15, :line 7877, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7877, :column 3, :line 7877, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7877, :column 4, :line 7877, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7877, :column 8, :line 7877, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7877, :column 15, :line 7877, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 7873, :column 8, :line 7873, :file "cljs/core.cljs"} pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} false? ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} false?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 25, :end-line 4016, :column 10, :line 4016, :file "cljs/core.cljs"} RangedIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 25, :end-line 4016, :column 10, :line 4016, :file "cljs/core.cljs"} RangedIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 79, :end-line 4016, :column 25, :line 4016, :file "cljs/core.cljs"} [^{:mutable true, :end-column 38, :end-line 4016, :column 36, :line 4016, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 53, :end-line 4016, :column 48, :line 4016, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 67, :end-line 4016, :column 63, :line 4016, :file "cljs/core.cljs"} arr ^{:end-column 69, :end-line 4016, :column 67, :line 4016, :file "cljs/core.cljs"} v ^{:end-column 75, :end-line 4016, :column 69, :line 4016, :file "cljs/core.cljs"} start ^{:end-column 79, :end-line 4016, :column 75, :line 4016, :file "cljs/core.cljs"} end], :protocols #{Object}}, ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably* ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 1923, :column 12, :line 1923, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1923, :column 13, :line 1923, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1923, :column 7, :line 1923, :file "cljs/core.cljs"} ints ^{:arglists (^{:end-column 15, :end-line 1923, :column 12, :line 1923, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1923, :column 13, :line 1923, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1923, :column 7, :line 1923, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1923, :column 13, :line 1923, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1923, :column 12, :line 1923, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1923, :column 13, :line 1923, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1923, :column 7, :line 1923, :file "cljs/core.cljs"} ints, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3495, :column 4, :line 3495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3495, :column 5, :line 3495, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3503, :column 4, :line 3503, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3503, :column 5, :line 3503, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3503, :column 8, :line 3503, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3511, :column 8, :line 3511, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3511, :column 11, :line 3511, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3519, :column 4, :line 3519, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3519, :column 5, :line 3519, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3519, :column 8, :line 3519, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3519, :column 11, :line 3519, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3519, :column 14, :line 3519, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3519, :column 16, :line 3519, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3490, :column 7, :line 3490, :file "cljs/core.cljs"} some-fn ^{:arglists (^{:end-column 7, :end-line 3495, :column 4, :line 3495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3495, :column 5, :line 3495, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3503, :column 4, :line 3503, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3503, :column 5, :line 3503, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3503, :column 8, :line 3503, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3511, :column 8, :line 3511, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3511, :column 11, :line 3511, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3519, :column 4, :line 3519, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3519, :column 5, :line 3519, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3519, :column 8, :line 3519, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3519, :column 11, :line 3519, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3519, :column 14, :line 3519, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3519, :column 16, :line 3519, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3490, :column 7, :line 3490, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3495, :column 5, :line 3495, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 3503, :column 5, :line 3503, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3503, :column 8, :line 3503, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3511, :column 8, :line 3511, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3511, :column 11, :line 3511, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 3519, :column 5, :line 3519, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3519, :column 8, :line 3519, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3519, :column 11, :line 3519, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 3519, :column 16, :line 3519, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3495, :column 4, :line 3495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3495, :column 5, :line 3495, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3503, :column 4, :line 3503, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3503, :column 5, :line 3503, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3503, :column 8, :line 3503, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3511, :column 8, :line 3511, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3511, :column 11, :line 3511, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3519, :column 4, :line 3519, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3519, :column 5, :line 3519, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3519, :column 8, :line 3519, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3519, :column 11, :line 3519, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3519, :column 14, :line 3519, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3519, :column 16, :line 3519, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3490, :column 7, :line 3490, :file "cljs/core.cljs"} some-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline* ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 1572, :column 10, :line 1572, :file "cljs/core.cljs"} to-array ^{:arglists (^{:end-column 6, :end-line 2604, :column 3, :line 2604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2602, :column 7, :line 2602, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 6, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2604, :column 3, :line 2604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2602, :column 7, :line 2602, :file "cljs/core.cljs"} to-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 23, :end-line 4331, :column 10, :line 4331, :file "cljs/core.cljs"} build-subvec ^{:arglists (^{:end-column 46, :end-line 4427, :column 21, :line 4427, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4427, :column 22, :line 4427, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4427, :column 27, :line 4427, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4427, :column 29, :line 4427, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4427, :column 35, :line 4427, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4427, :column 39, :line 4427, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 4427, :column 8, :line 4427, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 27, :end-line 4427, :column 22, :line 4427, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4427, :column 27, :line 4427, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4427, :column 29, :line 4427, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4427, :column 35, :line 4427, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4427, :column 39, :line 4427, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 4427, :column 21, :line 4427, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4427, :column 22, :line 4427, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4427, :column 27, :line 4427, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4427, :column 29, :line 4427, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4427, :column 35, :line 4427, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4427, :column 39, :line 4427, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 4427, :column 8, :line 4427, :file "cljs/core.cljs"} build-subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2334, :column 22, :line 2334, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2334, :column 23, :line 2334, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2334, :column 8, :line 2334, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2334, :column 16, :line 2334, :file "cljs/core.cljs"} list? ^{:arglists (^{:end-column 25, :end-line 2334, :column 22, :line 2334, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2334, :column 23, :line 2334, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2334, :column 8, :line 2334, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2334, :column 16, :line 2334, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 25, :end-line 2334, :column 23, :line 2334, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2334, :column 22, :line 2334, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2334, :column 23, :line 2334, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2334, :column 8, :line 2334, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2334, :column 16, :line 2334, :file "cljs/core.cljs"} list?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 6686, :column 24, :line 6686, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6686, :column 25, :line 6686, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6686, :column 30, :line 6686, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6686, :column 35, :line 6686, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6686, :column 37, :line 6686, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6686, :column 8, :line 6686, :file "cljs/core.cljs"} tree-map-remove ^{:arglists (^{:end-column 43, :end-line 6686, :column 24, :line 6686, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6686, :column 25, :line 6686, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6686, :column 30, :line 6686, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6686, :column 35, :line 6686, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6686, :column 37, :line 6686, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6686, :column 8, :line 6686, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6686, :column 25, :line 6686, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6686, :column 30, :line 6686, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6686, :column 35, :line 6686, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6686, :column 37, :line 6686, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 6686, :column 24, :line 6686, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6686, :column 25, :line 6686, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6686, :column 30, :line 6686, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6686, :column 35, :line 6686, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6686, :column 37, :line 6686, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6686, :column 8, :line 6686, :file "cljs/core.cljs"} tree-map-remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5731, :column 10, :line 5731, :file "cljs/core.cljs"} HashCollisionNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5731, :column 10, :line 5731, :file "cljs/core.cljs"} HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 43, :end-line 5734, :column 28, :line 5731, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5731, :column 29, :line 5731, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5732, :column 39, :line 5732, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5733, :column 39, :line 5733, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5734, :column 39, :line 5734, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array? ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8573, :column 3, :line 8573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8573, :column 4, :line 8573, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8573, :column 6, :line 8573, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8573, :column 8, :line 8573, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8572, :column 8, :line 8572, :file "cljs/core.cljs"} prefers* ^{:arglists (^{:end-column 21, :end-line 8573, :column 3, :line 8573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8573, :column 4, :line 8573, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8573, :column 6, :line 8573, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8573, :column 8, :line 8573, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8572, :column 8, :line 8572, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8573, :column 4, :line 8573, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8573, :column 6, :line 8573, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8573, :column 8, :line 8573, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8573, :column 3, :line 8573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8573, :column 4, :line 8573, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8573, :column 6, :line 8573, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8573, :column 8, :line 8573, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8572, :column 8, :line 8572, :file "cljs/core.cljs"} prefers*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 614, :column 13, :line 614, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 614, :column 14, :line 614, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 614, :column 7, :line 614, :file "cljs/core.cljs"} clone ^{:arglists (^{:end-column 20, :end-line 614, :column 13, :line 614, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 614, :column 14, :line 614, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 614, :column 7, :line 614, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj [^{:end-column 20, :end-line 614, :column 14, :line 614, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 614, :column 13, :line 614, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 614, :column 14, :line 614, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 614, :column 7, :line 614, :file "cljs/core.cljs"} clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4754, :column 19, :line 4754, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4754, :column 20, :line 4754, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4754, :column 25, :line 4754, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4754, :column 27, :line 4754, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4754, :column 8, :line 4754, :file "cljs/core.cljs"} scan-array ^{:arglists (^{:end-column 33, :end-line 4754, :column 19, :line 4754, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4754, :column 20, :line 4754, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4754, :column 25, :line 4754, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4754, :column 27, :line 4754, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4754, :column 8, :line 4754, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 4754, :column 20, :line 4754, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4754, :column 25, :line 4754, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4754, :column 27, :line 4754, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4754, :column 19, :line 4754, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4754, :column 20, :line 4754, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4754, :column 25, :line 4754, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4754, :column 27, :line 4754, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4754, :column 8, :line 4754, :file "cljs/core.cljs"} scan-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1987, :column 3, :line 1987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1987, :column 4, :line 1987, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1985, :column 7, :line 1985, :file "cljs/core.cljs"} bit-not ^{:arglists (^{:end-column 6, :end-line 1987, :column 3, :line 1987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1987, :column 4, :line 1987, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1985, :column 7, :line 1985, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1987, :column 4, :line 1987, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1987, :column 3, :line 1987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1987, :column 4, :line 1987, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1985, :column 7, :line 1985, :file "cljs/core.cljs"} bit-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7865, :column 3, :line 7865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7865, :column 4, :line 7865, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7864, :column 17, :line 7864, :file "cljs/core.cljs"} quote-string ^{:arglists (^{:end-column 6, :end-line 7865, :column 3, :line 7865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7865, :column 4, :line 7865, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7864, :column 17, :line 7864, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7865, :column 4, :line 7865, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7865, :column 3, :line 7865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7865, :column 4, :line 7865, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7864, :column 17, :line 7864, :file "cljs/core.cljs"} quote-string, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1802, :column 20, :line 1802, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1802, :column 21, :line 1802, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1802, :column 8, :line 1802, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1802, :column 15, :line 1802, :file "cljs/core.cljs"} byte ^{:arglists (^{:end-column 23, :end-line 1802, :column 20, :line 1802, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1802, :column 21, :line 1802, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1802, :column 8, :line 1802, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1802, :column 15, :line 1802, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1802, :column 21, :line 1802, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1802, :column 20, :line 1802, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1802, :column 21, :line 1802, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1802, :column 8, :line 1802, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1802, :column 15, :line 1802, :file "cljs/core.cljs"} byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} max ^{:arglists (^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} max, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 26, :end-line 369, :column 14, :line 369, :file "cljs/core.cljs"} IComparable ^{:impls (cljs.core/Symbol cljs.core/Keyword cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 26, :end-line 369, :column 14, :line 369, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 26, :end-line 369, :column 14, :line 369, :file "cljs/core.cljs"} IComparable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2026, :column 4, :line 2026, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2026, :column 5, :line 2026, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2027, :column 4, :line 2027, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2027, :column 5, :line 2027, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2027, :column 7, :line 2027, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2028, :column 5, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2028, :column 7, :line 2028, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2028, :column 9, :line 2028, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2028, :column 11, :line 2028, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 2022, :column 8, :line 2022, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 2022, :column 16, :line 2022, :file "cljs/core.cljs"} == ^{:arglists (^{:end-column 7, :end-line 2026, :column 4, :line 2026, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2026, :column 5, :line 2026, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2027, :column 4, :line 2027, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2027, :column 5, :line 2027, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2027, :column 7, :line 2027, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2028, :column 5, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2028, :column 7, :line 2028, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2028, :column 9, :line 2028, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2028, :column 11, :line 2028, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 2022, :column 8, :line 2022, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 2022, :column 16, :line 2022, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 2026, :column 5, :line 2026, :file "cljs/core.cljs"} x] ^^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean [^{:end-column 7, :end-line 2027, :column 5, :line 2027, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2027, :column 7, :line 2027, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 2028, :column 5, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2028, :column 7, :line 2028, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 2028, :column 11, :line 2028, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2026, :column 4, :line 2026, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2026, :column 5, :line 2026, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2027, :column 4, :line 2027, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2027, :column 5, :line 2027, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2027, :column 7, :line 2027, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2028, :column 5, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2028, :column 7, :line 2028, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2028, :column 9, :line 2028, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2028, :column 11, :line 2028, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 2022, :column 8, :line 2022, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 2022, :column 16, :line 2022, :file "cljs/core.cljs"} ==, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8493, :column 4, :line 8493, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8493, :column 5, :line 8493, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8493, :column 7, :line 8493, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8487, :column 7, :line 8487, :file "cljs/core.cljs"} parents ^{:arglists (^{:end-column 9, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8493, :column 4, :line 8493, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8493, :column 5, :line 8493, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8493, :column 7, :line 8493, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8487, :column 7, :line 8487, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8493, :column 5, :line 8493, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8493, :column 7, :line 8493, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8493, :column 4, :line 8493, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8493, :column 5, :line 8493, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8493, :column 7, :line 8493, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8487, :column 7, :line 8487, :file "cljs/core.cljs"} parents, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1077, :column 3, :line 1077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1077, :column 4, :line 1077, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} count ^{:arglists (^{:end-column 9, :end-line 1077, :column 3, :line 1077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1077, :column 4, :line 1077, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1077, :column 4, :line 1077, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1077, :column 3, :line 1077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1077, :column 4, :line 1077, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} -disjoin! ^{:arglists (^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} -disjoin!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6098, :column 39, :line 6098, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6098, :column 47, :line 6098, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6099, :column 38, :line 6099, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6100, :column 38, :line 6100, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6101, :column 39, :line 6101, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6101, :column 47, :line 6101, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6102, :column 38, :line 6102, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 6098, :column 10, :line 6098, :file "cljs/core.cljs"} ->TransientHashMap ^{:arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6098, :column 39, :line 6098, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6098, :column 47, :line 6098, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6099, :column 38, :line 6099, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6100, :column 38, :line 6100, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6101, :column 39, :line 6101, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6101, :column 47, :line 6101, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6102, :column 38, :line 6102, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 6098, :column 10, :line 6098, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientHashMap [^{:mutable true, :tag ^{:end-column 47, :end-line 6098, :column 39, :line 6098, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6098, :column 47, :line 6098, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6099, :column 38, :line 6099, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6100, :column 38, :line 6100, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6101, :column 39, :line 6101, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6101, :column 47, :line 6101, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6102, :column 38, :line 6102, :file "cljs/core.cljs"} nil-val]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6098, :column 39, :line 6098, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6098, :column 47, :line 6098, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6099, :column 38, :line 6099, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6100, :column 38, :line 6100, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6101, :column 39, :line 6101, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6101, :column 47, :line 6101, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6102, :column 38, :line 6102, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 6098, :column 10, :line 6098, :file "cljs/core.cljs"} ->TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 2465, :column 10, :line 2465, :file "cljs/core.cljs"} ArrayChunk {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2484, :column 10, :line 2484, :file "cljs/core.cljs"} ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 34, :end-line 2484, :column 21, :line 2484, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 2484, :column 22, :line 2484, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2484, :column 26, :line 2484, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2484, :column 30, :line 2484, :file "cljs/core.cljs"} end], :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}}, ^{:arglists (^{:end-column 26, :end-line 6905, :column 4, :line 6905, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6905, :column 5, :line 6905, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6905, :column 16, :line 6905, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6905, :column 18, :line 6905, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6902, :column 7, :line 6902, :file "cljs/core.cljs"} sorted-map-by ^{:arglists (^{:end-column 26, :end-line 6905, :column 4, :line 6905, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6905, :column 5, :line 6905, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6905, :column 16, :line 6905, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6905, :column 18, :line 6905, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6902, :column 7, :line 6902, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 16, :end-line 6905, :column 5, :line 6905, :file "cljs/core.cljs"} comparator & ^{:end-column 26, :end-line 6905, :column 18, :line 6905, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 6905, :column 4, :line 6905, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6905, :column 5, :line 6905, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6905, :column 16, :line 6905, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6905, :column 18, :line 6905, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6902, :column 7, :line 6902, :file "cljs/core.cljs"} sorted-map-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 172, :column 10, :line 172, :file "cljs/core.cljs"} apply ^{:arglists (^{:end-column 12, :end-line 2831, :column 4, :line 2831, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2831, :column 5, :line 2831, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2831, :column 7, :line 2831, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2839, :column 4, :line 2839, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2839, :column 5, :line 2839, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2839, :column 9, :line 2839, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2848, :column 4, :line 2848, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2848, :column 5, :line 2848, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2848, :column 7, :line 2848, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2848, :column 9, :line 2848, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2848, :column 11, :line 2848, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2857, :column 4, :line 2857, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2857, :column 5, :line 2857, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2857, :column 7, :line 2857, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2857, :column 9, :line 2857, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2857, :column 11, :line 2857, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2857, :column 13, :line 2857, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2866, :column 4, :line 2866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2866, :column 5, :line 2866, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2866, :column 7, :line 2866, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2866, :column 9, :line 2866, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2866, :column 11, :line 2866, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2866, :column 13, :line 2866, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2866, :column 15, :line 2866, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2866, :column 17, :line 2866, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2831, :column 5, :line 2831, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2831, :column 7, :line 2831, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2839, :column 5, :line 2839, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2839, :column 9, :line 2839, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2848, :column 5, :line 2848, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2848, :column 7, :line 2848, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2848, :column 9, :line 2848, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2848, :column 11, :line 2848, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2857, :column 5, :line 2857, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2857, :column 7, :line 2857, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2857, :column 9, :line 2857, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2857, :column 11, :line 2857, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2857, :column 13, :line 2857, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2866, :column 5, :line 2866, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2866, :column 7, :line 2866, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2866, :column 9, :line 2866, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2866, :column 11, :line 2866, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2866, :column 13, :line 2866, :file "cljs/core.cljs"} d & ^{:end-column 22, :end-line 2866, :column 17, :line 2866, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2831, :column 4, :line 2831, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2831, :column 5, :line 2831, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2831, :column 7, :line 2831, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2839, :column 4, :line 2839, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2839, :column 5, :line 2839, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2839, :column 9, :line 2839, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2848, :column 4, :line 2848, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2848, :column 5, :line 2848, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2848, :column 7, :line 2848, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2848, :column 9, :line 2848, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2848, :column 11, :line 2848, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2857, :column 4, :line 2857, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2857, :column 5, :line 2857, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2857, :column 7, :line 2857, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2857, :column 9, :line 2857, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2857, :column 11, :line 2857, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2857, :column 13, :line 2857, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2866, :column 4, :line 2866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2866, :column 5, :line 2866, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2866, :column 7, :line 2866, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2866, :column 9, :line 2866, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2866, :column 11, :line 2866, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2866, :column 13, :line 2866, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2866, :column 15, :line 2866, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2866, :column 17, :line 2866, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} apply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 8459, :column 29, :line 8459, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8459, :column 8, :line 8459, :file "cljs/core.cljs"} get-global-hierarchy ^{:arglists (^{:end-column 31, :end-line 8459, :column 29, :line 8459, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8459, :column 8, :line 8459, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 8459, :column 29, :line 8459, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8459, :column 8, :line 8459, :file "cljs/core.cljs"} get-global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 497, :column 32, :line 497, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 497, :column 33, :line 497, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} add-to-string-hash-cache ^{:arglists (^{:end-column 35, :end-line 497, :column 32, :line 497, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 497, :column 33, :line 497, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 35, :end-line 497, :column 33, :line 497, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 497, :column 32, :line 497, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 497, :column 33, :line 497, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} add-to-string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 8325, :column 10, :line 8325, :file "cljs/core.cljs"} clj->js ^{:arglists (^{:end-column 7, :end-line 8341, :column 4, :line 8341, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8341, :column 5, :line 8341, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 8337, :column 7, :line 8337, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8341, :column 5, :line 8341, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8341, :column 4, :line 8341, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8341, :column 5, :line 8341, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 8337, :column 7, :line 8337, :file "cljs/core.cljs"} clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 5024, :column 10, :line 5024, :file "cljs/core.cljs"} TransientArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 5272, :column 10, :line 5272, :file "cljs/core.cljs"} TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 5274, :column 28, :line 5272, :file "cljs/core.cljs"} [^{:mutable true, :end-column 49, :end-line 5272, :column 39, :line 5272, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5273, :column 39, :line 5273, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5274, :column 29, :line 5274, :file "cljs/core.cljs"} arr], :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists ([^{:mutable true, :end-column 41, :end-line 4504, :column 37, :line 4504, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4505, :column 37, :line 4505, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4506, :column 37, :line 4506, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4507, :column 37, :line 4507, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 4504, :column 10, :line 4504, :file "cljs/core.cljs"} ->TransientVector ^{:arglists ([^{:mutable true, :end-column 41, :end-line 4504, :column 37, :line 4504, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4505, :column 37, :line 4505, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4506, :column 37, :line 4506, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4507, :column 37, :line 4507, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 4504, :column 10, :line 4504, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientVector [^{:mutable true, :end-column 41, :end-line 4504, :column 37, :line 4504, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4505, :column 37, :line 4505, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4506, :column 37, :line 4506, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4507, :column 37, :line 4507, :file "cljs/core.cljs"} tail]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 41, :end-line 4504, :column 37, :line 4504, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4505, :column 37, :line 4505, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4506, :column 37, :line 4506, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4507, :column 37, :line 4507, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 4504, :column 10, :line 4504, :file "cljs/core.cljs"} ->TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 27, :end-line 379, :column 14, :line 379, :file "cljs/core.cljs"} IChunkedNext ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons), :protocol-info {:methods {^{:end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 27, :end-line 379, :column 14, :line 379, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 27, :end-line 379, :column 14, :line 379, :file "cljs/core.cljs"} IChunkedNext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3711, :column 8, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3709, :column 7, :line 3709, :file "cljs/core.cljs"} interpose ^{:arglists (^{:end-column 13, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3711, :column 8, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3709, :column 7, :line 3709, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3711, :column 8, :line 3711, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3711, :column 8, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3709, :column 7, :line 3709, :file "cljs/core.cljs"} interpose, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 6367, :column 21, :line 6367, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6367, :column 25, :line 6367, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6367, :column 29, :line 6367, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6367, :column 34, :line 6367, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6367, :column 50, :line 6367, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 6367, :column 10, :line 6367, :file "cljs/core.cljs"} ->BlackNode ^{:arglists ([^{:end-column 25, :end-line 6367, :column 21, :line 6367, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6367, :column 25, :line 6367, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6367, :column 29, :line 6367, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6367, :column 34, :line 6367, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6367, :column 50, :line 6367, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 6367, :column 10, :line 6367, :file "cljs/core.cljs"} {:arglists (^cljs.core/BlackNode [^{:end-column 25, :end-line 6367, :column 21, :line 6367, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6367, :column 25, :line 6367, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6367, :column 29, :line 6367, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6367, :column 34, :line 6367, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6367, :column 50, :line 6367, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 6367, :column 21, :line 6367, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6367, :column 25, :line 6367, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6367, :column 29, :line 6367, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6367, :column 34, :line 6367, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6367, :column 50, :line 6367, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 6367, :column 10, :line 6367, :file "cljs/core.cljs"} ->BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 769, :column 10, :line 769, :file "cljs/core.cljs"} deref ^{:declared true, :end-column 79, :end-line 5353, :column 73, :line 5353, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 79, :end-line 5353, :column 73, :line 5353, :file "cljs/core.cljs"} deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 3924, :column 16, :line 3924, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3924, :column 17, :line 3924, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3924, :column 22, :line 3924, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3924, :column 8, :line 3924, :file "cljs/core.cljs"} pv-aget ^{:arglists (^{:end-column 26, :end-line 3924, :column 16, :line 3924, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3924, :column 17, :line 3924, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3924, :column 22, :line 3924, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3924, :column 8, :line 3924, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3924, :column 17, :line 3924, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3924, :column 22, :line 3924, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 3924, :column 16, :line 3924, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3924, :column 17, :line 3924, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3924, :column 22, :line 3924, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3924, :column 8, :line 3924, :file "cljs/core.cljs"} pv-aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 1228, :column 4, :line 1228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1228, :column 5, :line 1228, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1228, :column 10, :line 1228, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1228, :column 12, :line 1228, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1232, :column 10, :line 1232, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1232, :column 12, :line 1232, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1232, :column 14, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1223, :column 7, :line 1223, :file "cljs/core.cljs"} assoc ^{:arglists (^{:end-column 14, :end-line 1228, :column 4, :line 1228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1228, :column 5, :line 1228, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1228, :column 10, :line 1228, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1228, :column 12, :line 1228, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1232, :column 10, :line 1232, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1232, :column 12, :line 1232, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1232, :column 14, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1223, :column 7, :line 1223, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1228, :column 5, :line 1228, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1228, :column 10, :line 1228, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1228, :column 12, :line 1228, :file "cljs/core.cljs"} v] [^{:end-column 10, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1232, :column 10, :line 1232, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1232, :column 12, :line 1232, :file "cljs/core.cljs"} v & ^{:end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 1228, :column 4, :line 1228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1228, :column 5, :line 1228, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1228, :column 10, :line 1228, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1228, :column 12, :line 1228, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1232, :column 10, :line 1232, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1232, :column 12, :line 1232, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1232, :column 14, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1223, :column 7, :line 1223, :file "cljs/core.cljs"} assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2759, :column 3, :line 2759, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2759, :column 4, :line 2759, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2757, :column 7, :line 2757, :file "cljs/core.cljs"} transient ^{:arglists (^{:end-column 9, :end-line 2759, :column 3, :line 2759, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2759, :column 4, :line 2759, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2757, :column 7, :line 2757, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 2759, :column 4, :line 2759, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2759, :column 3, :line 2759, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2759, :column 4, :line 2759, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2757, :column 7, :line 2757, :file "cljs/core.cljs"} transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -disjoin ^{:arglists (^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -disjoin, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2578, :column 18, :line 2578, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2578, :column 19, :line 2578, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2578, :column 25, :line 2578, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2578, :column 7, :line 2578, :file "cljs/core.cljs"} chunk-cons ^{:arglists (^{:end-column 30, :end-line 2578, :column 18, :line 2578, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2578, :column 19, :line 2578, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2578, :column 25, :line 2578, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2578, :column 7, :line 2578, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2578, :column 19, :line 2578, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2578, :column 25, :line 2578, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2578, :column 18, :line 2578, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2578, :column 19, :line 2578, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2578, :column 25, :line 2578, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2578, :column 7, :line 2578, :file "cljs/core.cljs"} chunk-cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2923, :column 10, :line 2923, :file "cljs/core.cljs"} ArrayIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2923, :column 10, :line 2923, :file "cljs/core.cljs"} ArrayIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 37, :end-line 2923, :column 20, :line 2923, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2923, :column 21, :line 2923, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2923, :column 35, :line 2923, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 9, :end-line 8899, :column 3, :line 8899, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8899, :column 4, :line 8899, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8897, :column 7, :line 8897, :file "cljs/core.cljs"} comparator ^{:arglists (^{:end-column 9, :end-line 8899, :column 3, :line 8899, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8899, :column 4, :line 8899, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8897, :column 7, :line 8897, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 8899, :column 4, :line 8899, :file "cljs/core.cljs"} pred]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8899, :column 3, :line 8899, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8899, :column 4, :line 8899, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8897, :column 7, :line 8897, :file "cljs/core.cljs"} comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6896, :column 4, :line 6896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6896, :column 5, :line 6896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6896, :column 7, :line 6896, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6893, :column 7, :line 6893, :file "cljs/core.cljs"} sorted-map ^{:arglists (^{:end-column 15, :end-line 6896, :column 4, :line 6896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6896, :column 5, :line 6896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6896, :column 7, :line 6896, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6893, :column 7, :line 6893, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 15, :end-line 6896, :column 7, :line 6896, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6896, :column 4, :line 6896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6896, :column 5, :line 6896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6896, :column 7, :line 6896, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6893, :column 7, :line 6893, :file "cljs/core.cljs"} sorted-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3642, :column 4, :line 3642, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3642, :column 5, :line 3642, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3655, :column 4, :line 3655, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3655, :column 5, :line 3655, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3655, :column 10, :line 3655, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3638, :column 7, :line 3638, :file "cljs/core.cljs"} drop-while ^{:arglists (^{:end-column 10, :end-line 3642, :column 4, :line 3642, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3642, :column 5, :line 3642, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3655, :column 4, :line 3655, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3655, :column 5, :line 3655, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3655, :column 10, :line 3655, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3638, :column 7, :line 3638, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3642, :column 5, :line 3642, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3655, :column 5, :line 3655, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3655, :column 10, :line 3655, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3642, :column 4, :line 3642, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3642, :column 5, :line 3642, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3655, :column 4, :line 3655, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3655, :column 5, :line 3655, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3655, :column 10, :line 3655, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3638, :column 7, :line 3638, :file "cljs/core.cljs"} drop-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]], ^{:end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 22, :end-line 329, :column 14, :line 329, :file "cljs/core.cljs"} IWriter ^{:impls (cljs.core/StringBufferWriter), :protocol-info {:methods {^{:end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]], ^{:end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 22, :end-line 329, :column 14, :line 329, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]], ^{:end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 22, :end-line 329, :column 14, :line 329, :file "cljs/core.cljs"} IWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6912, :column 10, :line 6912, :file "cljs/core.cljs"} KeySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6912, :column 10, :line 6912, :file "cljs/core.cljs"} KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6912, :column 17, :line 6912, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6912, :column 19, :line 6912, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6912, :column 30, :line 6912, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6912, :column 35, :line 6912, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8247, :column 3, :line 8247, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8245, :column 8, :line 8245, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8245, :column 16, :line 8245, :file "cljs/core.cljs"} realized? ^{:arglists (^{:end-column 6, :end-line 8247, :column 3, :line 8247, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8245, :column 8, :line 8245, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8245, :column 16, :line 8245, :file "cljs/core.cljs"} {:arglists (^^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean [^{:end-column 6, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8247, :column 3, :line 8247, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8245, :column 8, :line 8245, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8245, :column 16, :line 8245, :file "cljs/core.cljs"} realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4959, :column 36, :line 4959, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4959, :column 37, :line 4959, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4959, :column 41, :line 4959, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4959, :column 43, :line 4959, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4959, :column 8, :line 4959, :file "cljs/core.cljs"} array-map-index-of-keyword? ^{:arglists (^{:end-column 45, :end-line 4959, :column 36, :line 4959, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4959, :column 37, :line 4959, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4959, :column 41, :line 4959, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4959, :column 43, :line 4959, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4959, :column 8, :line 4959, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 4959, :column 37, :line 4959, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4959, :column 41, :line 4959, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4959, :column 43, :line 4959, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4959, :column 36, :line 4959, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4959, :column 37, :line 4959, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4959, :column 41, :line 4959, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4959, :column 43, :line 4959, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4959, :column 8, :line 4959, :file "cljs/core.cljs"} array-map-index-of-keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn* ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 10, :end-line 25, :column 8, :line 25, :file "cljs/core.cljs"} _]), :tag function, :op :var, :name ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 32, :end-line 479, :column 24, :line 479, :file "cljs/core.cljs"} compare ^{:arglists (^{:end-column 8, :end-line 1527, :column 3, :line 1527, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1527, :column 6, :line 1527, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1522, :column 8, :line 1522, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1522, :column 15, :line 1522, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1527, :column 6, :line 1527, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1527, :column 3, :line 1527, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1527, :column 6, :line 1527, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1522, :column 8, :line 1522, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1522, :column 15, :line 1522, :file "cljs/core.cljs"} compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3176, :column 3, :line 3176, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3173, :column 8, :line 3173, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3173, :column 16, :line 3173, :file "cljs/core.cljs"} complement ^{:arglists (^{:end-column 6, :end-line 3176, :column 3, :line 3176, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3173, :column 8, :line 3173, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3173, :column 16, :line 3173, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3176, :column 3, :line 3176, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3173, :column 8, :line 3173, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3173, :column 16, :line 3173, :file "cljs/core.cljs"} complement, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 41, :end-line 1438, :column 1, :line 1438, :file "cljs/core.cljs"} lookup-sentinel ^{:private true, :end-column 41, :end-line 1438, :column 1, :line 1438, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 41, :end-line 1438, :column 1, :line 1438, :file "cljs/core.cljs"} lookup-sentinel, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} -assoc! ^{:arglists (^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} -assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup* ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 2920, :column 19, :line 2920, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2920, :column 20, :line 2920, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2920, :column 7, :line 2920, :file "cljs/core.cljs"} string-iter ^{:arglists (^{:end-column 22, :end-line 2920, :column 19, :line 2920, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2920, :column 20, :line 2920, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2920, :column 7, :line 2920, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringIter [^{:end-column 22, :end-line 2920, :column 20, :line 2920, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2920, :column 19, :line 2920, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2920, :column 20, :line 2920, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2920, :column 7, :line 2920, :file "cljs/core.cljs"} string-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} -key->js ^{:arglists (^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} -key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 21, :end-line 284, :column 14, :line 284, :file "cljs/core.cljs"} IDeref ^{:impls (cljs.core/Delay cljs.core/Atom cljs.core/Reduced), :protocol-info {:methods {^{:end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 21, :end-line 284, :column 14, :line 284, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 21, :end-line 284, :column 14, :line 284, :file "cljs/core.cljs"} IDeref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1517, :column 3, :line 1517, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1517, :column 4, :line 1517, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 12, :end-line 1514, :column 8, :line 1514, :file "cljs/core.cljs"} seq, :end-column 21, :end-line 1514, :column 12, :line 1514, :file "cljs/core.cljs"} sequence ^{:arglists (^{:end-column 10, :end-line 3126, :column 4, :line 3126, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3126, :column 5, :line 3126, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3130, :column 4, :line 3130, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3130, :column 5, :line 3130, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3130, :column 11, :line 3130, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3132, :column 4, :line 3132, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3132, :column 5, :line 3132, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3132, :column 11, :line 3132, :file "cljs/core.cljs"} coll ^{:end-column 18, :end-line 3132, :column 16, :line 3132, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3132, :column 18, :line 3132, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 16, :end-line 3117, :column 7, :line 3117, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 3126, :column 5, :line 3126, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 3130, :column 5, :line 3130, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3130, :column 11, :line 3130, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 3132, :column 5, :line 3132, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3132, :column 11, :line 3132, :file "cljs/core.cljs"} coll & ^{:end-column 24, :end-line 3132, :column 18, :line 3132, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3126, :column 4, :line 3126, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3126, :column 5, :line 3126, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3130, :column 4, :line 3130, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3130, :column 5, :line 3130, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3130, :column 11, :line 3130, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3132, :column 4, :line 3132, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3132, :column 5, :line 3132, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3132, :column 11, :line 3132, :file "cljs/core.cljs"} coll ^{:end-column 18, :end-line 3132, :column 16, :line 3132, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3132, :column 18, :line 3132, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 16, :end-line 3117, :column 7, :line 3117, :file "cljs/core.cljs"} sequence, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3185, :column 3, :line 3185, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3185, :column 4, :line 3185, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} constantly ^{:arglists (^{:end-column 6, :end-line 3185, :column 3, :line 3185, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3185, :column 4, :line 3185, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3185, :column 4, :line 3185, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3185, :column 3, :line 3185, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3185, :column 4, :line 3185, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} constantly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 38, :end-line 4016, :column 36, :line 4016, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 53, :end-line 4016, :column 48, :line 4016, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 67, :end-line 4016, :column 63, :line 4016, :file "cljs/core.cljs"} arr ^{:end-column 69, :end-line 4016, :column 67, :line 4016, :file "cljs/core.cljs"} v ^{:end-column 75, :end-line 4016, :column 69, :line 4016, :file "cljs/core.cljs"} start ^{:end-column 79, :end-line 4016, :column 75, :line 4016, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 25, :end-line 4016, :column 10, :line 4016, :file "cljs/core.cljs"} ->RangedIterator ^{:arglists ([^{:mutable true, :end-column 38, :end-line 4016, :column 36, :line 4016, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 53, :end-line 4016, :column 48, :line 4016, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 67, :end-line 4016, :column 63, :line 4016, :file "cljs/core.cljs"} arr ^{:end-column 69, :end-line 4016, :column 67, :line 4016, :file "cljs/core.cljs"} v ^{:end-column 75, :end-line 4016, :column 69, :line 4016, :file "cljs/core.cljs"} start ^{:end-column 79, :end-line 4016, :column 75, :line 4016, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 25, :end-line 4016, :column 10, :line 4016, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangedIterator [^{:mutable true, :end-column 38, :end-line 4016, :column 36, :line 4016, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 53, :end-line 4016, :column 48, :line 4016, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 67, :end-line 4016, :column 63, :line 4016, :file "cljs/core.cljs"} arr ^{:end-column 69, :end-line 4016, :column 67, :line 4016, :file "cljs/core.cljs"} v ^{:end-column 75, :end-line 4016, :column 69, :line 4016, :file "cljs/core.cljs"} start ^{:end-column 79, :end-line 4016, :column 75, :line 4016, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 38, :end-line 4016, :column 36, :line 4016, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 53, :end-line 4016, :column 48, :line 4016, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 67, :end-line 4016, :column 63, :line 4016, :file "cljs/core.cljs"} arr ^{:end-column 69, :end-line 4016, :column 67, :line 4016, :file "cljs/core.cljs"} v ^{:end-column 75, :end-line 4016, :column 69, :line 4016, :file "cljs/core.cljs"} start ^{:end-column 79, :end-line 4016, :column 75, :line 4016, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 25, :end-line 4016, :column 10, :line 4016, :file "cljs/core.cljs"} ->RangedIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 53, :end-line 4036, :column 41, :line 4036, :file "cljs/core.cljs"} chunked-seq ^{:arglists (^{:end-column 15, :end-line 4326, :column 4, :line 4326, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4326, :column 5, :line 4326, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4326, :column 9, :line 4326, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4326, :column 11, :line 4326, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4327, :column 4, :line 4327, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4327, :column 5, :line 4327, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4327, :column 9, :line 4327, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4327, :column 14, :line 4327, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4327, :column 16, :line 4327, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4328, :column 4, :line 4328, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4328, :column 5, :line 4328, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4328, :column 9, :line 4328, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4328, :column 14, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4328, :column 16, :line 4328, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4328, :column 20, :line 4328, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 4325, :column 7, :line 4325, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4326, :column 5, :line 4326, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4326, :column 9, :line 4326, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4326, :column 11, :line 4326, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4327, :column 5, :line 4327, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4327, :column 9, :line 4327, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4327, :column 14, :line 4327, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4327, :column 16, :line 4327, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4328, :column 5, :line 4328, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4328, :column 9, :line 4328, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4328, :column 14, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4328, :column 16, :line 4328, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4328, :column 20, :line 4328, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 4326, :column 4, :line 4326, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4326, :column 5, :line 4326, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4326, :column 9, :line 4326, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4326, :column 11, :line 4326, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4327, :column 4, :line 4327, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4327, :column 5, :line 4327, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4327, :column 9, :line 4327, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4327, :column 14, :line 4327, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4327, :column 16, :line 4327, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4328, :column 4, :line 4328, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4328, :column 5, :line 4328, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4328, :column 9, :line 4328, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4328, :column 14, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4328, :column 16, :line 4328, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4328, :column 20, :line 4328, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 4325, :column 7, :line 4325, :file "cljs/core.cljs"} chunked-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]], ^{:end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]], ^{:end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 323, :column 14, :line 323, :file "cljs/core.cljs"} ISorted ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentTreeMap), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]], ^{:end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]], ^{:end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 323, :column 14, :line 323, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]], ^{:end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]], ^{:end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 323, :column 14, :line 323, :file "cljs/core.cljs"} ISorted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} make-array ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^array [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} make-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1922, :column 14, :line 1922, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1922, :column 7, :line 1922, :file "cljs/core.cljs"} shorts ^{:arglists (^{:end-column 17, :end-line 1922, :column 14, :line 1922, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1922, :column 7, :line 1922, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1922, :column 14, :line 1922, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1922, :column 7, :line 1922, :file "cljs/core.cljs"} shorts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if* ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 19, :end-line 957, :column 16, :line 957, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 957, :column 19, :line 957, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 957, :column 21, :line 957, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 957, :column 10, :line 957, :file "cljs/core.cljs"} ->RSeq ^{:arglists ([^{:end-column 19, :end-line 957, :column 16, :line 957, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 957, :column 19, :line 957, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 957, :column 21, :line 957, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 957, :column 10, :line 957, :file "cljs/core.cljs"} {:arglists (^cljs.core/RSeq [^{:end-column 19, :end-line 957, :column 16, :line 957, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 957, :column 19, :line 957, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 957, :column 21, :line 957, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 19, :end-line 957, :column 16, :line 957, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 957, :column 19, :line 957, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 957, :column 21, :line 957, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 957, :column 10, :line 957, :file "cljs/core.cljs"} ->RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print! ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} {:arglists (^function []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} -flush ^{:arglists (^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} -flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1680, :column 4, :line 1680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1680, :column 5, :line 1680, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1681, :column 7, :line 1681, :file "cljs/core.cljs"} cf]), :end-column 18, :end-line 1679, :column 7, :line 1679, :file "cljs/core.cljs"} completing ^{:arglists (^{:end-column 7, :end-line 1680, :column 4, :line 1680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1680, :column 5, :line 1680, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1681, :column 7, :line 1681, :file "cljs/core.cljs"} cf]), :end-column 18, :end-line 1679, :column 7, :line 1679, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1680, :column 5, :line 1680, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1681, :column 7, :line 1681, :file "cljs/core.cljs"} cf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1680, :column 4, :line 1680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1680, :column 5, :line 1680, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1681, :column 7, :line 1681, :file "cljs/core.cljs"} cf]), :end-column 18, :end-line 1679, :column 7, :line 1679, :file "cljs/core.cljs"} completing, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 1872, :column 28, :line 1872, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1872, :column 29, :line 1872, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1872, :column 7, :line 1872, :file "cljs/core.cljs"} unchecked-negate-int ^{:arglists (^{:end-column 31, :end-line 1872, :column 28, :line 1872, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1872, :column 29, :line 1872, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1872, :column 7, :line 1872, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 31, :end-line 1872, :column 29, :line 1872, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 1872, :column 28, :line 1872, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1872, :column 29, :line 1872, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1872, :column 7, :line 1872, :file "cljs/core.cljs"} unchecked-negate-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 4038, :column 28, :line 4038, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4038, :column 33, :line 4038, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4038, :column 37, :line 4038, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 4038, :column 43, :line 4038, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 4038, :column 48, :line 4038, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 4038, :column 63, :line 4038, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 4038, :column 10, :line 4038, :file "cljs/core.cljs"} ->PersistentVector ^{:arglists ([^{:end-column 33, :end-line 4038, :column 28, :line 4038, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4038, :column 33, :line 4038, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4038, :column 37, :line 4038, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 4038, :column 43, :line 4038, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 4038, :column 48, :line 4038, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 4038, :column 63, :line 4038, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 4038, :column 10, :line 4038, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentVector [^{:end-column 33, :end-line 4038, :column 28, :line 4038, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4038, :column 33, :line 4038, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4038, :column 37, :line 4038, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 4038, :column 43, :line 4038, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 4038, :column 48, :line 4038, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 4038, :column 63, :line 4038, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 4038, :column 28, :line 4038, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4038, :column 33, :line 4038, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4038, :column 37, :line 4038, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 4038, :column 43, :line 4038, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 4038, :column 48, :line 4038, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 4038, :column 63, :line 4038, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 4038, :column 10, :line 4038, :file "cljs/core.cljs"} ->PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 732, :column 24, :line 732, :file "cljs/core.cljs"} equiv-sequential ^{:arglists (^{:end-column 8, :end-line 2083, :column 3, :line 2083, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2083, :column 4, :line 2083, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2083, :column 6, :line 2083, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 2080, :column 8, :line 2080, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 2083, :column 4, :line 2083, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2083, :column 6, :line 2083, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2083, :column 3, :line 2083, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2083, :column 4, :line 2083, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2083, :column 6, :line 2083, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 2080, :column 8, :line 2080, :file "cljs/core.cljs"} equiv-sequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 725, :column 3, :line 725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 725, :column 4, :line 725, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 719, :column 8, :line 719, :file "cljs/core.cljs"} number, :end-column 35, :end-line 719, :column 15, :line 719, :file "cljs/core.cljs"} hash-unordered-coll ^{:arglists (^{:end-column 9, :end-line 725, :column 3, :line 725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 725, :column 4, :line 725, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 719, :column 8, :line 719, :file "cljs/core.cljs"} number, :end-column 35, :end-line 719, :column 15, :line 719, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 9, :end-line 725, :column 4, :line 725, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 725, :column 3, :line 725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 725, :column 4, :line 725, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 719, :column 8, :line 719, :file "cljs/core.cljs"} number, :end-column 35, :end-line 719, :column 15, :line 719, :file "cljs/core.cljs"} hash-unordered-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3676, :column 4, :line 3676, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3676, :column 5, :line 3676, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3677, :column 4, :line 3677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3677, :column 5, :line 3677, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3677, :column 7, :line 3677, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} repeat ^{:arglists (^{:end-column 7, :end-line 3676, :column 4, :line 3676, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3676, :column 5, :line 3676, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3677, :column 4, :line 3677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3677, :column 5, :line 3677, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3677, :column 7, :line 3677, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3676, :column 5, :line 3676, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3677, :column 5, :line 3677, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3677, :column 7, :line 3677, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3676, :column 4, :line 3676, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3676, :column 5, :line 3676, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3677, :column 4, :line 3677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3677, :column 5, :line 3677, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3677, :column 7, :line 3677, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} repeat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1849, :column 21, :line 1849, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1849, :column 22, :line 1849, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1849, :column 7, :line 1849, :file "cljs/core.cljs"} unchecked-inc ^{:arglists (^{:end-column 24, :end-line 1849, :column 21, :line 1849, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1849, :column 22, :line 1849, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1849, :column 7, :line 1849, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1849, :column 22, :line 1849, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1849, :column 21, :line 1849, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1849, :column 22, :line 1849, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1849, :column 7, :line 1849, :file "cljs/core.cljs"} unchecked-inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2050, :column 3, :line 2050, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2050, :column 9, :line 2050, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2048, :column 7, :line 2048, :file "cljs/core.cljs"} nthnext ^{:arglists (^{:end-column 11, :end-line 2050, :column 3, :line 2050, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2050, :column 9, :line 2050, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2048, :column 7, :line 2048, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq [^{:end-column 9, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2050, :column 9, :line 2050, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2050, :column 3, :line 2050, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2050, :column 9, :line 2050, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2048, :column 7, :line 2048, :file "cljs/core.cljs"} nthnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8251, :column 3, :line 8251, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8251, :column 4, :line 8251, :file "cljs/core.cljs"} rf]), :private true, :end-column 27, :end-line 8250, :column 8, :line 8250, :file "cljs/core.cljs"} preserving-reduced ^{:arglists (^{:end-column 7, :end-line 8251, :column 3, :line 8251, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8251, :column 4, :line 8251, :file "cljs/core.cljs"} rf]), :private true, :end-column 27, :end-line 8250, :column 8, :line 8250, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 8251, :column 4, :line 8251, :file "cljs/core.cljs"} rf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8251, :column 3, :line 8251, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8251, :column 4, :line 8251, :file "cljs/core.cljs"} rf]), :private true, :end-column 27, :end-line 8250, :column 8, :line 8250, :file "cljs/core.cljs"} preserving-reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3412, :column 3, :line 3412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3412, :column 4, :line 3412, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3410, :column 7, :line 3410, :file "cljs/core.cljs"} get-validator ^{:arglists (^{:end-column 9, :end-line 3412, :column 3, :line 3412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3412, :column 4, :line 3412, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3410, :column 7, :line 3410, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3412, :column 4, :line 3412, :file "cljs/core.cljs"} iref]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3412, :column 3, :line 3412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3412, :column 4, :line 3412, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3410, :column 7, :line 3410, :file "cljs/core.cljs"} get-validator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2911, :column 10, :line 2911, :file "cljs/core.cljs"} StringIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2911, :column 10, :line 2911, :file "cljs/core.cljs"} StringIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 36, :end-line 2911, :column 21, :line 2911, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2911, :column 22, :line 2911, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2911, :column 34, :line 2911, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number? ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -conj! ^{:arglists (^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 37, :end-line 5026, :column 33, :line 5026, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5026, :column 37, :line 5026, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5026, :column 39, :line 5026, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 5026, :column 10, :line 5026, :file "cljs/core.cljs"} ->PersistentArrayMapSeq ^{:arglists ([^{:end-column 37, :end-line 5026, :column 33, :line 5026, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5026, :column 37, :line 5026, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5026, :column 39, :line 5026, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 5026, :column 10, :line 5026, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMapSeq [^{:end-column 37, :end-line 5026, :column 33, :line 5026, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5026, :column 37, :line 5026, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5026, :column 39, :line 5026, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 37, :end-line 5026, :column 33, :line 5026, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5026, :column 37, :line 5026, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5026, :column 39, :line 5026, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 5026, :column 10, :line 5026, :file "cljs/core.cljs"} ->PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2595, :column 18, :line 2595, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2595, :column 19, :line 2595, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} chunk-next ^{:arglists (^{:end-column 21, :end-line 2595, :column 18, :line 2595, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2595, :column 19, :line 2595, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2595, :column 19, :line 2595, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2595, :column 18, :line 2595, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2595, :column 19, :line 2595, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} chunk-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7418, :column 10, :line 7418, :file "cljs/core.cljs"} ArrayList {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7418, :column 10, :line 7418, :file "cljs/core.cljs"} ArrayList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 35, :end-line 7418, :column 20, :line 7418, :file "cljs/core.cljs"} [^{:mutable true, :end-column 35, :end-line 7418, :column 31, :line 7418, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 11, :end-line 8012, :column 3, :line 8012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8012, :column 4, :line 8012, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8012, :column 6, :line 8012, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 8010, :column 7, :line 8010, :file "cljs/core.cljs"} print-str ^{:arglists (^{:end-column 11, :end-line 8012, :column 3, :line 8012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8012, :column 4, :line 8012, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8012, :column 6, :line 8012, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 8010, :column 7, :line 8010, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 8012, :column 6, :line 8012, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8012, :column 3, :line 8012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8012, :column 4, :line 8012, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8012, :column 6, :line 8012, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 8010, :column 7, :line 8010, :file "cljs/core.cljs"} print-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3161, :column 3, :line 3161, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3161, :column 4, :line 3161, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3161, :column 9, :line 3161, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3158, :column 8, :line 3158, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3158, :column 16, :line 3158, :file "cljs/core.cljs"} not-any? ^{:arglists (^{:end-column 14, :end-line 3161, :column 3, :line 3161, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3161, :column 4, :line 3161, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3161, :column 9, :line 3161, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3158, :column 8, :line 3158, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3158, :column 16, :line 3158, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 3161, :column 4, :line 3161, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3161, :column 9, :line 3161, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3161, :column 3, :line 3161, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3161, :column 4, :line 3161, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3161, :column 9, :line 3161, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3158, :column 8, :line 3158, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3158, :column 16, :line 3158, :file "cljs/core.cljs"} not-any?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 47, :column 10, :line 47, :file "cljs/core.cljs"} into-array ^{:arglists (^{:end-column 10, :end-line 196, :column 4, :line 196, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 198, :column 4, :line 198, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 195, :column 8, :line 195, :file "cljs/core.cljs"} array, :end-column 25, :end-line 195, :column 14, :line 195, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 196, :column 4, :line 196, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 198, :column 4, :line 198, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 195, :column 8, :line 195, :file "cljs/core.cljs"} array, :end-column 25, :end-line 195, :column 14, :line 195, :file "cljs/core.cljs"} into-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} -hash ^{:arglists (^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} -hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} -dissoc! ^{:arglists (^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} -dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 771, :column 19, :line 771, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 771, :column 10, :line 771, :file "cljs/core.cljs"} ->Reduced ^{:arglists ([^{:end-column 23, :end-line 771, :column 19, :line 771, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 771, :column 10, :line 771, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 23, :end-line 771, :column 19, :line 771, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 771, :column 19, :line 771, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 771, :column 10, :line 771, :file "cljs/core.cljs"} ->Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2481, :column 20, :line 2481, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2481, :column 21, :line 2481, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2481, :column 7, :line 2481, :file "cljs/core.cljs"} chunk-buffer ^{:arglists (^{:end-column 30, :end-line 2481, :column 20, :line 2481, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2481, :column 21, :line 2481, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2481, :column 7, :line 2481, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:end-column 30, :end-line 2481, :column 21, :line 2481, :file "cljs/core.cljs"} capacity]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2481, :column 20, :line 2481, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2481, :column 21, :line 2481, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2481, :column 7, :line 2481, :file "cljs/core.cljs"} chunk-buffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1460, :column 3, :line 1460, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1460, :column 4, :line 1460, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1458, :column 8, :line 1458, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1458, :column 16, :line 1458, :file "cljs/core.cljs"} seqable? ^{:arglists (^{:end-column 6, :end-line 1460, :column 3, :line 1460, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1460, :column 4, :line 1460, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1458, :column 8, :line 1458, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1458, :column 16, :line 1458, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1460, :column 4, :line 1460, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1460, :column 3, :line 1460, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1460, :column 4, :line 1460, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1458, :column 8, :line 1458, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1458, :column 16, :line 1458, :file "cljs/core.cljs"} seqable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 542, :column 24, :line 542, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 542, :column 25, :line 542, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 542, :column 8, :line 542, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 542, :column 16, :line 542, :file "cljs/core.cljs"} symbol? ^{:arglists (^{:end-column 27, :end-line 542, :column 24, :line 542, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 542, :column 25, :line 542, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 542, :column 8, :line 542, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 542, :column 16, :line 542, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 542, :column 25, :line 542, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 542, :column 24, :line 542, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 542, :column 25, :line 542, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 542, :column 8, :line 542, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 542, :column 16, :line 542, :file "cljs/core.cljs"} symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 463, :column 39, :line 463, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 463, :column 40, :line 463, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 463, :column 8, :line 463, :file "cljs/core.cljs"} number, :end-column 39, :end-line 463, :column 15, :line 463, :file "cljs/core.cljs"} m3-hash-unencoded-chars ^{:arglists (^{:end-column 43, :end-line 463, :column 39, :line 463, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 463, :column 40, :line 463, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 463, :column 8, :line 463, :file "cljs/core.cljs"} number, :end-column 39, :end-line 463, :column 15, :line 463, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 43, :end-line 463, :column 40, :line 463, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 463, :column 39, :line 463, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 463, :column 40, :line 463, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 463, :column 8, :line 463, :file "cljs/core.cljs"} number, :end-column 39, :end-line 463, :column 15, :line 463, :file "cljs/core.cljs"} m3-hash-unencoded-chars, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1817, :column 30, :line 1817, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1817, :column 31, :line 1817, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} unchecked-char ^{:arglists (^{:end-column 33, :end-line 1817, :column 30, :line 1817, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1817, :column 31, :line 1817, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1817, :column 31, :line 1817, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1817, :column 30, :line 1817, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1817, :column 31, :line 1817, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} unchecked-char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4731, :column 10, :line 4731, :file "cljs/core.cljs"} NeverEquiv {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4731, :column 10, :line 4731, :file "cljs/core.cljs"} NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 4731, :column 21, :line 4731, :file "cljs/core.cljs"} [], :protocols #{Object cljs.core/IEquiv}}, ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1361, :column 3, :line 1361, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1361, :column 4, :line 1361, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1359, :column 8, :line 1359, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1359, :column 16, :line 1359, :file "cljs/core.cljs"} coll? ^{:arglists (^{:end-column 6, :end-line 1361, :column 3, :line 1361, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1361, :column 4, :line 1361, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1359, :column 8, :line 1359, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1359, :column 16, :line 1359, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1361, :column 4, :line 1361, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1361, :column 3, :line 1361, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1361, :column 4, :line 1361, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1359, :column 8, :line 1359, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1359, :column 16, :line 1359, :file "cljs/core.cljs"} coll?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3866, :column 4, :line 3866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3866, :column 5, :line 3866, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3866, :column 7, :line 3866, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3860, :column 7, :line 3860, :file "cljs/core.cljs"} get-in ^{:arglists (^{:end-column 10, :end-line 3866, :column 4, :line 3866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3866, :column 5, :line 3866, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3866, :column 7, :line 3866, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3860, :column 7, :line 3860, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3866, :column 5, :line 3866, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3866, :column 7, :line 3866, :file "cljs/core.cljs"} ks] [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3866, :column 4, :line 3866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3866, :column 5, :line 3866, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3866, :column 7, :line 3866, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3860, :column 7, :line 3860, :file "cljs/core.cljs"} get-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1027, :column 3, :line 1027, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1025, :column 7, :line 1025, :file "cljs/core.cljs"} fnext ^{:arglists (^{:end-column 9, :end-line 1027, :column 3, :line 1027, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1025, :column 7, :line 1025, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1027, :column 3, :line 1027, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1025, :column 7, :line 1025, :file "cljs/core.cljs"} fnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 314, :column 14, :line 314, :file "cljs/core.cljs"} IList ^{:impls (cljs.core/Cons cljs.core/EmptyList cljs.core/List), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 314, :column 14, :line 314, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 314, :column 14, :line 314, :file "cljs/core.cljs"} IList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 35, :end-line 855, :column 30, :line 855, :file "cljs/core.cljs"} List {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2138, :column 10, :line 2138, :file "cljs/core.cljs"} List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 2138, :column 15, :line 2138, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2138, :column 16, :line 2138, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2138, :column 21, :line 2138, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2138, :column 27, :line 2138, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2138, :column 32, :line 2138, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2138, :column 48, :line 2138, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} -val ^{:arglists (^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} -val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1920, :column 13, :line 1920, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1920, :column 14, :line 1920, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1920, :column 7, :line 1920, :file "cljs/core.cljs"} bytes ^{:arglists (^{:end-column 16, :end-line 1920, :column 13, :line 1920, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1920, :column 14, :line 1920, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1920, :column 7, :line 1920, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1920, :column 14, :line 1920, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1920, :column 13, :line 1920, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1920, :column 14, :line 1920, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1920, :column 7, :line 1920, :file "cljs/core.cljs"} bytes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 4800, :column 18, :line 4800, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4800, :column 23, :line 4800, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4800, :column 28, :line 4800, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4800, :column 35, :line 4800, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4800, :column 58, :line 4800, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4800, :column 10, :line 4800, :file "cljs/core.cljs"} ->ObjMap ^{:arglists ([^{:end-column 23, :end-line 4800, :column 18, :line 4800, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4800, :column 23, :line 4800, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4800, :column 28, :line 4800, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4800, :column 35, :line 4800, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4800, :column 58, :line 4800, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4800, :column 10, :line 4800, :file "cljs/core.cljs"} {:arglists (^cljs.core/ObjMap [^{:end-column 23, :end-line 4800, :column 18, :line 4800, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4800, :column 23, :line 4800, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4800, :column 28, :line 4800, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4800, :column 35, :line 4800, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4800, :column 58, :line 4800, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 4800, :column 18, :line 4800, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4800, :column 23, :line 4800, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4800, :column 28, :line 4800, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4800, :column 35, :line 4800, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4800, :column 58, :line 4800, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4800, :column 10, :line 4800, :file "cljs/core.cljs"} ->ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 550, :column 24, :line 550, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 550, :column 25, :line 550, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 550, :column 27, :line 550, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 550, :column 8, :line 550, :file "cljs/core.cljs"} compare-symbols ^{:arglists (^{:end-column 29, :end-line 550, :column 24, :line 550, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 550, :column 25, :line 550, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 550, :column 27, :line 550, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 550, :column 8, :line 550, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 550, :column 25, :line 550, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 550, :column 27, :line 550, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 550, :column 24, :line 550, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 550, :column 25, :line 550, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 550, :column 27, :line 550, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 550, :column 8, :line 550, :file "cljs/core.cljs"} compare-symbols, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} -seq ^{:arglists (^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} -seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}}, :aliases {^{:end-column 38, :end-line 10, :column 30, :line 10, :file "cljs/core.cljs"} gstring ^{:end-column 26, :end-line 10, :column 14, :line 10, :file "cljs/core.cljs"} goog.string, ^{:end-column 38, :end-line 11, :column 30, :line 11, :file "cljs/core.cljs"} gobject ^{:end-column 26, :end-line 11, :column 14, :line 11, :file "cljs/core.cljs"} goog.object, ^{:end-column 36, :end-line 12, :column 29, :line 12, :file "cljs/core.cljs"} garray ^{:end-column 25, :end-line 12, :column 14, :line 12, :file "cljs/core.cljs"} goog.array}, :macro-mappings {unsafe-bit-and #=(var clojure.tools.analyzer.js.cljs.core/unsafe-bit-and), unchecked-remainder-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-remainder-int), when-first #=(var clojure.tools.analyzer.js.cljs.core/when-first), cond->> #=(var clojure.tools.analyzer.js.cljs.core/cond->>), bit-set #=(var clojure.tools.analyzer.js.cljs.core/bit-set), import-macros #=(var clojure.tools.analyzer.js.cljs.core/import-macros), while #=(var clojure.tools.analyzer.js.cljs.core/while), satisfies? #=(var clojure.tools.analyzer.js.cljs.core/satisfies?), unchecked-subtract-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-subtract-int), bit-shift-right #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-right), aget #=(var clojure.tools.analyzer.js.cljs.core/aget), specify #=(var clojure.tools.analyzer.js.cljs.core/specify), caching-hash #=(var clojure.tools.analyzer.js.cljs.core/caching-hash), bit-shift-left #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-left), coercive-not #=(var clojure.tools.analyzer.js.cljs.core/coercive-not), dec #=(var clojure.tools.analyzer.js.cljs.core/dec), < #=(var clojure.tools.analyzer.js.cljs.core/<), this-as #=(var clojure.tools.analyzer.js.cljs.core/this-as), .. #=(var clojure.tools.analyzer.js.cljs.core/..), delay #=(var clojure.tools.analyzer.js.cljs.core/delay), unchecked-negate #=(var clojure.tools.analyzer.js.cljs.core/unchecked-negate), simple-benchmark #=(var clojure.tools.analyzer.js.cljs.core/simple-benchmark), unchecked-inc-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-inc-int), js-str #=(var clojure.tools.analyzer.js.cljs.core/js-str), bit-shift-right-zero-fill #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-right-zero-fill), implements? #=(var clojure.tools.analyzer.js.cljs.core/implements?), pos? #=(var clojure.tools.analyzer.js.cljs.core/pos?), specify! #=(var clojure.tools.analyzer.js.cljs.core/specify!), if-not #=(var clojure.tools.analyzer.js.cljs.core/if-not), alength #=(var clojure.tools.analyzer.js.cljs.core/alength), bit-xor #=(var clojure.tools.analyzer.js.cljs.core/bit-xor), doseq #=(var clojure.tools.analyzer.js.cljs.core/doseq), unsigned-bit-shift-right #=(var clojure.tools.analyzer.js.cljs.core/unsigned-bit-shift-right), neg? #=(var clojure.tools.analyzer.js.cljs.core/neg?), unchecked-float #=(var clojure.tools.analyzer.js.cljs.core/unchecked-float), undefined? #=(var clojure.tools.analyzer.js.cljs.core/undefined?), deftype #=(var clojure.tools.analyzer.js.cljs.core/deftype), mask #=(var clojure.tools.analyzer.js.cljs.core/mask), when-let #=(var clojure.tools.analyzer.js.cljs.core/when-let), divide #=(var clojure.tools.analyzer.js.cljs.core/divide), coercive-boolean #=(var clojure.tools.analyzer.js.cljs.core/coercive-boolean), <= #=(var clojure.tools.analyzer.js.cljs.core/<=), if-some #=(var clojure.tools.analyzer.js.cljs.core/if-some), * #=(var clojure.tools.analyzer.js.cljs.core/*), min #=(var clojure.tools.analyzer.js.cljs.core/min), lazy-seq #=(var clojure.tools.analyzer.js.cljs.core/lazy-seq), js-delete #=(var clojure.tools.analyzer.js.cljs.core/js-delete), truth_ #=(var clojure.tools.analyzer.js.cljs.core/truth_), defcurried #=(var clojure.tools.analyzer.js.cljs.core/defcurried), let #=(var clojure.tools.analyzer.js.cljs.core/let), -> #=(var clojure.tools.analyzer.js.cljs.core/->), coercive-not= #=(var clojure.tools.analyzer.js.cljs.core/coercive-not=), doto #=(var clojure.tools.analyzer.js.cljs.core/doto), areduce #=(var clojure.tools.analyzer.js.cljs.core/areduce), double #=(var clojure.tools.analyzer.js.cljs.core/double), bit-and-not #=(var clojure.tools.analyzer.js.cljs.core/bit-and-not), unchecked-add-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-add-int), fn #=(var clojure.tools.analyzer.js.cljs.core/fn), short #=(var clojure.tools.analyzer.js.cljs.core/short), js-this #=(var clojure.tools.analyzer.js.cljs.core/js-this), unchecked-double #=(var clojure.tools.analyzer.js.cljs.core/unchecked-double), string? #=(var clojure.tools.analyzer.js.cljs.core/string?), js-arguments #=(var clojure.tools.analyzer.js.cljs.core/js-arguments), unchecked-multiply-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-multiply-int), as-> #=(var clojure.tools.analyzer.js.cljs.core/as->), when-not #=(var clojure.tools.analyzer.js.cljs.core/when-not), when #=(var clojure.tools.analyzer.js.cljs.core/when), int #=(var clojure.tools.analyzer.js.cljs.core/int), > #=(var clojure.tools.analyzer.js.cljs.core/>), keyword? #=(var clojure.tools.analyzer.js.cljs.core/keyword?), unchecked-multiply #=(var clojure.tools.analyzer.js.cljs.core/unchecked-multiply), gen-apply-to #=(var clojure.tools.analyzer.js.cljs.core/gen-apply-to), some->> #=(var clojure.tools.analyzer.js.cljs.core/some->>), unchecked-dec #=(var clojure.tools.analyzer.js.cljs.core/unchecked-dec), defn #=(var clojure.tools.analyzer.js.cljs.core/defn), float #=(var clojure.tools.analyzer.js.cljs.core/float), js-in #=(var clojure.tools.analyzer.js.cljs.core/js-in), es6-iterable #=(var clojure.tools.analyzer.js.cljs.core/es6-iterable), amap #=(var clojure.tools.analyzer.js.cljs.core/amap), declare #=(var clojure.tools.analyzer.js.cljs.core/declare), - #=(var clojure.tools.analyzer.js.cljs.core/-), hash-set #=(var clojure.tools.analyzer.js.cljs.core/hash-set), or #=(var clojure.tools.analyzer.js.cljs.core/or), assert-args #=(var clojure.tools.analyzer.js.cljs.core/assert-args), extend-type #=(var clojure.tools.analyzer.js.cljs.core/extend-type), bit-test #=(var clojure.tools.analyzer.js.cljs.core/bit-test), defmethod #=(var clojure.tools.analyzer.js.cljs.core/defmethod), time #=(var clojure.tools.analyzer.js.cljs.core/time), zero? #=(var clojure.tools.analyzer.js.cljs.core/zero?), unchecked-dec-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-dec-int), memfn #=(var clojure.tools.analyzer.js.cljs.core/memfn), js-obj #=(var clojure.tools.analyzer.js.cljs.core/js-obj), nil? #=(var clojure.tools.analyzer.js.cljs.core/nil?), extend-protocol #=(var clojure.tools.analyzer.js.cljs.core/extend-protocol), cond-> #=(var clojure.tools.analyzer.js.cljs.core/cond->), dotimes #=(var clojure.tools.analyzer.js.cljs.core/dotimes), bit-and #=(var clojure.tools.analyzer.js.cljs.core/bit-and), reify #=(var clojure.tools.analyzer.js.cljs.core/reify), instance? #=(var clojure.tools.analyzer.js.cljs.core/instance?), defonce #=(var clojure.tools.analyzer.js.cljs.core/defonce), unchecked-add #=(var clojure.tools.analyzer.js.cljs.core/unchecked-add), rfn #=(var clojure.tools.analyzer.js.cljs.core/rfn), identical? #=(var clojure.tools.analyzer.js.cljs.core/identical?), unchecked-divide-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-divide-int), defn- #=(var clojure.tools.analyzer.js.cljs.core/defn-), defprotocol #=(var clojure.tools.analyzer.js.cljs.core/defprotocol), unchecked-subtract #=(var clojure.tools.analyzer.js.cljs.core/unchecked-subtract), assert #=(var clojure.tools.analyzer.js.cljs.core/assert), true? #=(var clojure.tools.analyzer.js.cljs.core/true?), array #=(var clojure.tools.analyzer.js.cljs.core/array), letfn #=(var clojure.tools.analyzer.js.cljs.core/letfn), / #=(var clojure.tools.analyzer.js.cljs.core//), bitpos #=(var clojure.tools.analyzer.js.cljs.core/bitpos), bit-or #=(var clojure.tools.analyzer.js.cljs.core/bit-or), vector #=(var clojure.tools.analyzer.js.cljs.core/vector), >= #=(var clojure.tools.analyzer.js.cljs.core/>=), loop #=(var clojure.tools.analyzer.js.cljs.core/loop), bit-flip #=(var clojure.tools.analyzer.js.cljs.core/bit-flip), js-mod #=(var clojure.tools.analyzer.js.cljs.core/js-mod), with-out-str #=(var clojure.tools.analyzer.js.cljs.core/with-out-str), condp #=(var clojure.tools.analyzer.js.cljs.core/condp), cond #=(var clojure.tools.analyzer.js.cljs.core/cond), some-> #=(var clojure.tools.analyzer.js.cljs.core/some->), for #=(var clojure.tools.analyzer.js.cljs.core/for), binding #=(var clojure.tools.analyzer.js.cljs.core/binding), array-map #=(var clojure.tools.analyzer.js.cljs.core/array-map), unchecked-byte #=(var clojure.tools.analyzer.js.cljs.core/unchecked-byte), unchecked-short #=(var clojure.tools.analyzer.js.cljs.core/unchecked-short), inc #=(var clojure.tools.analyzer.js.cljs.core/inc), with-redefs #=(var clojure.tools.analyzer.js.cljs.core/with-redefs), bit-clear #=(var clojure.tools.analyzer.js.cljs.core/bit-clear), list #=(var clojure.tools.analyzer.js.cljs.core/list), + #=(var clojure.tools.analyzer.js.cljs.core/+), aset #=(var clojure.tools.analyzer.js.cljs.core/aset), defmulti #=(var clojure.tools.analyzer.js.cljs.core/defmulti), str #=(var clojure.tools.analyzer.js.cljs.core/str), coercive-= #=(var clojure.tools.analyzer.js.cljs.core/coercive-=), hash-map #=(var clojure.tools.analyzer.js.cljs.core/hash-map), if-let #=(var clojure.tools.analyzer.js.cljs.core/if-let), false? #=(var clojure.tools.analyzer.js.cljs.core/false?), case #=(var clojure.tools.analyzer.js.cljs.core/case), array? #=(var clojure.tools.analyzer.js.cljs.core/array?), exists? #=(var clojure.tools.analyzer.js.cljs.core/exists?), bit-not #=(var clojure.tools.analyzer.js.cljs.core/bit-not), byte #=(var clojure.tools.analyzer.js.cljs.core/byte), max #=(var clojure.tools.analyzer.js.cljs.core/max), == #=(var clojure.tools.analyzer.js.cljs.core/==), lazy-cat #=(var clojure.tools.analyzer.js.cljs.core/lazy-cat), comment #=(var clojure.tools.analyzer.js.cljs.core/comment), defrecord #=(var clojure.tools.analyzer.js.cljs.core/defrecord), make-array #=(var clojure.tools.analyzer.js.cljs.core/make-array), unchecked-negate-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-negate-int), unchecked-inc #=(var clojure.tools.analyzer.js.cljs.core/unchecked-inc), and #=(var clojure.tools.analyzer.js.cljs.core/and), number? #=(var clojure.tools.analyzer.js.cljs.core/number?), symbol? #=(var clojure.tools.analyzer.js.cljs.core/symbol?), when-some #=(var clojure.tools.analyzer.js.cljs.core/when-some), unchecked-char #=(var clojure.tools.analyzer.js.cljs.core/unchecked-char), ->> #=(var clojure.tools.analyzer.js.cljs.core/->>)}, :macro-aliases {}}, cljs.user {:ns cljs.user, :mappings {^{:arglists ([^{:end-column 34, :end-line 7086, :column 29, :line 7086, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7086, :column 34, :line 7086, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 7086, :column 53, :line 7086, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7086, :column 10, :line 7086, :file "cljs/core.cljs"} ->PersistentHashSet ^{:arglists ([^{:end-column 34, :end-line 7086, :column 29, :line 7086, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7086, :column 34, :line 7086, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 7086, :column 53, :line 7086, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7086, :column 10, :line 7086, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentHashSet [^{:end-column 34, :end-line 7086, :column 29, :line 7086, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7086, :column 34, :line 7086, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 7086, :column 53, :line 7086, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 7086, :column 29, :line 7086, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7086, :column 34, :line 7086, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 7086, :column 53, :line 7086, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7086, :column 10, :line 7086, :file "cljs/core.cljs"} ->PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 8857, :column 25, :line 8857, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8857, :column 33, :line 8857, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8857, :column 38, :line 8857, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8857, :column 10, :line 8857, :file "cljs/core.cljs"} ->ExceptionInfo ^{:arglists ([^{:end-column 33, :end-line 8857, :column 25, :line 8857, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8857, :column 33, :line 8857, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8857, :column 38, :line 8857, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8857, :column 10, :line 8857, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 33, :end-line 8857, :column 25, :line 8857, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8857, :column 33, :line 8857, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8857, :column 38, :line 8857, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 8857, :column 25, :line 8857, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8857, :column 33, :line 8857, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8857, :column 38, :line 8857, :file "cljs/core.cljs"} cause]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8857, :column 10, :line 8857, :file "cljs/core.cljs"} ->ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8366, :column 4, :line 8366, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8366, :column 5, :line 8366, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8367, :column 4, :line 8367, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8367, :column 5, :line 8367, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8367, :column 7, :line 8367, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8367, :column 9, :line 8367, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} js->clj ^{:arglists (^{:end-column 7, :end-line 8366, :column 4, :line 8366, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8366, :column 5, :line 8366, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8367, :column 4, :line 8367, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8367, :column 5, :line 8367, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8367, :column 7, :line 8367, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8367, :column 9, :line 8367, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8366, :column 5, :line 8366, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 8367, :column 5, :line 8367, :file "cljs/core.cljs"} x & ^{:end-column 14, :end-line 8367, :column 9, :line 8367, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8366, :column 4, :line 8366, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8366, :column 5, :line 8366, :file "cljs/core.cljs"} x] ^{:end-column 14, :end-line 8367, :column 4, :line 8367, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8367, :column 5, :line 8367, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 8367, :column 7, :line 8367, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8367, :column 9, :line 8367, :file "cljs/core.cljs"} opts]), :doc "Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.", :end-column 15, :end-line 8361, :column 7, :line 8361, :file "cljs/core.cljs"} js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1593, :column 4, :line 1593, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1593, :column 5, :line 1593, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1593, :column 11, :line 1593, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1595, :column 11, :line 1595, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1595, :column 16, :line 1595, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1588, :column 7, :line 1588, :file "cljs/core.cljs"} sort-by ^{:arglists (^{:end-column 16, :end-line 1593, :column 4, :line 1593, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1593, :column 5, :line 1593, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1593, :column 11, :line 1593, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1595, :column 11, :line 1595, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1595, :column 16, :line 1595, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1588, :column 7, :line 1588, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 1593, :column 5, :line 1593, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1593, :column 11, :line 1593, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1595, :column 11, :line 1595, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1595, :column 16, :line 1595, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1593, :column 4, :line 1593, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1593, :column 5, :line 1593, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1593, :column 11, :line 1593, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 1595, :column 4, :line 1595, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1595, :column 5, :line 1595, :file "cljs/core.cljs"} keyfn ^{:end-column 16, :end-line 1595, :column 11, :line 1595, :file "cljs/core.cljs"} comp ^{:end-column 21, :end-line 1595, :column 16, :line 1595, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 15, :end-line 1588, :column 7, :line 1588, :file "cljs/core.cljs"} sort-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 36, :end-line 356, :column 14, :line 356, :file "cljs/core.cljs"} ITransientAssociative ^{:impls (cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 36, :end-line 356, :column 14, :line 356, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} -assoc! [^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 36, :end-line 356, :column 14, :line 356, :file "cljs/core.cljs"} ITransientAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 2124, :column 15, :line 2124, :file "cljs/core.cljs"} chunk-first ^{:arglists (^{:end-column 22, :end-line 2589, :column 19, :line 2589, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2589, :column 20, :line 2589, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2589, :column 7, :line 2589, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 2589, :column 20, :line 2589, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2589, :column 19, :line 2589, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2589, :column 20, :line 2589, :file "cljs/core.cljs"} s]), :end-column 19, :end-line 2589, :column 7, :line 2589, :file "cljs/core.cljs"} chunk-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 456, :column 27, :line 456, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 456, :column 28, :line 456, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 456, :column 8, :line 456, :file "cljs/core.cljs"} number, :end-column 27, :end-line 456, :column 15, :line 456, :file "cljs/core.cljs"} m3-hash-int ^{:arglists (^{:end-column 31, :end-line 456, :column 27, :line 456, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 456, :column 28, :line 456, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 456, :column 8, :line 456, :file "cljs/core.cljs"} number, :end-column 27, :end-line 456, :column 15, :line 456, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 456, :column 28, :line 456, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 456, :column 27, :line 456, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 456, :column 28, :line 456, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 456, :column 8, :line 456, :file "cljs/core.cljs"} number, :end-column 27, :end-line 456, :column 15, :line 456, :file "cljs/core.cljs"} m3-hash-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2986, :column 15, :line 2986, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2986, :column 16, :line 2986, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2986, :column 22, :line 2986, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2986, :column 7, :line 2986, :file "cljs/core.cljs"} stepper ^{:arglists (^{:end-column 27, :end-line 2986, :column 15, :line 2986, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2986, :column 16, :line 2986, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2986, :column 22, :line 2986, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2986, :column 7, :line 2986, :file "cljs/core.cljs"} {:arglists (^cljs.core/Stepper [^{:end-column 22, :end-line 2986, :column 16, :line 2986, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2986, :column 22, :line 2986, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2986, :column 15, :line 2986, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2986, :column 16, :line 2986, :file "cljs/core.cljs"} xform ^{:end-column 27, :end-line 2986, :column 22, :line 2986, :file "cljs/core.cljs"} iter]), :end-column 15, :end-line 2986, :column 7, :line 2986, :file "cljs/core.cljs"} stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 407, :column 3, :line 407, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 407, :column 5, :line 407, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 407, :column 16, :line 407, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 404, :column 7, :line 404, :file "cljs/core.cljs"} pr-str* ^{:arglists (^{:end-column 20, :end-line 407, :column 3, :line 407, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 407, :column 5, :line 407, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 407, :column 16, :line 407, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 404, :column 7, :line 404, :file "cljs/core.cljs"} {:arglists ([^{:tag ^{:end-column 16, :end-line 407, :column 5, :line 407, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 407, :column 16, :line 407, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 407, :column 3, :line 407, :file "cljs/core.cljs"} [^{:tag ^{:end-column 16, :end-line 407, :column 5, :line 407, :file "cljs/core.cljs"} not-native, :end-column 20, :end-line 407, :column 16, :line 407, :file "cljs/core.cljs"} obj]), :doc "Support so that collections can implement toString without\n   loading all the printing machinery.", :end-column 15, :end-line 404, :column 7, :line 404, :file "cljs/core.cljs"} pr-str*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8311, :column 3, :line 8311, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8311, :column 4, :line 8311, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8311, :column 10, :line 8311, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 16, :end-line 8307, :column 7, :line 8307, :file "cljs/core.cljs"} eduction ^{:arglists (^{:end-column 15, :end-line 8311, :column 3, :line 8311, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8311, :column 4, :line 8311, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8311, :column 10, :line 8311, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 16, :end-line 8307, :column 7, :line 8307, :file "cljs/core.cljs"} {:arglists (^cljs.core/Eduction [^{:end-column 10, :end-line 8311, :column 4, :line 8311, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8311, :column 10, :line 8311, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8311, :column 3, :line 8311, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8311, :column 4, :line 8311, :file "cljs/core.cljs"} xform ^{:end-column 15, :end-line 8311, :column 10, :line 8311, :file "cljs/core.cljs"} coll]), :doc "Returns a reducible/iterable/seqable application of\n  the transducer to the items in coll. Note that these applications\t\n  will be performed every time iterator/seq/reduce is called.", :end-column 16, :end-line 8307, :column 7, :line 8307, :file "cljs/core.cljs"} eduction, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 3783, :column 4, :line 3783, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3783, :column 5, :line 3783, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3783, :column 13, :line 3783, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3783, :column 22, :line 3783, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3776, :column 7, :line 3776, :file "cljs/core.cljs"} tree-seq ^{:arglists (^{:end-column 27, :end-line 3783, :column 4, :line 3783, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3783, :column 5, :line 3783, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3783, :column 13, :line 3783, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3783, :column 22, :line 3783, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3776, :column 7, :line 3776, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 13, :end-line 3783, :column 5, :line 3783, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3783, :column 13, :line 3783, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3783, :column 22, :line 3783, :file "cljs/core.cljs"} root]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 3783, :column 4, :line 3783, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 3783, :column 5, :line 3783, :file "cljs/core.cljs"} branch? ^{:end-column 22, :end-line 3783, :column 13, :line 3783, :file "cljs/core.cljs"} children ^{:end-column 27, :end-line 3783, :column 22, :line 3783, :file "cljs/core.cljs"} root]), :doc "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.", :end-column 16, :end-line 3776, :column 7, :line 3776, :file "cljs/core.cljs"} tree-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 1877, :column 31, :line 1877, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1877, :column 32, :line 1877, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1877, :column 34, :line 1877, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1877, :column 7, :line 1877, :file "cljs/core.cljs"} unchecked-remainder-int ^{:arglists (^{:end-column 36, :end-line 1877, :column 31, :line 1877, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1877, :column 32, :line 1877, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1877, :column 34, :line 1877, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1877, :column 7, :line 1877, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1877, :column 32, :line 1877, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1877, :column 34, :line 1877, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 1877, :column 31, :line 1877, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1877, :column 32, :line 1877, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 1877, :column 34, :line 1877, :file "cljs/core.cljs"} n]), :end-column 31, :end-line 1877, :column 7, :line 1877, :file "cljs/core.cljs"} unchecked-remainder-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 624, :column 3, :line 624, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 624, :column 4, :line 624, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 620, :column 12, :line 620, :file "cljs/core.cljs"} seq ^{:arglists (^{:end-column 9, :end-line 624, :column 3, :line 624, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 624, :column 4, :line 624, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 620, :column 12, :line 620, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 624, :column 4, :line 624, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 624, :column 3, :line 624, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 624, :column 4, :line 624, :file "cljs/core.cljs"} coll]), :doc "Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.", :tag ^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq, :end-column 16, :end-line 620, :column 12, :line 620, :file "cljs/core.cljs"} seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 193, :column 10, :line 193, :file "cljs/core.cljs"} reduce ^{:arglists (^{:end-column 12, :end-line 1632, :column 4, :line 1632, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1648, :column 4, :line 1648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1648, :column 5, :line 1648, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1648, :column 7, :line 1648, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1648, :column 11, :line 1648, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1622, :column 7, :line 1622, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1648, :column 5, :line 1648, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1648, :column 7, :line 1648, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1648, :column 11, :line 1648, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1632, :column 4, :line 1632, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1632, :column 5, :line 1632, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1632, :column 7, :line 1632, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1648, :column 4, :line 1648, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1648, :column 5, :line 1648, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1648, :column 7, :line 1648, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1648, :column 11, :line 1648, :file "cljs/core.cljs"} coll]), :doc "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.", :end-column 14, :end-line 1622, :column 7, :line 1622, :file "cljs/core.cljs"} reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 18, :end-line 2935, :column 1, :line 2935, :file "cljs/core.cljs"} INIT ^{:end-column 18, :end-line 2935, :column 1, :line 2935, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 18, :end-line 2935, :column 1, :line 2935, :file "cljs/core.cljs"} INIT, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1483, :column 3, :line 1483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1483, :column 4, :line 1483, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1483, :column 9, :line 1483, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1477, :column 8, :line 1477, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1477, :column 16, :line 1477, :file "cljs/core.cljs"} contains? ^{:arglists (^{:end-column 11, :end-line 1483, :column 3, :line 1483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1483, :column 4, :line 1483, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1483, :column 9, :line 1483, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1477, :column 8, :line 1477, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1477, :column 16, :line 1477, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 1483, :column 4, :line 1483, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1483, :column 9, :line 1483, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1483, :column 3, :line 1483, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1483, :column 4, :line 1483, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1483, :column 9, :line 1483, :file "cljs/core.cljs"} v]), :doc "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.", :tag ^{:end-column 16, :end-line 1477, :column 8, :line 1477, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1477, :column 16, :line 1477, :file "cljs/core.cljs"} contains?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3138, :column 3, :line 3138, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3138, :column 4, :line 3138, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3138, :column 9, :line 3138, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3135, :column 8, :line 3135, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3135, :column 16, :line 3135, :file "cljs/core.cljs"} every? ^{:arglists (^{:end-column 14, :end-line 3138, :column 3, :line 3138, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3138, :column 4, :line 3138, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3138, :column 9, :line 3138, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3135, :column 8, :line 3135, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3135, :column 16, :line 3135, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3138, :column 4, :line 3138, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3138, :column 9, :line 3138, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3138, :column 3, :line 3138, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3138, :column 4, :line 3138, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3138, :column 9, :line 3138, :file "cljs/core.cljs"} coll]), :doc "Returns true if (pred x) is logical true for every x in coll, else\n  false.", :tag ^{:end-column 16, :end-line 3135, :column 8, :line 3135, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 3135, :column 16, :line 3135, :file "cljs/core.cljs"} every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3420, :column 4, :line 3420, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3420, :column 5, :line 3420, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3432, :column 4, :line 3432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3432, :column 5, :line 3432, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3432, :column 7, :line 3432, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3415, :column 7, :line 3415, :file "cljs/core.cljs"} keep-indexed ^{:arglists (^{:end-column 7, :end-line 3420, :column 4, :line 3420, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3420, :column 5, :line 3420, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3432, :column 4, :line 3432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3432, :column 5, :line 3432, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3432, :column 7, :line 3432, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3415, :column 7, :line 3415, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3420, :column 5, :line 3420, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3432, :column 5, :line 3432, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3432, :column 7, :line 3432, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3420, :column 4, :line 3420, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3420, :column 5, :line 3420, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3432, :column 4, :line 3432, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3432, :column 5, :line 3432, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3432, :column 7, :line 3432, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.", :end-column 20, :end-line 3415, :column 7, :line 3415, :file "cljs/core.cljs"} keep-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 35, :end-line 4637, :column 30, :line 4637, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4637, :column 35, :line 4637, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4637, :column 41, :line 4637, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4637, :column 56, :line 4637, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4637, :column 10, :line 4637, :file "cljs/core.cljs"} ->PersistentQueueSeq ^{:arglists ([^{:end-column 35, :end-line 4637, :column 30, :line 4637, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4637, :column 35, :line 4637, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4637, :column 41, :line 4637, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4637, :column 56, :line 4637, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4637, :column 10, :line 4637, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentQueueSeq [^{:end-column 35, :end-line 4637, :column 30, :line 4637, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4637, :column 35, :line 4637, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4637, :column 41, :line 4637, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4637, :column 56, :line 4637, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 35, :end-line 4637, :column 30, :line 4637, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4637, :column 35, :line 4637, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4637, :column 41, :line 4637, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4637, :column 56, :line 4637, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4637, :column 10, :line 4637, :file "cljs/core.cljs"} ->PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 2075, :column 4, :line 2075, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2075, :column 5, :line 2075, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2075, :column 7, :line 2075, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2076, :column 5, :line 2076, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2076, :column 7, :line 2076, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2076, :column 13, :line 2076, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2072, :column 7, :line 2072, :file "cljs/core.cljs"} subs ^{:arglists (^{:end-column 13, :end-line 2075, :column 4, :line 2075, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2075, :column 5, :line 2075, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2075, :column 7, :line 2075, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2076, :column 5, :line 2076, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2076, :column 7, :line 2076, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2076, :column 13, :line 2076, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2072, :column 7, :line 2072, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2075, :column 5, :line 2075, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2075, :column 7, :line 2075, :file "cljs/core.cljs"} start] [^{:end-column 7, :end-line 2076, :column 5, :line 2076, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2076, :column 7, :line 2076, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2076, :column 13, :line 2076, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 2075, :column 4, :line 2075, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2075, :column 5, :line 2075, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2075, :column 7, :line 2075, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 2076, :column 4, :line 2076, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2076, :column 5, :line 2076, :file "cljs/core.cljs"} s ^{:end-column 13, :end-line 2076, :column 7, :line 2076, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 2076, :column 13, :line 2076, :file "cljs/core.cljs"} end]), :doc "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.", :end-column 12, :end-line 2072, :column 7, :line 2072, :file "cljs/core.cljs"} subs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7315, :column 3, :line 7315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7315, :column 4, :line 7315, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7313, :column 7, :line 7313, :file "cljs/core.cljs"} set ^{:arglists (^{:end-column 9, :end-line 7315, :column 3, :line 7315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7315, :column 4, :line 7315, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7313, :column 7, :line 7313, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7315, :column 4, :line 7315, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7315, :column 3, :line 7315, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7315, :column 4, :line 7315, :file "cljs/core.cljs"} coll]), :doc "Returns a set of the distinct elements of coll.", :end-column 11, :end-line 7313, :column 7, :line 7313, :file "cljs/core.cljs"} set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1545, :column 4, :line 1545, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1545, :column 5, :line 1545, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1545, :column 8, :line 1545, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1552, :column 4, :line 1552, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1552, :column 5, :line 1552, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1552, :column 8, :line 1552, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1552, :column 11, :line 1552, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1552, :column 15, :line 1552, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1543, :column 17, :line 1543, :file "cljs/core.cljs"} compare-indexed ^{:arglists (^{:end-column 11, :end-line 1545, :column 4, :line 1545, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1545, :column 5, :line 1545, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1545, :column 8, :line 1545, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1552, :column 4, :line 1552, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1552, :column 5, :line 1552, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1552, :column 8, :line 1552, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1552, :column 11, :line 1552, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1552, :column 15, :line 1552, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1543, :column 17, :line 1543, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 1545, :column 5, :line 1545, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1545, :column 8, :line 1545, :file "cljs/core.cljs"} ys] ^^{:end-column 15, :end-line 1522, :column 8, :line 1522, :file "cljs/core.cljs"} number [^{:end-column 8, :end-line 1552, :column 5, :line 1552, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1552, :column 8, :line 1552, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1552, :column 11, :line 1552, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1552, :column 15, :line 1552, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1545, :column 4, :line 1545, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1545, :column 5, :line 1545, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1545, :column 8, :line 1545, :file "cljs/core.cljs"} ys] ^{:end-column 17, :end-line 1552, :column 4, :line 1552, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 1552, :column 5, :line 1552, :file "cljs/core.cljs"} xs ^{:end-column 11, :end-line 1552, :column 8, :line 1552, :file "cljs/core.cljs"} ys ^{:end-column 15, :end-line 1552, :column 11, :line 1552, :file "cljs/core.cljs"} len ^{:end-column 17, :end-line 1552, :column 15, :line 1552, :file "cljs/core.cljs"} n]), :doc "Compare indexed collection.", :private true, :end-column 33, :end-line 1543, :column 17, :line 1543, :file "cljs/core.cljs"} compare-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3632, :column 3, :line 3632, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3632, :column 4, :line 3632, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3632, :column 6, :line 3632, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3629, :column 7, :line 3629, :file "cljs/core.cljs"} take-last ^{:arglists (^{:end-column 11, :end-line 3632, :column 3, :line 3632, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3632, :column 4, :line 3632, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3632, :column 6, :line 3632, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3629, :column 7, :line 3629, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq [^{:end-column 6, :end-line 3632, :column 4, :line 3632, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3632, :column 6, :line 3632, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3632, :column 3, :line 3632, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3632, :column 4, :line 3632, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3632, :column 6, :line 3632, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.", :end-column 17, :end-line 3629, :column 7, :line 3629, :file "cljs/core.cljs"} take-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 40, :end-line 609, :column 29, :line 609, :file "cljs/core.cljs"} IndexedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 874, :column 10, :line 874, :file "cljs/core.cljs"} IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 28, :end-line 874, :column 21, :line 874, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 874, :column 22, :line 874, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 874, :column 26, :line 874, :file "cljs/core.cljs"} i], :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 8, :end-line 1991, :column 3, :line 1991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1991, :column 4, :line 1991, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1991, :column 6, :line 1991, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} bit-set ^{:arglists (^{:end-column 8, :end-line 1991, :column 3, :line 1991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1991, :column 4, :line 1991, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1991, :column 6, :line 1991, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1991, :column 4, :line 1991, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1991, :column 6, :line 1991, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1991, :column 3, :line 1991, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1991, :column 4, :line 1991, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1991, :column 6, :line 1991, :file "cljs/core.cljs"} n]), :doc "Set bit at index n", :end-column 15, :end-line 1989, :column 7, :line 1989, :file "cljs/core.cljs"} bit-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 32, :end-line 483, :column 1, :line 483, :file "cljs/core.cljs"} string-hash-cache-count ^{:end-column 32, :end-line 483, :column 1, :line 483, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 32, :end-line 483, :column 1, :line 483, :file "cljs/core.cljs"} string-hash-cache-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 8294, :column 20, :line 8294, :file "cljs/core.cljs"} xform ^{:end-column 31, :end-line 8294, :column 26, :line 8294, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 19, :end-line 8294, :column 10, :line 8294, :file "cljs/core.cljs"} ->Eduction ^{:arglists ([^{:end-column 26, :end-line 8294, :column 20, :line 8294, :file "cljs/core.cljs"} xform ^{:end-column 31, :end-line 8294, :column 26, :line 8294, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 19, :end-line 8294, :column 10, :line 8294, :file "cljs/core.cljs"} {:arglists (^cljs.core/Eduction [^{:end-column 26, :end-line 8294, :column 20, :line 8294, :file "cljs/core.cljs"} xform ^{:end-column 31, :end-line 8294, :column 26, :line 8294, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 8294, :column 20, :line 8294, :file "cljs/core.cljs"} xform ^{:end-column 31, :end-line 8294, :column 26, :line 8294, :file "cljs/core.cljs"} coll]), :factory :positional, :skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 19, :end-line 8294, :column 10, :line 8294, :file "cljs/core.cljs"} ->Eduction, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 6610, :column 21, :line 6610, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6610, :column 27, :line 6610, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6610, :column 34, :line 6610, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6610, :column 36, :line 6610, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6610, :column 8, :line 6610, :file "cljs/core.cljs"} tree-map-add ^{:arglists (^{:end-column 42, :end-line 6610, :column 21, :line 6610, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6610, :column 27, :line 6610, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6610, :column 34, :line 6610, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6610, :column 36, :line 6610, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6610, :column 8, :line 6610, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6610, :column 27, :line 6610, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6610, :column 34, :line 6610, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6610, :column 36, :line 6610, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 6610, :column 21, :line 6610, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6610, :column 22, :line 6610, :file "cljs/core.cljs"} comp ^{:end-column 32, :end-line 6610, :column 27, :line 6610, :file "cljs/core.cljs"} tree ^{:end-column 34, :end-line 6610, :column 32, :line 6610, :file "cljs/core.cljs"} k ^{:end-column 36, :end-line 6610, :column 34, :line 6610, :file "cljs/core.cljs"} v ^{:end-column 42, :end-line 6610, :column 36, :line 6610, :file "cljs/core.cljs"} found]), :private true, :end-column 21, :end-line 6610, :column 8, :line 6610, :file "cljs/core.cljs"} tree-map-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 45, :end-line 4937, :column 43, :line 4937, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 32, :end-line 4937, :column 10, :line 4937, :file "cljs/core.cljs"} ->ES6SetEntriesIterator ^{:arglists ([^{:mutable true, :end-column 45, :end-line 4937, :column 43, :line 4937, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 32, :end-line 4937, :column 10, :line 4937, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6SetEntriesIterator [^{:mutable true, :end-column 45, :end-line 4937, :column 43, :line 4937, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 45, :end-line 4937, :column 43, :line 4937, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 32, :end-line 4937, :column 10, :line 4937, :file "cljs/core.cljs"} ->ES6SetEntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} -with-meta ^{:arglists (^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]), :protocol cljs.core/IWithMeta, :tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} -with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 57, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8568, :column 17, :line 8568, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8568, :column 30, :line 8568, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8568, :column 47, :line 8568, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8567, :column 8, :line 8567, :file "cljs/core.cljs"} reset-cache ^{:arglists (^{:end-column 57, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8568, :column 17, :line 8568, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8568, :column 30, :line 8568, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8568, :column 47, :line 8568, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8567, :column 8, :line 8567, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8568, :column 17, :line 8568, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8568, :column 30, :line 8568, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8568, :column 47, :line 8568, :file "cljs/core.cljs"} hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 57, :end-line 8568, :column 3, :line 8568, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8568, :column 4, :line 8568, :file "cljs/core.cljs"} method-cache ^{:end-column 30, :end-line 8568, :column 17, :line 8568, :file "cljs/core.cljs"} method-table ^{:end-column 47, :end-line 8568, :column 30, :line 8568, :file "cljs/core.cljs"} cached-hierarchy ^{:end-column 57, :end-line 8568, :column 47, :line 8568, :file "cljs/core.cljs"} hierarchy]), :private true, :end-column 20, :end-line 8567, :column 8, :line 8567, :file "cljs/core.cljs"} reset-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 42, :end-line 5085, :column 38, :line 5085, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 54, :end-line 5085, :column 52, :line 5085, :file "cljs/core.cljs"} i ^{:end-column 58, :end-line 5085, :column 54, :line 5085, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 37, :end-line 5085, :column 10, :line 5085, :file "cljs/core.cljs"} ->PersistentArrayMapIterator ^{:arglists ([^{:end-column 42, :end-line 5085, :column 38, :line 5085, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 54, :end-line 5085, :column 52, :line 5085, :file "cljs/core.cljs"} i ^{:end-column 58, :end-line 5085, :column 54, :line 5085, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 37, :end-line 5085, :column 10, :line 5085, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMapIterator [^{:end-column 42, :end-line 5085, :column 38, :line 5085, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 54, :end-line 5085, :column 52, :line 5085, :file "cljs/core.cljs"} i ^{:end-column 58, :end-line 5085, :column 54, :line 5085, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 42, :end-line 5085, :column 38, :line 5085, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 54, :end-line 5085, :column 52, :line 5085, :file "cljs/core.cljs"} i ^{:end-column 58, :end-line 5085, :column 54, :line 5085, :file "cljs/core.cljs"} cnt]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 37, :end-line 5085, :column 10, :line 5085, :file "cljs/core.cljs"} ->PersistentArrayMapIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 37, :end-line 5085, :column 10, :line 5085, :file "cljs/core.cljs"} PersistentArrayMapIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 37, :end-line 5085, :column 10, :line 5085, :file "cljs/core.cljs"} PersistentArrayMapIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 58, :end-line 5085, :column 37, :line 5085, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5085, :column 38, :line 5085, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 54, :end-line 5085, :column 52, :line 5085, :file "cljs/core.cljs"} i ^{:end-column 58, :end-line 5085, :column 54, :line 5085, :file "cljs/core.cljs"} cnt], :protocols #{Object}}, ^{:arglists (^{:end-column 18, :end-line 7377, :column 15, :line 7377, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7377, :column 16, :line 7377, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7377, :column 7, :line 7377, :file "cljs/core.cljs"} butlast ^{:arglists (^{:end-column 18, :end-line 7377, :column 15, :line 7377, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7377, :column 16, :line 7377, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7377, :column 7, :line 7377, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq [^{:end-column 18, :end-line 7377, :column 16, :line 7377, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7377, :column 15, :line 7377, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7377, :column 16, :line 7377, :file "cljs/core.cljs"} s]), :end-column 15, :end-line 7377, :column 7, :line 7377, :file "cljs/core.cljs"} butlast, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 3933, :column 17, :line 3933, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3933, :column 18, :line 3933, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} tail-off ^{:arglists (^{:end-column 21, :end-line 3933, :column 17, :line 3933, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3933, :column 18, :line 3933, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 3933, :column 18, :line 3933, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 3933, :column 17, :line 3933, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3933, :column 18, :line 3933, :file "cljs/core.cljs"} pv]), :private true, :end-column 17, :end-line 3933, :column 8, :line 3933, :file "cljs/core.cljs"} tail-off, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1890, :column 4, :line 1890, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1890, :column 5, :line 1890, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1891, :column 5, :line 1891, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1891, :column 7, :line 1891, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1892, :column 7, :line 1892, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1892, :column 9, :line 1892, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1892, :column 11, :line 1892, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} unchecked-subtract-int ^{:arglists (^{:end-column 7, :end-line 1890, :column 4, :line 1890, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1890, :column 5, :line 1890, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1891, :column 5, :line 1891, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1891, :column 7, :line 1891, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1892, :column 7, :line 1892, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1892, :column 9, :line 1892, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1892, :column 11, :line 1892, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1890, :column 5, :line 1890, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1891, :column 5, :line 1891, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1891, :column 7, :line 1891, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1892, :column 7, :line 1892, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1892, :column 11, :line 1892, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1890, :column 4, :line 1890, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1890, :column 5, :line 1890, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1891, :column 4, :line 1891, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1891, :column 5, :line 1891, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1891, :column 7, :line 1891, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1892, :column 4, :line 1892, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1892, :column 5, :line 1892, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1892, :column 7, :line 1892, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1892, :column 9, :line 1892, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1892, :column 11, :line 1892, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1887, :column 8, :line 1887, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1887, :column 15, :line 1887, :file "cljs/core.cljs"} unchecked-subtract-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} -iterator ^{:arglists (^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IIterable, :end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} -iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7626, :column 4, :line 7626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7626, :column 5, :line 7626, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7623, :column 7, :line 7623, :file "cljs/core.cljs"} take-nth ^{:arglists (^{:end-column 7, :end-line 7626, :column 4, :line 7626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7626, :column 5, :line 7626, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7623, :column 7, :line 7623, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7626, :column 5, :line 7626, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7626, :column 4, :line 7626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7626, :column 5, :line 7626, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7637, :column 4, :line 7637, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7637, :column 5, :line 7637, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7637, :column 7, :line 7637, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.", :end-column 16, :end-line 7623, :column 7, :line 7623, :file "cljs/core.cljs"} take-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 646, :column 3, :line 646, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 646, :column 4, :line 646, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 643, :column 7, :line 643, :file "cljs/core.cljs"} first ^{:arglists (^{:end-column 9, :end-line 646, :column 3, :line 646, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 646, :column 4, :line 646, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 643, :column 7, :line 643, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 646, :column 4, :line 646, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 646, :column 3, :line 646, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 646, :column 4, :line 646, :file "cljs/core.cljs"} coll]), :doc "Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.", :end-column 13, :end-line 643, :column 7, :line 643, :file "cljs/core.cljs"} first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies? ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 113, :column 3, :line 113, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 113, :column 4, :line 113, :file "cljs/core.cljs"} p ^{:end-column 8, :end-line 113, :column 6, :line 113, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :tag ^{:end-column 16, :end-line 111, :column 8, :line 111, :file "cljs/core.cljs"} boolean, :end-column 34, :end-line 111, :column 16, :line 111, :file "cljs/core.cljs"} native-satisfies?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1453, :column 3, :line 1453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1453, :column 4, :line 1453, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1451, :column 8, :line 1451, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1451, :column 16, :line 1451, :file "cljs/core.cljs"} seq? ^{:arglists (^{:end-column 6, :end-line 1453, :column 3, :line 1453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1453, :column 4, :line 1453, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1451, :column 8, :line 1451, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1451, :column 16, :line 1451, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1453, :column 4, :line 1453, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1453, :column 3, :line 1453, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1453, :column 4, :line 1453, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeq", :tag ^{:end-column 16, :end-line 1451, :column 8, :line 1451, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1451, :column 16, :line 1451, :file "cljs/core.cljs"} seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 38, :end-line 8457, :column 1, :line 8457, :file "cljs/core.cljs"} -global-hierarchy ^{:private true, :end-column 38, :end-line 8457, :column 1, :line 8457, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:private true, :end-column 38, :end-line 8457, :column 1, :line 8457, :file "cljs/core.cljs"} -global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8837, :column 10, :line 8837, :file "cljs/core.cljs"} UUID {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8837, :column 10, :line 8837, :file "cljs/core.cljs"} UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 21, :end-line 8837, :column 15, :line 8837, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 8837, :column 16, :line 8837, :file "cljs/core.cljs"} uuid], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} -sorted-seq-from ^{:arglists (^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} -sorted-seq-from, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8024, :column 3, :line 8024, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8024, :column 4, :line 8024, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8024, :column 6, :line 8024, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 8022, :column 7, :line 8022, :file "cljs/core.cljs"} println-str ^{:arglists (^{:end-column 11, :end-line 8024, :column 3, :line 8024, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8024, :column 4, :line 8024, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8024, :column 6, :line 8024, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 8022, :column 7, :line 8022, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 8024, :column 6, :line 8024, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8024, :column 3, :line 8024, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8024, :column 4, :line 8024, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8024, :column 6, :line 8024, :file "cljs/core.cljs"} objs]), :doc "println to a string, returning it", :end-column 19, :end-line 8022, :column 7, :line 8022, :file "cljs/core.cljs"} println-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1096, :column 5, :line 1096, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1096, :column 10, :line 1096, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1105, :column 4, :line 1105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1105, :column 5, :line 1105, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1105, :column 10, :line 1105, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1105, :column 12, :line 1105, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1095, :column 8, :line 1095, :file "cljs/core.cljs"} linear-traversal-nth ^{:arglists (^{:end-column 12, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1096, :column 5, :line 1096, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1096, :column 10, :line 1096, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1105, :column 4, :line 1105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1105, :column 5, :line 1105, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1105, :column 10, :line 1105, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1105, :column 12, :line 1105, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1095, :column 8, :line 1095, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1096, :column 5, :line 1096, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1096, :column 10, :line 1096, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 1105, :column 5, :line 1105, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1105, :column 10, :line 1105, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1105, :column 12, :line 1105, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1096, :column 4, :line 1096, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1096, :column 5, :line 1096, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1096, :column 10, :line 1096, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1105, :column 4, :line 1105, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1105, :column 5, :line 1105, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1105, :column 10, :line 1105, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1105, :column 12, :line 1105, :file "cljs/core.cljs"} not-found]), :private true, :end-column 29, :end-line 1095, :column 8, :line 1095, :file "cljs/core.cljs"} linear-traversal-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3693, :column 3, :line 3693, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3693, :column 4, :line 3693, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3693, :column 6, :line 3693, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3690, :column 7, :line 3690, :file "cljs/core.cljs"} iterate ^{:arglists (^{:end-column 8, :end-line 3693, :column 3, :line 3693, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3693, :column 4, :line 3693, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3693, :column 6, :line 3693, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3690, :column 7, :line 3690, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 3693, :column 4, :line 3693, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3693, :column 6, :line 3693, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3693, :column 3, :line 3693, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3693, :column 4, :line 3693, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 3693, :column 6, :line 3693, :file "cljs/core.cljs"} x]), :added "1.0", :doc "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects", :end-column 15, :end-line 3690, :column 7, :line 3690, :file "cljs/core.cljs"} iterate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} -empty ^{:arglists (^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEmptyableCollection, :end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} -empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 7980, :column 15, :line 7980, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7980, :column 16, :line 7980, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7980, :column 7, :line 7980, :file "cljs/core.cljs"} newline ^{:arglists (^{:end-column 21, :end-line 7980, :column 15, :line 7980, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7980, :column 16, :line 7980, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7980, :column 7, :line 7980, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 21, :end-line 7980, :column 16, :line 7980, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 7980, :column 15, :line 7980, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 7980, :column 16, :line 7980, :file "cljs/core.cljs"} opts]), :end-column 15, :end-line 7980, :column 7, :line 7980, :file "cljs/core.cljs"} newline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 258, :column 14, :line 258, :file "cljs/core.cljs"} ILookup ^{:impls (cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/TransientHashMap cljs.core/PersistentHashMap cljs.core/TransientArrayMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 258, :column 14, :line 258, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} -lookup [^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 22, :end-line 258, :column 14, :line 258, :file "cljs/core.cljs"} ILookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} -chunked-rest ^{:arglists (^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} -chunked-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 7843, :column 17, :line 7843, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7843, :column 18, :line 7843, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7843, :column 25, :line 7843, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7843, :column 27, :line 7843, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7843, :column 7, :line 7843, :file "cljs/core.cljs"} write-all ^{:arglists (^{:end-column 30, :end-line 7843, :column 17, :line 7843, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7843, :column 18, :line 7843, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7843, :column 25, :line 7843, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7843, :column 27, :line 7843, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7843, :column 7, :line 7843, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 7843, :column 18, :line 7843, :file "cljs/core.cljs"} writer & ^{:end-column 30, :end-line 7843, :column 27, :line 7843, :file "cljs/core.cljs"} ss]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 7843, :column 17, :line 7843, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 7843, :column 18, :line 7843, :file "cljs/core.cljs"} writer ^{:end-column 27, :end-line 7843, :column 25, :line 7843, :file "cljs/core.cljs"} & ^{:end-column 30, :end-line 7843, :column 27, :line 7843, :file "cljs/core.cljs"} ss]), :end-column 17, :end-line 7843, :column 7, :line 7843, :file "cljs/core.cljs"} write-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1252, :column 20, :line 1252, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1252, :column 21, :line 1252, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1252, :column 8, :line 1252, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1252, :column 16, :line 1252, :file "cljs/core.cljs"} fn? ^{:arglists (^{:end-column 23, :end-line 1252, :column 20, :line 1252, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1252, :column 21, :line 1252, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1252, :column 8, :line 1252, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1252, :column 16, :line 1252, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1253, :column 8, :line 1253, :file "cljs/core.cljs"} boolean [^{:end-column 23, :end-line 1252, :column 21, :line 1252, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1252, :column 20, :line 1252, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1252, :column 21, :line 1252, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1252, :column 8, :line 1252, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 1252, :column 16, :line 1252, :file "cljs/core.cljs"} fn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} -prefer-method ^{:arglists (^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} -prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -assoc ^{:arglists (^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]), :protocol cljs.core/IAssociative, :tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7767, :column 4, :line 7767, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7767, :column 5, :line 7767, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7770, :column 4, :line 7770, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7770, :column 5, :line 7770, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7770, :column 7, :line 7770, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7760, :column 7, :line 7760, :file "cljs/core.cljs"} doall ^{:arglists (^{:end-column 10, :end-line 7767, :column 4, :line 7767, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7767, :column 5, :line 7767, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7770, :column 4, :line 7770, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7770, :column 5, :line 7770, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7770, :column 7, :line 7770, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7760, :column 7, :line 7760, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 7767, :column 5, :line 7767, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 7770, :column 5, :line 7770, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7770, :column 7, :line 7770, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7767, :column 4, :line 7767, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7767, :column 5, :line 7767, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7770, :column 4, :line 7770, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7770, :column 5, :line 7770, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7770, :column 7, :line 7770, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.", :end-column 13, :end-line 7760, :column 7, :line 7760, :file "cljs/core.cljs"} doall, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 2371, :column 35, :line 2371, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2371, :column 36, :line 2371, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2371, :column 38, :line 2371, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2371, :column 8, :line 2371, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2371, :column 16, :line 2371, :file "cljs/core.cljs"} keyword-identical? ^{:arglists (^{:end-column 40, :end-line 2371, :column 35, :line 2371, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2371, :column 36, :line 2371, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2371, :column 38, :line 2371, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2371, :column 8, :line 2371, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2371, :column 16, :line 2371, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 38, :end-line 2371, :column 36, :line 2371, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2371, :column 38, :line 2371, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 2371, :column 35, :line 2371, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 2371, :column 36, :line 2371, :file "cljs/core.cljs"} x ^{:end-column 40, :end-line 2371, :column 38, :line 2371, :file "cljs/core.cljs"} y]), :tag ^{:end-column 16, :end-line 2371, :column 8, :line 2371, :file "cljs/core.cljs"} boolean, :end-column 35, :end-line 2371, :column 16, :line 2371, :file "cljs/core.cljs"} keyword-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 3927, :column 16, :line 3927, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3927, :column 17, :line 3927, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3927, :column 22, :line 3927, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3927, :column 26, :line 3927, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3927, :column 8, :line 3927, :file "cljs/core.cljs"} pv-aset ^{:arglists (^{:end-column 30, :end-line 3927, :column 16, :line 3927, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3927, :column 17, :line 3927, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3927, :column 22, :line 3927, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3927, :column 26, :line 3927, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3927, :column 8, :line 3927, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3927, :column 17, :line 3927, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3927, :column 22, :line 3927, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3927, :column 26, :line 3927, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 3927, :column 16, :line 3927, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3927, :column 17, :line 3927, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3927, :column 22, :line 3927, :file "cljs/core.cljs"} idx ^{:end-column 30, :end-line 3927, :column 26, :line 3927, :file "cljs/core.cljs"} val]), :private true, :end-column 16, :end-line 3927, :column 8, :line 3927, :file "cljs/core.cljs"} pv-aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8833, :column 3, :line 8833, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8833, :column 4, :line 8833, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8831, :column 7, :line 8831, :file "cljs/core.cljs"} prefers ^{:arglists (^{:end-column 12, :end-line 8833, :column 3, :line 8833, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8833, :column 4, :line 8833, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8831, :column 7, :line 8831, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8833, :column 4, :line 8833, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8833, :column 3, :line 8833, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8833, :column 4, :line 8833, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of preferred value -> set of other values", :end-column 15, :end-line 8831, :column 7, :line 8831, :file "cljs/core.cljs"} prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} -js->clj ^{:arglists (^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]), :protocol cljs.core/IEncodeClojure, :end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} -js->clj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2401, :column 10, :line 2401, :file "cljs/core.cljs"} LazySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2401, :column 10, :line 2401, :file "cljs/core.cljs"} LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 2401, :column 18, :line 2401, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2401, :column 19, :line 2401, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2401, :column 34, :line 2401, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2401, :column 47, :line 2401, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2401, :column 59, :line 2401, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8272, :column 4, :line 8272, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8284, :column 4, :line 8284, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8284, :column 5, :line 8284, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8269, :column 7, :line 8269, :file "cljs/core.cljs"} dedupe ^{:arglists (^{:end-column 6, :end-line 8272, :column 4, :line 8272, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8284, :column 4, :line 8284, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8284, :column 5, :line 8284, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8269, :column 7, :line 8269, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 10, :end-line 8284, :column 5, :line 8284, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8272, :column 4, :line 8272, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 8284, :column 4, :line 8284, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8284, :column 5, :line 8284, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 8269, :column 7, :line 8269, :file "cljs/core.cljs"} dedupe, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4488, :column 37, :line 4488, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4488, :column 38, :line 4488, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4488, :column 41, :line 4488, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4488, :column 8, :line 4488, :file "cljs/core.cljs"} unchecked-editable-array-for ^{:arglists (^{:end-column 43, :end-line 4488, :column 37, :line 4488, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4488, :column 38, :line 4488, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4488, :column 41, :line 4488, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4488, :column 8, :line 4488, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 4488, :column 38, :line 4488, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4488, :column 41, :line 4488, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4488, :column 37, :line 4488, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4488, :column 38, :line 4488, :file "cljs/core.cljs"} tv ^{:end-column 43, :end-line 4488, :column 41, :line 4488, :file "cljs/core.cljs"} i]), :private true, :end-column 37, :end-line 4488, :column 8, :line 4488, :file "cljs/core.cljs"} unchecked-editable-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 35, :end-line 4911, :column 33, :line 4911, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 4911, :column 10, :line 4911, :file "cljs/core.cljs"} ->ES6Iterator ^{:arglists ([^{:mutable true, :end-column 35, :end-line 4911, :column 33, :line 4911, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 4911, :column 10, :line 4911, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6Iterator [^{:mutable true, :end-column 35, :end-line 4911, :column 33, :line 4911, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 35, :end-line 4911, :column 33, :line 4911, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 4911, :column 10, :line 4911, :file "cljs/core.cljs"} ->ES6Iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3919, :column 10, :line 3919, :file "cljs/core.cljs"} VectorNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3919, :column 10, :line 3919, :file "cljs/core.cljs"} VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 3919, :column 21, :line 3919, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 3919, :column 22, :line 3919, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3919, :column 27, :line 3919, :file "cljs/core.cljs"} arr], :protocols #{}}, ^{:arglists (^{:end-column 10, :end-line 1241, :column 4, :line 1241, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1241, :column 5, :line 1241, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1242, :column 4, :line 1242, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1242, :column 5, :line 1242, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1242, :column 10, :line 1242, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1245, :column 4, :line 1245, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1245, :column 5, :line 1245, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1245, :column 10, :line 1245, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1245, :column 12, :line 1245, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1245, :column 14, :line 1245, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} dissoc ^{:arglists (^{:end-column 10, :end-line 1241, :column 4, :line 1241, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1241, :column 5, :line 1241, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1242, :column 4, :line 1242, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1242, :column 5, :line 1242, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1242, :column 10, :line 1242, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1245, :column 4, :line 1245, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1245, :column 5, :line 1245, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1245, :column 10, :line 1245, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1245, :column 12, :line 1245, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1245, :column 14, :line 1245, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1241, :column 5, :line 1241, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1242, :column 5, :line 1242, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1242, :column 10, :line 1242, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1245, :column 5, :line 1245, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1245, :column 10, :line 1245, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1245, :column 14, :line 1245, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1241, :column 4, :line 1241, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1241, :column 5, :line 1241, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1242, :column 4, :line 1242, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1242, :column 5, :line 1242, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1242, :column 10, :line 1242, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1245, :column 4, :line 1245, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1245, :column 5, :line 1245, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1245, :column 10, :line 1245, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1245, :column 12, :line 1245, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1245, :column 14, :line 1245, :file "cljs/core.cljs"} ks]), :doc "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).", :end-column 14, :end-line 1238, :column 7, :line 1238, :file "cljs/core.cljs"} dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3349, :column 4, :line 3349, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3349, :column 5, :line 3349, :file "cljs/core.cljs"} x] ^{:end-column 34, :end-line 3350, :column 4, :line 3350, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3350, :column 5, :line 3350, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 3350, :column 7, :line 3350, :file "cljs/core.cljs"} & ^{:end-column 33, :end-line 3350, :column 9, :line 3350, :file "cljs/core.cljs"} {:keys ^{:end-column 32, :end-line 3350, :column 16, :line 3350, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3350, :column 17, :line 3350, :file "cljs/core.cljs"} meta ^{:end-column 32, :end-line 3350, :column 22, :line 3350, :file "cljs/core.cljs"} validator]}]), :doc "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.", :end-column 12, :end-line 3335, :column 7, :line 3335, :file "cljs/core.cljs"} atom ^{:declared true, :end-column 73, :end-line 5353, :column 68, :line 5353, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 73, :end-line 5353, :column 68, :line 5353, :file "cljs/core.cljs"} atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2005, :column 3, :line 2005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2005, :column 4, :line 2005, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2005, :column 6, :line 2005, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} bit-shift-right ^{:arglists (^{:end-column 8, :end-line 2005, :column 3, :line 2005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2005, :column 4, :line 2005, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2005, :column 6, :line 2005, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2005, :column 4, :line 2005, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2005, :column 6, :line 2005, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2005, :column 3, :line 2005, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2005, :column 4, :line 2005, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2005, :column 6, :line 2005, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right", :end-column 23, :end-line 2003, :column 7, :line 2003, :file "cljs/core.cljs"} bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version* ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} {:tag string, :op :var, :name ^{:end-column 41, :end-line 16, :column 1, :line 16, :file "cljs/core.cljs"} *clojurescript-version*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} -first ^{:arglists (^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} -first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1327, :column 3, :line 1327, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1327, :column 4, :line 1327, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1324, :column 7, :line 1324, :file "cljs/core.cljs"} peek ^{:arglists (^{:end-column 9, :end-line 1327, :column 3, :line 1327, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1327, :column 4, :line 1327, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1324, :column 7, :line 1324, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1327, :column 4, :line 1327, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1327, :column 3, :line 1327, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1327, :column 4, :line 1327, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.", :end-column 12, :end-line 1324, :column 7, :line 1324, :file "cljs/core.cljs"} peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 24, :end-line 299, :column 14, :line 299, :file "cljs/core.cljs"} IKVReduce ^{:impls (cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 24, :end-line 299, :column 14, :line 299, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} -kv-reduce [^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]]}}, :protocol-symbol true, :end-column 24, :end-line 299, :column 14, :line 299, :file "cljs/core.cljs"} IKVReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} aget ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 176, :column 4, :line 176, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 176, :column 5, :line 176, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 176, :column 11, :line 176, :file "cljs/core.cljs"} i] ^{:end-column 20, :end-line 178, :column 4, :line 178, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 178, :column 5, :line 178, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 178, :column 11, :line 178, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 178, :column 13, :line 178, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 178, :column 15, :line 178, :file "cljs/core.cljs"} idxs]), :doc "Returns the value at the index.", :end-column 12, :end-line 174, :column 7, :line 174, :file "cljs/core.cljs"} aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6210, :column 10, :line 6210, :file "cljs/core.cljs"} PersistentTreeMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6210, :column 10, :line 6210, :file "cljs/core.cljs"} PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 84, :end-line 6210, :column 31, :line 6210, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 6210, :column 32, :line 6210, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6210, :column 37, :line 6210, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6210, :column 44, :line 6210, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6210, :column 52, :line 6210, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6210, :column 63, :line 6210, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6210, :column 77, :line 6210, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -write ^{:arglists (^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]), :protocol cljs.core/IWriter, :end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -write, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 2959, :column 12, :line 2959, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2959, :column 13, :line 2959, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2959, :column 7, :line 2959, :file "cljs/core.cljs"} iter ^{:arglists (^{:end-column 18, :end-line 2959, :column 12, :line 2959, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2959, :column 13, :line 2959, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2959, :column 7, :line 2959, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 2959, :column 13, :line 2959, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2959, :column 12, :line 2959, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 2959, :column 13, :line 2959, :file "cljs/core.cljs"} coll]), :end-column 12, :end-line 2959, :column 7, :line 2959, :file "cljs/core.cljs"} iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 7480, :column 3, :line 7480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7480, :column 4, :line 7480, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7480, :column 7, :line 7480, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7480, :column 12, :line 7480, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7479, :column 7, :line 7479, :file "cljs/core.cljs"} mk-bound-fn ^{:arglists (^{:end-column 16, :end-line 7480, :column 3, :line 7480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7480, :column 4, :line 7480, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7480, :column 7, :line 7480, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7480, :column 12, :line 7480, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7479, :column 7, :line 7479, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7480, :column 4, :line 7480, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7480, :column 7, :line 7480, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7480, :column 12, :line 7480, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 7480, :column 3, :line 7480, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7480, :column 4, :line 7480, :file "cljs/core.cljs"} sc ^{:end-column 12, :end-line 7480, :column 7, :line 7480, :file "cljs/core.cljs"} test ^{:end-column 16, :end-line 7480, :column 12, :line 7480, :file "cljs/core.cljs"} key]), :end-column 19, :end-line 7479, :column 7, :line 7479, :file "cljs/core.cljs"} mk-bound-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1037, :column 3, :line 1037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1035, :column 7, :line 1035, :file "cljs/core.cljs"} last ^{:arglists (^{:end-column 6, :end-line 1037, :column 3, :line 1037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1035, :column 7, :line 1035, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1037, :column 3, :line 1037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1037, :column 4, :line 1037, :file "cljs/core.cljs"} s]), :doc "Return the last item in coll, in linear time", :end-column 12, :end-line 1035, :column 7, :line 1035, :file "cljs/core.cljs"} last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8000, :column 3, :line 8000, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8000, :column 4, :line 8000, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8000, :column 6, :line 8000, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7995, :column 7, :line 7995, :file "cljs/core.cljs"} pr ^{:arglists (^{:end-column 11, :end-line 8000, :column 3, :line 8000, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8000, :column 4, :line 8000, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8000, :column 6, :line 8000, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7995, :column 7, :line 7995, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 8000, :column 6, :line 8000, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8000, :column 3, :line 8000, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8000, :column 4, :line 8000, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8000, :column 6, :line 8000, :file "cljs/core.cljs"} objs]), :doc "Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader", :end-column 10, :end-line 7995, :column 7, :line 7995, :file "cljs/core.cljs"} pr, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 58, :end-line 6203, :column 26, :line 6203, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6203, :column 27, :line 6203, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6203, :column 32, :line 6203, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6203, :column 8, :line 6203, :file "cljs/core.cljs"} tree-map-seq-push ^{:arglists (^{:end-column 58, :end-line 6203, :column 26, :line 6203, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6203, :column 27, :line 6203, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6203, :column 32, :line 6203, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6203, :column 8, :line 6203, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 6203, :column 27, :line 6203, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6203, :column 32, :line 6203, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 58, :end-line 6203, :column 26, :line 6203, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 6203, :column 27, :line 6203, :file "cljs/core.cljs"} node ^{:end-column 38, :end-line 6203, :column 32, :line 6203, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 47, :end-line 6203, :column 39, :line 6203, :file "cljs/core.cljs"} boolean, :end-column 58, :end-line 6203, :column 47, :line 6203, :file "cljs/core.cljs"} ascending?]), :private true, :end-column 26, :end-line 6203, :column 8, :line 6203, :file "cljs/core.cljs"} tree-map-seq-push, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2381, :column 3, :line 2381, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2381, :column 4, :line 2381, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} namespace ^{:arglists (^{:end-column 6, :end-line 2381, :column 3, :line 2381, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2381, :column 4, :line 2381, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string [^{:end-column 6, :end-line 2381, :column 4, :line 2381, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2381, :column 3, :line 2381, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2381, :column 4, :line 2381, :file "cljs/core.cljs"} x]), :doc "Returns the namespace String of a symbol or keyword, or nil if not present.", :end-column 17, :end-line 2379, :column 7, :line 2379, :file "cljs/core.cljs"} namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6883, :column 3, :line 6883, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6883, :column 4, :line 6883, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6883, :column 6, :line 6883, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6880, :column 7, :line 6880, :file "cljs/core.cljs"} obj-map ^{:arglists (^{:end-column 14, :end-line 6883, :column 3, :line 6883, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6883, :column 4, :line 6883, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6883, :column 6, :line 6883, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6880, :column 7, :line 6880, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 14, :end-line 6883, :column 6, :line 6883, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6883, :column 3, :line 6883, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6883, :column 4, :line 6883, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6883, :column 6, :line 6883, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new object map with supplied mappings.", :end-column 15, :end-line 6880, :column 7, :line 6880, :file "cljs/core.cljs"} obj-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 771, :column 10, :line 771, :file "cljs/core.cljs"} Reduced {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 771, :column 10, :line 771, :file "cljs/core.cljs"} Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 771, :column 18, :line 771, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 771, :column 19, :line 771, :file "cljs/core.cljs"} val], :protocols #{cljs.core/IDeref}}, ^{:arglists (^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} -conj ^{:arglists (^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]), :protocol cljs.core/ICollection, :tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} -conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5847, :column 10, :line 5847, :file "cljs/core.cljs"} NodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5847, :column 10, :line 5847, :file "cljs/core.cljs"} NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 5847, :column 18, :line 5847, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 5847, :column 19, :line 5847, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5847, :column 24, :line 5847, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5847, :column 30, :line 5847, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5847, :column 32, :line 5847, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5847, :column 44, :line 5847, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:declared true, :end-column 24, :end-line 479, :column 22, :line 479, :file "cljs/core.cljs"} = ^{:arglists (^{:end-column 7, :end-line 681, :column 4, :line 681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 681, :column 5, :line 681, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 682, :column 4, :line 682, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 682, :column 5, :line 682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 682, :column 7, :line 682, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 687, :column 4, :line 687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 687, :column 5, :line 687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 687, :column 7, :line 687, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 687, :column 9, :line 687, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 687, :column 11, :line 687, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 676, :column 8, :line 676, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 676, :column 16, :line 676, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 681, :column 5, :line 681, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 7, :end-line 682, :column 5, :line 682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 682, :column 7, :line 682, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 687, :column 5, :line 687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 687, :column 7, :line 687, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 687, :column 11, :line 687, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 681, :column 4, :line 681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 681, :column 5, :line 681, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 682, :column 4, :line 682, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 682, :column 5, :line 682, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 682, :column 7, :line 682, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 687, :column 4, :line 687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 687, :column 5, :line 687, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 687, :column 7, :line 687, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 687, :column 9, :line 687, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 687, :column 11, :line 687, :file "cljs/core.cljs"} more]), :doc "Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.", :tag ^{:end-column 16, :end-line 676, :column 8, :line 676, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 676, :column 16, :line 676, :file "cljs/core.cljs"} =, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 28, :end-line 359, :column 14, :line 359, :file "cljs/core.cljs"} ITransientMap ^{:impls (cljs.core/TransientHashMap cljs.core/TransientArrayMap), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 28, :end-line 359, :column 14, :line 359, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} -dissoc! [^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 28, :end-line 359, :column 14, :line 359, :file "cljs/core.cljs"} ITransientMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 3949, :column 18, :line 3949, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3949, :column 19, :line 3949, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3949, :column 22, :line 3949, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3949, :column 28, :line 3949, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3949, :column 35, :line 3949, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3949, :column 8, :line 3949, :file "cljs/core.cljs"} push-tail ^{:arglists (^{:end-column 44, :end-line 3949, :column 18, :line 3949, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3949, :column 19, :line 3949, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3949, :column 22, :line 3949, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3949, :column 28, :line 3949, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3949, :column 35, :line 3949, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3949, :column 8, :line 3949, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 22, :end-line 3949, :column 19, :line 3949, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3949, :column 22, :line 3949, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3949, :column 28, :line 3949, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3949, :column 35, :line 3949, :file "cljs/core.cljs"} tailnode]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 3949, :column 18, :line 3949, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3949, :column 19, :line 3949, :file "cljs/core.cljs"} pv ^{:end-column 28, :end-line 3949, :column 22, :line 3949, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 3949, :column 28, :line 3949, :file "cljs/core.cljs"} parent ^{:end-column 44, :end-line 3949, :column 35, :line 3949, :file "cljs/core.cljs"} tailnode]), :private true, :end-column 18, :end-line 3949, :column 8, :line 3949, :file "cljs/core.cljs"} push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3580, :column 4, :line 3580, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3580, :column 5, :line 3580, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3595, :column 4, :line 3595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3595, :column 5, :line 3595, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3595, :column 7, :line 3595, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3576, :column 7, :line 3576, :file "cljs/core.cljs"} take ^{:arglists (^{:end-column 7, :end-line 3580, :column 4, :line 3580, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3580, :column 5, :line 3580, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3595, :column 4, :line 3595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3595, :column 5, :line 3595, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3595, :column 7, :line 3595, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3576, :column 7, :line 3576, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3580, :column 5, :line 3580, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3595, :column 5, :line 3595, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3595, :column 7, :line 3595, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3580, :column 4, :line 3580, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3580, :column 5, :line 3580, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3595, :column 4, :line 3595, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3595, :column 5, :line 3595, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3595, :column 7, :line 3595, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.", :end-column 12, :end-line 3576, :column 7, :line 3576, :file "cljs/core.cljs"} take, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1398, :column 3, :line 1398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1398, :column 4, :line 1398, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1396, :column 8, :line 1396, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1396, :column 16, :line 1396, :file "cljs/core.cljs"} vector? ^{:arglists (^{:end-column 6, :end-line 1398, :column 3, :line 1398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1398, :column 4, :line 1398, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1396, :column 8, :line 1396, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1396, :column 16, :line 1396, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1398, :column 4, :line 1398, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1398, :column 3, :line 1398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1398, :column 4, :line 1398, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IVector", :tag ^{:end-column 16, :end-line 1396, :column 8, :line 1396, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1396, :column 16, :line 1396, :file "cljs/core.cljs"} vector?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 46, :end-line 5379, :column 34, :line 5379, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5379, :column 35, :line 5379, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5379, :column 42, :line 5379, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5379, :column 8, :line 5379, :file "cljs/core.cljs"} bitmap-indexed-node-index ^{:arglists (^{:end-column 46, :end-line 5379, :column 34, :line 5379, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5379, :column 35, :line 5379, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5379, :column 42, :line 5379, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5379, :column 8, :line 5379, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 42, :end-line 5379, :column 35, :line 5379, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5379, :column 42, :line 5379, :file "cljs/core.cljs"} bit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 5379, :column 34, :line 5379, :file "cljs/core.cljs"} [^{:end-column 42, :end-line 5379, :column 35, :line 5379, :file "cljs/core.cljs"} bitmap ^{:end-column 46, :end-line 5379, :column 42, :line 5379, :file "cljs/core.cljs"} bit]), :private true, :end-column 34, :end-line 5379, :column 8, :line 5379, :file "cljs/core.cljs"} bitmap-indexed-node-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1463, :column 24, :line 1463, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1463, :column 25, :line 1463, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} boolean ^{:arglists (^{:end-column 27, :end-line 1463, :column 24, :line 1463, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1463, :column 25, :line 1463, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 1463, :column 25, :line 1463, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1463, :column 24, :line 1463, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1463, :column 25, :line 1463, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1463, :column 8, :line 1463, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1463, :column 16, :line 1463, :file "cljs/core.cljs"} boolean, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 372, :column 14, :line 372, :file "cljs/core.cljs"} IChunk ^{:impls (cljs.core/ArrayChunk), :protocol-info {:methods {^{:end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 372, :column 14, :line 372, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} -drop-first [^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 372, :column 14, :line 372, :file "cljs/core.cljs"} IChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2001, :column 3, :line 2001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2001, :column 6, :line 2001, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1999, :column 7, :line 1999, :file "cljs/core.cljs"} bit-shift-left ^{:arglists (^{:end-column 8, :end-line 2001, :column 3, :line 2001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2001, :column 6, :line 2001, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1999, :column 7, :line 1999, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2001, :column 6, :line 2001, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2001, :column 3, :line 2001, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2001, :column 4, :line 2001, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2001, :column 6, :line 2001, :file "cljs/core.cljs"} n]), :doc "Bitwise shift left", :end-column 22, :end-line 1999, :column 7, :line 1999, :file "cljs/core.cljs"} bit-shift-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1957, :column 3, :line 1957, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1957, :column 4, :line 1957, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 1955, :column 7, :line 1955, :file "cljs/core.cljs"} rand-int ^{:arglists (^{:end-column 6, :end-line 8432, :column 3, :line 8432, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 8430, :column 7, :line 8430, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8432, :column 3, :line 8432, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8432, :column 4, :line 8432, :file "cljs/core.cljs"} n]), :doc "Returns a random integer between 0 (inclusive) and n (exclusive).", :end-column 16, :end-line 8430, :column 7, :line 8430, :file "cljs/core.cljs"} rand-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} aclone ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 159, :column 3, :line 159, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 159, :column 4, :line 159, :file "cljs/core.cljs"} arr]), :doc "Returns a javascript array, cloned from the passed in array", :end-column 14, :end-line 157, :column 7, :line 157, :file "cljs/core.cljs"} aclone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 6264, :column 18, :line 6264, :file "cljs/core.cljs"} BlackNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 6367, :column 10, :line 6367, :file "cljs/core.cljs"} BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 57, :end-line 6367, :column 20, :line 6367, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 6367, :column 21, :line 6367, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6367, :column 25, :line 6367, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6367, :column 29, :line 6367, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6367, :column 34, :line 6367, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6367, :column 50, :line 6367, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 16, :end-line 2586, :column 13, :line 2586, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2586, :column 14, :line 2586, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2586, :column 7, :line 2586, :file "cljs/core.cljs"} chunk ^{:arglists (^{:end-column 16, :end-line 2586, :column 13, :line 2586, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2586, :column 14, :line 2586, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2586, :column 7, :line 2586, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 2586, :column 14, :line 2586, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 2586, :column 13, :line 2586, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 2586, :column 14, :line 2586, :file "cljs/core.cljs"} b]), :end-column 13, :end-line 2586, :column 7, :line 2586, :file "cljs/core.cljs"} chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1786, :column 3, :line 1786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1786, :column 4, :line 1786, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} dec ^{:arglists (^{:end-column 6, :end-line 1786, :column 3, :line 1786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1786, :column 4, :line 1786, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1786, :column 4, :line 1786, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1786, :column 3, :line 1786, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1786, :column 4, :line 1786, :file "cljs/core.cljs"} x]), :doc "Returns a number one less than num.", :end-column 11, :end-line 1784, :column 7, :line 1784, :file "cljs/core.cljs"} dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 2078, :column 10, :line 2078, :file "cljs/core.cljs"} map ^{:arglists (^{:end-column 7, :end-line 3536, :column 4, :line 3536, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3536, :column 5, :line 3536, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3545, :column 4, :line 3545, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3545, :column 5, :line 3545, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3545, :column 7, :line 3545, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3556, :column 4, :line 3556, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3556, :column 5, :line 3556, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3556, :column 7, :line 3556, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3556, :column 10, :line 3556, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3562, :column 4, :line 3562, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3562, :column 5, :line 3562, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3562, :column 7, :line 3562, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3562, :column 10, :line 3562, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3562, :column 13, :line 3562, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3568, :column 4, :line 3568, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3568, :column 5, :line 3568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3568, :column 7, :line 3568, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3568, :column 10, :line 3568, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3568, :column 13, :line 3568, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3568, :column 16, :line 3568, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3568, :column 18, :line 3568, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 11, :end-line 3529, :column 7, :line 3529, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3536, :column 5, :line 3536, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3545, :column 5, :line 3545, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3545, :column 7, :line 3545, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3556, :column 5, :line 3556, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3556, :column 7, :line 3556, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3556, :column 10, :line 3556, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3562, :column 5, :line 3562, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3562, :column 7, :line 3562, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3562, :column 10, :line 3562, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3562, :column 13, :line 3562, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 3568, :column 5, :line 3568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3568, :column 7, :line 3568, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3568, :column 10, :line 3568, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3568, :column 13, :line 3568, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 3568, :column 18, :line 3568, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3536, :column 4, :line 3536, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3536, :column 5, :line 3536, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3545, :column 4, :line 3545, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3545, :column 5, :line 3545, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3545, :column 7, :line 3545, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3556, :column 4, :line 3556, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3556, :column 5, :line 3556, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3556, :column 7, :line 3556, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3556, :column 10, :line 3556, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3562, :column 4, :line 3562, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3562, :column 5, :line 3562, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3562, :column 7, :line 3562, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3562, :column 10, :line 3562, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3562, :column 13, :line 3562, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3568, :column 4, :line 3568, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3568, :column 5, :line 3568, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3568, :column 7, :line 3568, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3568, :column 10, :line 3568, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3568, :column 13, :line 3568, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3568, :column 16, :line 3568, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3568, :column 18, :line 3568, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.", :end-column 11, :end-line 3529, :column 7, :line 3529, :file "cljs/core.cljs"} map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7717, :column 4, :line 7717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7717, :column 5, :line 7717, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7724, :column 4, :line 7724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7724, :column 5, :line 7724, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7724, :column 7, :line 7724, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7731, :column 4, :line 7731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7731, :column 5, :line 7731, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7731, :column 7, :line 7731, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7731, :column 9, :line 7731, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7738, :column 5, :line 7738, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7738, :column 7, :line 7738, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7738, :column 9, :line 7738, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7738, :column 11, :line 7738, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7738, :column 13, :line 7738, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7711, :column 7, :line 7711, :file "cljs/core.cljs"} juxt ^{:arglists (^{:end-column 7, :end-line 7717, :column 4, :line 7717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7717, :column 5, :line 7717, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7724, :column 4, :line 7724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7724, :column 5, :line 7724, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7724, :column 7, :line 7724, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7731, :column 4, :line 7731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7731, :column 5, :line 7731, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7731, :column 7, :line 7731, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7731, :column 9, :line 7731, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7738, :column 5, :line 7738, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7738, :column 7, :line 7738, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7738, :column 9, :line 7738, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7738, :column 11, :line 7738, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7738, :column 13, :line 7738, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7711, :column 7, :line 7711, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7717, :column 5, :line 7717, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 7724, :column 5, :line 7724, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7724, :column 7, :line 7724, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 7731, :column 5, :line 7731, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7731, :column 7, :line 7731, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7731, :column 9, :line 7731, :file "cljs/core.cljs"} h] ^function [^{:end-column 7, :end-line 7738, :column 5, :line 7738, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7738, :column 7, :line 7738, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7738, :column 9, :line 7738, :file "cljs/core.cljs"} h & ^{:end-column 16, :end-line 7738, :column 13, :line 7738, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7717, :column 4, :line 7717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7717, :column 5, :line 7717, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 7724, :column 4, :line 7724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7724, :column 5, :line 7724, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7724, :column 7, :line 7724, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 7731, :column 4, :line 7731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7731, :column 5, :line 7731, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7731, :column 7, :line 7731, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7731, :column 9, :line 7731, :file "cljs/core.cljs"} h] ^{:end-column 16, :end-line 7738, :column 4, :line 7738, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7738, :column 5, :line 7738, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 7738, :column 7, :line 7738, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 7738, :column 9, :line 7738, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 7738, :column 11, :line 7738, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 7738, :column 13, :line 7738, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]", :end-column 12, :end-line 7711, :column 7, :line 7711, :file "cljs/core.cljs"} juxt, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1741, :column 4, :line 1741, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1741, :column 5, :line 1741, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1741, :column 7, :line 1741, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1741, :column 9, :line 1741, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1741, :column 11, :line 1741, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1736, :column 8, :line 1736, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1736, :column 16, :line 1736, :file "cljs/core.cljs"} < ^{:arglists (^{:end-column 7, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1741, :column 4, :line 1741, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1741, :column 5, :line 1741, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1741, :column 7, :line 1741, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1741, :column 9, :line 1741, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1741, :column 11, :line 1741, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1736, :column 8, :line 1736, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1736, :column 16, :line 1736, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1741, :column 5, :line 1741, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1741, :column 7, :line 1741, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1741, :column 11, :line 1741, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1739, :column 4, :line 1739, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1739, :column 5, :line 1739, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1740, :column 4, :line 1740, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1740, :column 5, :line 1740, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1740, :column 7, :line 1740, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1741, :column 4, :line 1741, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1741, :column 5, :line 1741, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1741, :column 7, :line 1741, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1741, :column 9, :line 1741, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1741, :column 11, :line 1741, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1736, :column 8, :line 1736, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1736, :column 16, :line 1736, :file "cljs/core.cljs"} <, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5396, :column 24, :line 5396, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5396, :column 25, :line 5396, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5396, :column 29, :line 5396, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5396, :column 31, :line 5396, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} inode-kv-reduce ^{:arglists (^{:end-column 36, :end-line 5396, :column 24, :line 5396, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5396, :column 25, :line 5396, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5396, :column 29, :line 5396, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5396, :column 31, :line 5396, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 5396, :column 25, :line 5396, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5396, :column 29, :line 5396, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5396, :column 31, :line 5396, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5396, :column 24, :line 5396, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5396, :column 25, :line 5396, :file "cljs/core.cljs"} arr ^{:end-column 31, :end-line 5396, :column 29, :line 5396, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 5396, :column 31, :line 5396, :file "cljs/core.cljs"} init]), :private true, :end-column 24, :end-line 5396, :column 8, :line 5396, :file "cljs/core.cljs"} inode-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4776, :column 26, :line 4776, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4776, :column 27, :line 4776, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4776, :column 29, :line 4776, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4776, :column 31, :line 4776, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4776, :column 8, :line 4776, :file "cljs/core.cljs"} obj-map->hash-map ^{:arglists (^{:end-column 33, :end-line 4776, :column 26, :line 4776, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4776, :column 27, :line 4776, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4776, :column 29, :line 4776, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4776, :column 31, :line 4776, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4776, :column 8, :line 4776, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 4776, :column 27, :line 4776, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4776, :column 29, :line 4776, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4776, :column 31, :line 4776, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4776, :column 26, :line 4776, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4776, :column 27, :line 4776, :file "cljs/core.cljs"} m ^{:end-column 31, :end-line 4776, :column 29, :line 4776, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4776, :column 31, :line 4776, :file "cljs/core.cljs"} v]), :private true, :end-column 26, :end-line 4776, :column 8, :line 4776, :file "cljs/core.cljs"} obj-map->hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 657, :column 3, :line 657, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 657, :column 4, :line 657, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 654, :column 8, :line 654, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 654, :column 12, :line 654, :file "cljs/core.cljs"} rest ^{:arglists (^{:end-column 9, :end-line 657, :column 3, :line 657, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 657, :column 4, :line 657, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 654, :column 8, :line 654, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 654, :column 12, :line 654, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 657, :column 4, :line 657, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 657, :column 3, :line 657, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 657, :column 4, :line 657, :file "cljs/core.cljs"} coll]), :doc "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.", :tag ^{:end-column 12, :end-line 654, :column 8, :line 654, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 654, :column 12, :line 654, :file "cljs/core.cljs"} rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8876, :column 3, :line 8876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8876, :column 4, :line 8876, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8872, :column 7, :line 8872, :file "cljs/core.cljs"} ex-data ^{:arglists (^{:end-column 7, :end-line 8876, :column 3, :line 8876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8876, :column 4, :line 8876, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8872, :column 7, :line 8872, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8876, :column 4, :line 8876, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8876, :column 3, :line 8876, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8876, :column 4, :line 8876, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.", :end-column 15, :end-line 8872, :column 7, :line 8872, :file "cljs/core.cljs"} ex-data, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 5026, :column 10, :line 5026, :file "cljs/core.cljs"} PersistentArrayMapSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 5026, :column 10, :line 5026, :file "cljs/core.cljs"} PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 5026, :column 32, :line 5026, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5026, :column 33, :line 5026, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5026, :column 37, :line 5026, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5026, :column 39, :line 5026, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} -drop-first ^{:arglists (^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 373, :column 16, :line 373, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 373, :column 17, :line 373, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunk, :end-column 16, :end-line 373, :column 4, :line 373, :file "cljs/core.cljs"} -drop-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8473, :column 4, :line 8473, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8473, :column 5, :line 8473, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8473, :column 11, :line 8473, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8474, :column 5, :line 8474, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8474, :column 7, :line 8474, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8474, :column 13, :line 8474, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8467, :column 8, :line 8467, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8467, :column 16, :line 8467, :file "cljs/core.cljs"} isa? ^{:arglists (^{:end-column 18, :end-line 8473, :column 4, :line 8473, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8473, :column 5, :line 8473, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8473, :column 11, :line 8473, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8474, :column 5, :line 8474, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8474, :column 7, :line 8474, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8474, :column 13, :line 8474, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8467, :column 8, :line 8467, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8467, :column 16, :line 8467, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8473, :column 5, :line 8473, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8473, :column 11, :line 8473, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8474, :column 5, :line 8474, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8474, :column 7, :line 8474, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8474, :column 13, :line 8474, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8473, :column 4, :line 8473, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8473, :column 5, :line 8473, :file "cljs/core.cljs"} child ^{:end-column 18, :end-line 8473, :column 11, :line 8473, :file "cljs/core.cljs"} parent] ^{:end-column 20, :end-line 8474, :column 4, :line 8474, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8474, :column 5, :line 8474, :file "cljs/core.cljs"} h ^{:end-column 13, :end-line 8474, :column 7, :line 8474, :file "cljs/core.cljs"} child ^{:end-column 20, :end-line 8474, :column 13, :line 8474, :file "cljs/core.cljs"} parent]), :doc "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy", :tag ^{:end-column 16, :end-line 8467, :column 8, :line 8467, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 8467, :column 16, :line 8467, :file "cljs/core.cljs"} isa?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} -clone ^{:arglists (^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]), :protocol cljs.core/ICloneable, :tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} -clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4731, :column 10, :line 4731, :file "cljs/core.cljs"} ->NeverEquiv ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4731, :column 10, :line 4731, :file "cljs/core.cljs"} {:arglists (^cljs.core/NeverEquiv []), :tag function, :op :var, :name ^{:arglists ([]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4731, :column 10, :line 4731, :file "cljs/core.cljs"} ->NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7807, :column 3, :line 7807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7807, :column 4, :line 7807, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7807, :column 7, :line 7807, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7805, :column 7, :line 7805, :file "cljs/core.cljs"} re-seq ^{:arglists (^{:end-column 9, :end-line 7807, :column 3, :line 7807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7807, :column 4, :line 7807, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7807, :column 7, :line 7807, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7805, :column 7, :line 7805, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7807, :column 4, :line 7807, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7807, :column 7, :line 7807, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7807, :column 3, :line 7807, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7807, :column 4, :line 7807, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7807, :column 7, :line 7807, :file "cljs/core.cljs"} s]), :doc "Returns a lazy sequence of successive matches of re in s.", :end-column 14, :end-line 7805, :column 7, :line 7805, :file "cljs/core.cljs"} re-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 8455, :column 3, :line 8455, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8453, :column 7, :line 8453, :file "cljs/core.cljs"} make-hierarchy ^{:arglists (^{:end-column 5, :end-line 8455, :column 3, :line 8455, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8453, :column 7, :line 8453, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 8455, :column 3, :line 8455, :file "cljs/core.cljs"} []), :doc "Creates a hierarchy object for use with derive, isa? etc.", :end-column 22, :end-line 8453, :column 7, :line 8453, :file "cljs/core.cljs"} make-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 479, :column 15, :line 479, :file "cljs/core.cljs"} Symbol {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 562, :column 10, :line 562, :file "cljs/core.cljs"} Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 562, :column 17, :line 562, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 562, :column 18, :line 562, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 562, :column 21, :line 562, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 562, :column 26, :line 562, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 562, :column 40, :line 562, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 562, :column 46, :line 562, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 48, :end-line 4462, :column 21, :line 4462, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4462, :column 22, :line 4462, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4462, :column 25, :line 4462, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4462, :column 31, :line 4462, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4462, :column 38, :line 4462, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4462, :column 8, :line 4462, :file "cljs/core.cljs"} tv-push-tail ^{:arglists (^{:end-column 48, :end-line 4462, :column 21, :line 4462, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4462, :column 22, :line 4462, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4462, :column 25, :line 4462, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4462, :column 31, :line 4462, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4462, :column 38, :line 4462, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4462, :column 8, :line 4462, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 4462, :column 22, :line 4462, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4462, :column 25, :line 4462, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4462, :column 31, :line 4462, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4462, :column 38, :line 4462, :file "cljs/core.cljs"} tail-node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 48, :end-line 4462, :column 21, :line 4462, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4462, :column 22, :line 4462, :file "cljs/core.cljs"} tv ^{:end-column 31, :end-line 4462, :column 25, :line 4462, :file "cljs/core.cljs"} level ^{:end-column 38, :end-line 4462, :column 31, :line 4462, :file "cljs/core.cljs"} parent ^{:end-column 48, :end-line 4462, :column 38, :line 4462, :file "cljs/core.cljs"} tail-node]), :private true, :end-column 21, :end-line 4462, :column 8, :line 4462, :file "cljs/core.cljs"} tv-push-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} -reduce ^{:arglists (^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]), :protocol cljs.core/IReduce, :end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} -reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} -count ^{:arglists (^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ICounted, :tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} -count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3276, :column 4, :line 3276, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3276, :column 5, :line 3276, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3286, :column 4, :line 3286, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3286, :column 5, :line 3286, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3286, :column 7, :line 3286, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3272, :column 7, :line 3272, :file "cljs/core.cljs"} keep ^{:arglists (^{:end-column 7, :end-line 3276, :column 4, :line 3276, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3276, :column 5, :line 3276, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3286, :column 4, :line 3286, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3286, :column 5, :line 3286, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3286, :column 7, :line 3286, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3272, :column 7, :line 3272, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3276, :column 5, :line 3276, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3286, :column 5, :line 3286, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3286, :column 7, :line 3286, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3276, :column 4, :line 3276, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3276, :column 5, :line 3276, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3286, :column 4, :line 3286, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3286, :column 5, :line 3286, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3286, :column 7, :line 3286, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.", :end-column 12, :end-line 3272, :column 7, :line 3272, :file "cljs/core.cljs"} keep, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1806, :column 3, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1804, :column 7, :line 1804, :file "cljs/core.cljs"} char ^{:arglists (^{:end-column 6, :end-line 1806, :column 3, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1804, :column 7, :line 1804, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1806, :column 3, :line 1806, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1806, :column 4, :line 1806, :file "cljs/core.cljs"} x]), :doc "Coerce to char", :end-column 12, :end-line 1804, :column 7, :line 1804, :file "cljs/core.cljs"} char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3735, :column 4, :line 3735, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3735, :column 5, :line 3735, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3736, :column 4, :line 3736, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3736, :column 5, :line 3736, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3736, :column 9, :line 3736, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 14, :end-line 3729, :column 7, :line 3729, :file "cljs/core.cljs"} mapcat ^{:arglists (^{:end-column 7, :end-line 3735, :column 4, :line 3735, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3735, :column 5, :line 3735, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3736, :column 4, :line 3736, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3736, :column 5, :line 3736, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3736, :column 9, :line 3736, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 14, :end-line 3729, :column 7, :line 3729, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3735, :column 5, :line 3735, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3736, :column 5, :line 3736, :file "cljs/core.cljs"} f & ^{:end-column 15, :end-line 3736, :column 9, :line 3736, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3735, :column 4, :line 3735, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3735, :column 5, :line 3735, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 3736, :column 4, :line 3736, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3736, :column 5, :line 3736, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3736, :column 7, :line 3736, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3736, :column 9, :line 3736, :file "cljs/core.cljs"} colls]), :static true, :added "1.0", :doc "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided", :end-column 14, :end-line 3729, :column 7, :line 3729, :file "cljs/core.cljs"} mapcat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1916, :column 3, :line 1916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1916, :column 4, :line 1916, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} unchecked-long ^{:arglists (^{:end-column 6, :end-line 1916, :column 3, :line 1916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1916, :column 4, :line 1916, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1916, :column 4, :line 1916, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1916, :column 3, :line 1916, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1916, :column 4, :line 1916, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 22, :end-line 1914, :column 7, :line 1914, :file "cljs/core.cljs"} unchecked-long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 16, :end-line 437, :column 1, :line 437, :file "cljs/core.cljs"} m3-seed ^{:end-column 16, :end-line 437, :column 1, :line 437, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 16, :end-line 437, :column 1, :line 437, :file "cljs/core.cljs"} m3-seed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some? ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 100, :column 3, :line 100, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 100, :column 4, :line 100, :file "cljs/core.cljs"} x]), :doc "Returns true if x is not nil, false otherwise.", :tag ^{:end-column 16, :end-line 98, :column 8, :line 98, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 98, :column 16, :line 98, :file "cljs/core.cljs"} some?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 1869, :column 24, :line 1869, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1869, :column 25, :line 1869, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1869, :column 7, :line 1869, :file "cljs/core.cljs"} unchecked-negate ^{:arglists (^{:end-column 27, :end-line 1869, :column 24, :line 1869, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1869, :column 25, :line 1869, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1869, :column 7, :line 1869, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 1869, :column 25, :line 1869, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 1869, :column 24, :line 1869, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 1869, :column 25, :line 1869, :file "cljs/core.cljs"} x]), :end-column 24, :end-line 1869, :column 7, :line 1869, :file "cljs/core.cljs"} unchecked-negate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2259, :column 3, :line 2259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2259, :column 4, :line 2259, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2257, :column 7, :line 2257, :file "cljs/core.cljs"} reverse ^{:arglists (^{:end-column 9, :end-line 2259, :column 3, :line 2259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2259, :column 4, :line 2259, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2257, :column 7, :line 2257, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2259, :column 4, :line 2259, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2259, :column 3, :line 2259, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2259, :column 4, :line 2259, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items in coll in reverse order. Not lazy.", :end-column 15, :end-line 2257, :column 7, :line 2257, :file "cljs/core.cljs"} reverse, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7618, :column 4, :line 7618, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7620, :column 4, :line 7620, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7620, :column 5, :line 7620, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7620, :column 11, :line 7620, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7621, :column 4, :line 7621, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7621, :column 5, :line 7621, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7621, :column 11, :line 7621, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7621, :column 15, :line 7621, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7614, :column 7, :line 7614, :file "cljs/core.cljs"} range ^{:arglists (^{:end-column 6, :end-line 7618, :column 4, :line 7618, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7620, :column 4, :line 7620, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7620, :column 5, :line 7620, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7620, :column 11, :line 7620, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7621, :column 4, :line 7621, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7621, :column 5, :line 7621, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7621, :column 11, :line 7621, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7621, :column 15, :line 7621, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7614, :column 7, :line 7614, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 9, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} end] [^{:end-column 11, :end-line 7620, :column 5, :line 7620, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7620, :column 11, :line 7620, :file "cljs/core.cljs"} end] ^cljs.core/Range [^{:end-column 11, :end-line 7621, :column 5, :line 7621, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7621, :column 11, :line 7621, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7621, :column 15, :line 7621, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7618, :column 4, :line 7618, :file "cljs/core.cljs"} [] ^{:end-column 9, :end-line 7619, :column 4, :line 7619, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7619, :column 5, :line 7619, :file "cljs/core.cljs"} end] ^{:end-column 15, :end-line 7620, :column 4, :line 7620, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7620, :column 5, :line 7620, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7620, :column 11, :line 7620, :file "cljs/core.cljs"} end] ^{:end-column 20, :end-line 7621, :column 4, :line 7621, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 7621, :column 5, :line 7621, :file "cljs/core.cljs"} start ^{:end-column 15, :end-line 7621, :column 11, :line 7621, :file "cljs/core.cljs"} end ^{:end-column 20, :end-line 7621, :column 15, :line 7621, :file "cljs/core.cljs"} step]), :doc "Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.", :end-column 13, :end-line 7614, :column 7, :line 7614, :file "cljs/core.cljs"} range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2017, :column 3, :line 2017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2017, :column 4, :line 2017, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 2015, :column 7, :line 2015, :file "cljs/core.cljs"} bit-count ^{:arglists (^{:end-column 6, :end-line 2017, :column 3, :line 2017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2017, :column 4, :line 2017, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 2015, :column 7, :line 2015, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2017, :column 4, :line 2017, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2017, :column 3, :line 2017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2017, :column 4, :line 2017, :file "cljs/core.cljs"} v]), :doc "Counts the number of bits set in n", :end-column 17, :end-line 2015, :column 7, :line 2015, :file "cljs/core.cljs"} bit-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 68, :end-line 5353, :column 56, :line 5353, :file "cljs/core.cljs"} create-node ^{:arglists (^{:end-column 40, :end-line 5830, :column 4, :line 5830, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5830, :column 5, :line 5830, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5830, :column 11, :line 5830, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5830, :column 16, :line 5830, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5830, :column 21, :line 5830, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5830, :column 30, :line 5830, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5830, :column 35, :line 5830, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5838, :column 4, :line 5838, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5838, :column 5, :line 5838, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5838, :column 10, :line 5838, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5838, :column 16, :line 5838, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5838, :column 21, :line 5838, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5838, :column 26, :line 5838, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5838, :column 35, :line 5838, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5838, :column 40, :line 5838, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5829, :column 8, :line 5829, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5830, :column 5, :line 5830, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5830, :column 11, :line 5830, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5830, :column 16, :line 5830, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5830, :column 21, :line 5830, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5830, :column 30, :line 5830, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5830, :column 35, :line 5830, :file "cljs/core.cljs"} val2] [^{:end-column 10, :end-line 5838, :column 5, :line 5838, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5838, :column 10, :line 5838, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5838, :column 16, :line 5838, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5838, :column 21, :line 5838, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5838, :column 26, :line 5838, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5838, :column 35, :line 5838, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5838, :column 40, :line 5838, :file "cljs/core.cljs"} val2]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 5830, :column 4, :line 5830, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5830, :column 5, :line 5830, :file "cljs/core.cljs"} shift ^{:end-column 16, :end-line 5830, :column 11, :line 5830, :file "cljs/core.cljs"} key1 ^{:end-column 21, :end-line 5830, :column 16, :line 5830, :file "cljs/core.cljs"} val1 ^{:end-column 30, :end-line 5830, :column 21, :line 5830, :file "cljs/core.cljs"} key2hash ^{:end-column 35, :end-line 5830, :column 30, :line 5830, :file "cljs/core.cljs"} key2 ^{:end-column 40, :end-line 5830, :column 35, :line 5830, :file "cljs/core.cljs"} val2] ^{:end-column 45, :end-line 5838, :column 4, :line 5838, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5838, :column 5, :line 5838, :file "cljs/core.cljs"} edit ^{:end-column 16, :end-line 5838, :column 10, :line 5838, :file "cljs/core.cljs"} shift ^{:end-column 21, :end-line 5838, :column 16, :line 5838, :file "cljs/core.cljs"} key1 ^{:end-column 26, :end-line 5838, :column 21, :line 5838, :file "cljs/core.cljs"} val1 ^{:end-column 35, :end-line 5838, :column 26, :line 5838, :file "cljs/core.cljs"} key2hash ^{:end-column 40, :end-line 5838, :column 35, :line 5838, :file "cljs/core.cljs"} key2 ^{:end-column 45, :end-line 5838, :column 40, :line 5838, :file "cljs/core.cljs"} val2]), :private true, :end-column 20, :end-line 5829, :column 8, :line 5829, :file "cljs/core.cljs"} create-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1578, :column 4, :line 1578, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1578, :column 5, :line 1578, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1580, :column 4, :line 1580, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1580, :column 10, :line 1580, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} sort ^{:arglists (^{:end-column 10, :end-line 1578, :column 4, :line 1578, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1578, :column 5, :line 1578, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1580, :column 4, :line 1580, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1580, :column 10, :line 1580, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1578, :column 5, :line 1578, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1580, :column 10, :line 1580, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1578, :column 4, :line 1578, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1578, :column 5, :line 1578, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 1580, :column 4, :line 1580, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1580, :column 5, :line 1580, :file "cljs/core.cljs"} comp ^{:end-column 15, :end-line 1580, :column 10, :line 1580, :file "cljs/core.cljs"} coll]), :doc "Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison funcion, or a -/0/+ valued comparator.\n   Comp defaults to compare.", :end-column 12, :end-line 1574, :column 7, :line 1574, :file "cljs/core.cljs"} sort, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 1255, :column 18, :line 1255, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1255, :column 22, :line 1255, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1255, :column 10, :line 1255, :file "cljs/core.cljs"} ->MetaFn ^{:arglists ([^{:end-column 22, :end-line 1255, :column 18, :line 1255, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1255, :column 22, :line 1255, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1255, :column 10, :line 1255, :file "cljs/core.cljs"} {:arglists (^cljs.core/MetaFn [^{:end-column 22, :end-line 1255, :column 18, :line 1255, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1255, :column 22, :line 1255, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 1255, :column 18, :line 1255, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1255, :column 22, :line 1255, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1255, :column 10, :line 1255, :file "cljs/core.cljs"} ->MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1852, :column 25, :line 1852, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1852, :column 26, :line 1852, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} unchecked-inc-int ^{:arglists (^{:end-column 28, :end-line 1852, :column 25, :line 1852, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1852, :column 26, :line 1852, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1852, :column 26, :line 1852, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1852, :column 25, :line 1852, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1852, :column 26, :line 1852, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1852, :column 7, :line 1852, :file "cljs/core.cljs"} unchecked-inc-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} -compare ^{:arglists (^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]), :protocol cljs.core/IComparable, :tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} -compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3258, :column 3, :line 3258, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3258, :column 6, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3253, :column 7, :line 3253, :file "cljs/core.cljs"} map-indexed ^{:arglists (^{:end-column 11, :end-line 3258, :column 3, :line 3258, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3258, :column 6, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3253, :column 7, :line 3253, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3258, :column 6, :line 3258, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3258, :column 3, :line 3258, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3258, :column 4, :line 3258, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3258, :column 6, :line 3258, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.", :end-column 19, :end-line 3253, :column 7, :line 3253, :file "cljs/core.cljs"} map-indexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 7426, :column 18, :line 7426, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7426, :column 7, :line 7426, :file "cljs/core.cljs"} array-list ^{:arglists (^{:end-column 20, :end-line 7426, :column 18, :line 7426, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7426, :column 7, :line 7426, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayList []), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7426, :column 18, :line 7426, :file "cljs/core.cljs"} []), :end-column 18, :end-line 7426, :column 7, :line 7426, :file "cljs/core.cljs"} array-list, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8438, :column 3, :line 8438, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8438, :column 4, :line 8438, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8434, :column 7, :line 8434, :file "cljs/core.cljs"} rand-nth ^{:arglists (^{:end-column 9, :end-line 8438, :column 3, :line 8438, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8438, :column 4, :line 8438, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8434, :column 7, :line 8434, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8438, :column 4, :line 8438, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8438, :column 3, :line 8438, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8438, :column 4, :line 8438, :file "cljs/core.cljs"} coll]), :doc "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.", :end-column 16, :end-line 8434, :column 7, :line 8434, :file "cljs/core.cljs"} rand-nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3194, :column 4, :line 3194, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3194, :column 5, :line 3194, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3194, :column 7, :line 3194, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3201, :column 4, :line 3201, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3201, :column 5, :line 3201, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3201, :column 7, :line 3201, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3201, :column 9, :line 3201, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3208, :column 8, :line 3208, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3208, :column 11, :line 3208, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3208, :column 14, :line 3208, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3208, :column 16, :line 3208, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3187, :column 7, :line 3187, :file "cljs/core.cljs"} comp ^{:arglists (^{:end-column 6, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3194, :column 4, :line 3194, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3194, :column 5, :line 3194, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3194, :column 7, :line 3194, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3201, :column 4, :line 3201, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3201, :column 5, :line 3201, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3201, :column 7, :line 3201, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3201, :column 9, :line 3201, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3208, :column 8, :line 3208, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3208, :column 11, :line 3208, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3208, :column 14, :line 3208, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3208, :column 16, :line 3208, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3187, :column 7, :line 3187, :file "cljs/core.cljs"} {:arglists (^function [] [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 3194, :column 5, :line 3194, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3194, :column 7, :line 3194, :file "cljs/core.cljs"} g] ^function [^{:end-column 7, :end-line 3201, :column 5, :line 3201, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3201, :column 7, :line 3201, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3201, :column 9, :line 3201, :file "cljs/core.cljs"} h] ^function [^{:end-column 8, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3208, :column 8, :line 3208, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3208, :column 11, :line 3208, :file "cljs/core.cljs"} f3 & ^{:end-column 19, :end-line 3208, :column 16, :line 3208, :file "cljs/core.cljs"} fs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3192, :column 4, :line 3192, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 3193, :column 4, :line 3193, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3193, :column 5, :line 3193, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3194, :column 4, :line 3194, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3194, :column 5, :line 3194, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3194, :column 7, :line 3194, :file "cljs/core.cljs"} g] ^{:end-column 11, :end-line 3201, :column 4, :line 3201, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3201, :column 5, :line 3201, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3201, :column 7, :line 3201, :file "cljs/core.cljs"} g ^{:end-column 11, :end-line 3201, :column 9, :line 3201, :file "cljs/core.cljs"} h] ^{:end-column 19, :end-line 3208, :column 4, :line 3208, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3208, :column 5, :line 3208, :file "cljs/core.cljs"} f1 ^{:end-column 11, :end-line 3208, :column 8, :line 3208, :file "cljs/core.cljs"} f2 ^{:end-column 14, :end-line 3208, :column 11, :line 3208, :file "cljs/core.cljs"} f3 ^{:end-column 16, :end-line 3208, :column 14, :line 3208, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3208, :column 16, :line 3208, :file "cljs/core.cljs"} fs]), :doc "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.", :end-column 12, :end-line 3187, :column 7, :line 3187, :file "cljs/core.cljs"} comp, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2509, :column 4, :line 2509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2509, :column 5, :line 2509, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2511, :column 4, :line 2511, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2511, :column 5, :line 2511, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2511, :column 9, :line 2511, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2513, :column 4, :line 2513, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2513, :column 5, :line 2513, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2513, :column 9, :line 2513, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2513, :column 13, :line 2513, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2508, :column 7, :line 2508, :file "cljs/core.cljs"} array-chunk ^{:arglists (^{:end-column 9, :end-line 2509, :column 4, :line 2509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2509, :column 5, :line 2509, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2511, :column 4, :line 2511, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2511, :column 5, :line 2511, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2511, :column 9, :line 2511, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2513, :column 4, :line 2513, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2513, :column 5, :line 2513, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2513, :column 9, :line 2513, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2513, :column 13, :line 2513, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2508, :column 7, :line 2508, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2509, :column 5, :line 2509, :file "cljs/core.cljs"} arr] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2511, :column 5, :line 2511, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2511, :column 9, :line 2511, :file "cljs/core.cljs"} off] ^cljs.core/ArrayChunk [^{:end-column 9, :end-line 2513, :column 5, :line 2513, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2513, :column 9, :line 2513, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2513, :column 13, :line 2513, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2509, :column 4, :line 2509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2509, :column 5, :line 2509, :file "cljs/core.cljs"} arr] ^{:end-column 13, :end-line 2511, :column 4, :line 2511, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2511, :column 5, :line 2511, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2511, :column 9, :line 2511, :file "cljs/core.cljs"} off] ^{:end-column 17, :end-line 2513, :column 4, :line 2513, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2513, :column 5, :line 2513, :file "cljs/core.cljs"} arr ^{:end-column 13, :end-line 2513, :column 9, :line 2513, :file "cljs/core.cljs"} off ^{:end-column 17, :end-line 2513, :column 13, :line 2513, :file "cljs/core.cljs"} end]), :end-column 19, :end-line 2508, :column 7, :line 2508, :file "cljs/core.cljs"} array-chunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 2009, :column 3, :line 2009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2009, :column 4, :line 2009, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2009, :column 6, :line 2009, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 2007, :column 7, :line 2007, :file "cljs/core.cljs"} bit-shift-right-zero-fill ^{:arglists (^{:end-column 8, :end-line 2009, :column 3, :line 2009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2009, :column 4, :line 2009, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2009, :column 6, :line 2009, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 2007, :column 7, :line 2007, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2009, :column 4, :line 2009, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2009, :column 6, :line 2009, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2009, :column 3, :line 2009, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2009, :column 4, :line 2009, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2009, :column 6, :line 2009, :file "cljs/core.cljs"} n]), :doc "DEPRECATED: Bitwise shift right with zero fill", :end-column 33, :end-line 2007, :column 7, :line 2007, :file "cljs/core.cljs"} bit-shift-right-zero-fill, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} -as-transient ^{:arglists (^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IEditableCollection, :tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} -as-transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7753, :column 4, :line 7753, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7753, :column 5, :line 7753, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7756, :column 5, :line 7756, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7756, :column 7, :line 7756, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7747, :column 7, :line 7747, :file "cljs/core.cljs"} dorun ^{:arglists (^{:end-column 10, :end-line 7753, :column 4, :line 7753, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7753, :column 5, :line 7753, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7756, :column 5, :line 7756, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7756, :column 7, :line 7756, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7747, :column 7, :line 7747, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 10, :end-line 7753, :column 5, :line 7753, :file "cljs/core.cljs"} coll] ^clj-nil [^{:end-column 7, :end-line 7756, :column 5, :line 7756, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7756, :column 7, :line 7756, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7753, :column 4, :line 7753, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7753, :column 5, :line 7753, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 7756, :column 4, :line 7756, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7756, :column 5, :line 7756, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7756, :column 7, :line 7756, :file "cljs/core.cljs"} coll]), :doc "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.", :end-column 13, :end-line 7747, :column 7, :line 7747, :file "cljs/core.cljs"} dorun, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 4036, :column 10, :line 4036, :file "cljs/core.cljs"} pr-sequential-writer ^{:arglists (^{:end-column 70, :end-line 7824, :column 28, :line 7824, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7824, :column 29, :line 7824, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7824, :column 36, :line 7824, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7824, :column 46, :line 7824, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7824, :column 52, :line 7824, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7824, :column 56, :line 7824, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7824, :column 60, :line 7824, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7824, :column 65, :line 7824, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 7824, :column 7, :line 7824, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 7824, :column 29, :line 7824, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7824, :column 36, :line 7824, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7824, :column 46, :line 7824, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7824, :column 52, :line 7824, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7824, :column 56, :line 7824, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7824, :column 60, :line 7824, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7824, :column 65, :line 7824, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 70, :end-line 7824, :column 28, :line 7824, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 7824, :column 29, :line 7824, :file "cljs/core.cljs"} writer ^{:end-column 46, :end-line 7824, :column 36, :line 7824, :file "cljs/core.cljs"} print-one ^{:end-column 52, :end-line 7824, :column 46, :line 7824, :file "cljs/core.cljs"} begin ^{:end-column 56, :end-line 7824, :column 52, :line 7824, :file "cljs/core.cljs"} sep ^{:end-column 60, :end-line 7824, :column 56, :line 7824, :file "cljs/core.cljs"} end ^{:end-column 65, :end-line 7824, :column 60, :line 7824, :file "cljs/core.cljs"} opts ^{:end-column 70, :end-line 7824, :column 65, :line 7824, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 7824, :column 7, :line 7824, :file "cljs/core.cljs"} pr-sequential-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 37, :end-line 1068, :column 31, :line 1068, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1068, :column 32, :line 1068, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1068, :column 8, :line 1068, :file "cljs/core.cljs"} accumulating-seq-count ^{:arglists (^{:end-column 37, :end-line 1068, :column 31, :line 1068, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1068, :column 32, :line 1068, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1068, :column 8, :line 1068, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 37, :end-line 1068, :column 32, :line 1068, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 37, :end-line 1068, :column 31, :line 1068, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 1068, :column 32, :line 1068, :file "cljs/core.cljs"} coll]), :private true, :end-column 31, :end-line 1068, :column 8, :line 1068, :file "cljs/core.cljs"} accumulating-seq-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 23, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} IIndexed ^{:impls (cljs.core/Range cljs.core/RedNode cljs.core/BlackNode cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 23, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -nth [^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]]}}, :protocol-symbol true, :end-column 23, :end-line 246, :column 14, :line 246, :file "cljs/core.cljs"} IIndexed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 1342, :column 4, :line 1342, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1342, :column 5, :line 1342, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1343, :column 4, :line 1343, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1343, :column 5, :line 1343, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1343, :column 10, :line 1343, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1346, :column 4, :line 1346, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1346, :column 5, :line 1346, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1346, :column 10, :line 1346, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1346, :column 12, :line 1346, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1346, :column 14, :line 1346, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1339, :column 7, :line 1339, :file "cljs/core.cljs"} disj ^{:arglists (^{:end-column 10, :end-line 1342, :column 4, :line 1342, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1342, :column 5, :line 1342, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1343, :column 4, :line 1343, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1343, :column 5, :line 1343, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1343, :column 10, :line 1343, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1346, :column 4, :line 1346, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1346, :column 5, :line 1346, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1346, :column 10, :line 1346, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1346, :column 12, :line 1346, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1346, :column 14, :line 1346, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1339, :column 7, :line 1339, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1342, :column 5, :line 1342, :file "cljs/core.cljs"} coll] [^{:end-column 10, :end-line 1343, :column 5, :line 1343, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1343, :column 10, :line 1343, :file "cljs/core.cljs"} k] [^{:end-column 10, :end-line 1346, :column 5, :line 1346, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1346, :column 10, :line 1346, :file "cljs/core.cljs"} k & ^{:end-column 17, :end-line 1346, :column 14, :line 1346, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 1342, :column 4, :line 1342, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1342, :column 5, :line 1342, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1343, :column 4, :line 1343, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1343, :column 5, :line 1343, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1343, :column 10, :line 1343, :file "cljs/core.cljs"} k] ^{:end-column 17, :end-line 1346, :column 4, :line 1346, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1346, :column 5, :line 1346, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1346, :column 10, :line 1346, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1346, :column 12, :line 1346, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1346, :column 14, :line 1346, :file "cljs/core.cljs"} ks]), :doc "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 12, :end-line 1339, :column 7, :line 1339, :file "cljs/core.cljs"} disj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 31, :end-line 333, :column 14, :line 333, :file "cljs/core.cljs"} IPrintWithWriter ^{:impls (cljs.core/UUID cljs.core/Eduction cljs.core/List cljs.core/KeySeq cljs.core/Range cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/LazyTransformer cljs.core/EmptyList cljs.core/PersistentQueueSeq cljs.core/PersistentVector cljs.core/RedNode cljs.core/ValSeq cljs.core/Atom cljs.core/ChunkedCons cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/Subvec cljs.core/ArrayNodeSeq cljs.core/PersistentHashMap cljs.core/RSeq cljs.core/Cons cljs.core/ObjMap cljs.core/ChunkedSeq cljs.core/PersistentTreeSet cljs.core/PersistentArrayMapSeq cljs.core/BlackNode cljs.core/NodeSeq cljs.core/PersistentTreeMapSeq cljs.core/LazySeq cljs.core/IndexedSeq cljs.core/Keyword cljs.core/Symbol), :protocol-info {:methods {^{:end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 31, :end-line 333, :column 14, :line 333, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} -pr-writer [^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]]}}, :protocol-symbol true, :end-column 31, :end-line 333, :column 14, :line 333, :file "cljs/core.cljs"} IPrintWithWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 8837, :column 16, :line 8837, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8837, :column 10, :line 8837, :file "cljs/core.cljs"} ->UUID ^{:arglists ([^{:end-column 21, :end-line 8837, :column 16, :line 8837, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8837, :column 10, :line 8837, :file "cljs/core.cljs"} {:arglists (^cljs.core/UUID [^{:end-column 21, :end-line 8837, :column 16, :line 8837, :file "cljs/core.cljs"} uuid]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 8837, :column 16, :line 8837, :file "cljs/core.cljs"} uuid]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IPrintWithWriter}, :end-column 15, :end-line 8837, :column 10, :line 8837, :file "cljs/core.cljs"} ->UUID, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 22, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} IVector ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 22, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} -assoc-n [^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]]}}, :protocol-symbol true, :end-column 22, :end-line 281, :column 14, :line 281, :file "cljs/core.cljs"} IVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 394, :column 14, :line 394, :file "cljs/core.cljs"} IIterable ^{:impls (cljs.core/Range cljs.core/PersistentArrayMap cljs.core/PersistentVector cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 394, :column 14, :line 394, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 14, :end-line 395, :column 4, :line 395, :file "cljs/core.cljs"} -iterator [^{:end-column 20, :end-line 395, :column 14, :line 395, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 395, :column 15, :line 395, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 394, :column 14, :line 394, :file "cljs/core.cljs"} IIterable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2 ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the second most recent value printed", :end-column 6, :end-line 63, :column 1, :line 61, :file "cljs/core.cljs"} *2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 19, :end-line 8294, :column 10, :line 8294, :file "cljs/core.cljs"} Eduction {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}, :end-column 19, :end-line 8294, :column 10, :line 8294, :file "cljs/core.cljs"} Eduction, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 31, :end-line 8294, :column 19, :line 8294, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 8294, :column 20, :line 8294, :file "cljs/core.cljs"} xform ^{:end-column 31, :end-line 8294, :column 26, :line 8294, :file "cljs/core.cljs"} coll], :protocols #{cljs.core/ISeqable cljs.core/IPrintWithWriter cljs.core/ISequential cljs.core/IReduce}}, ^{:arglists (^{:end-column 28, :end-line 3930, :column 22, :line 3930, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3930, :column 23, :line 3930, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3930, :column 8, :line 3930, :file "cljs/core.cljs"} pv-clone-node ^{:arglists (^{:end-column 28, :end-line 3930, :column 22, :line 3930, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3930, :column 23, :line 3930, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3930, :column 8, :line 3930, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3930, :column 23, :line 3930, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3930, :column 22, :line 3930, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3930, :column 23, :line 3930, :file "cljs/core.cljs"} node]), :private true, :end-column 22, :end-line 3930, :column 8, :line 3930, :file "cljs/core.cljs"} pv-clone-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 25, :end-line 855, :column 20, :line 855, :file "cljs/core.cljs"} cons ^{:arglists (^{:end-column 11, :end-line 2328, :column 3, :line 2328, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2328, :column 4, :line 2328, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2328, :column 6, :line 2328, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2326, :column 7, :line 2326, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 6, :end-line 2328, :column 4, :line 2328, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2328, :column 6, :line 2328, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2328, :column 3, :line 2328, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2328, :column 4, :line 2328, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2328, :column 6, :line 2328, :file "cljs/core.cljs"} coll]), :doc "Returns a new seq where x is the first element and seq is the rest.", :end-column 12, :end-line 2326, :column 7, :line 2326, :file "cljs/core.cljs"} cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7216, :column 10, :line 7216, :file "cljs/core.cljs"} PersistentTreeSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7216, :column 10, :line 7216, :file "cljs/core.cljs"} PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 7216, :column 28, :line 7216, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7216, :column 29, :line 7216, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7216, :column 34, :line 7216, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7216, :column 53, :line 7216, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 17, :end-line 1924, :column 14, :line 1924, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1924, :column 15, :line 1924, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1924, :column 7, :line 1924, :file "cljs/core.cljs"} floats ^{:arglists (^{:end-column 17, :end-line 1924, :column 14, :line 1924, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1924, :column 15, :line 1924, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1924, :column 7, :line 1924, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1924, :column 15, :line 1924, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1924, :column 14, :line 1924, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1924, :column 15, :line 1924, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1924, :column 7, :line 1924, :file "cljs/core.cljs"} floats, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 60, :end-line 4035, :column 44, :line 4035, :file "cljs/core.cljs"} TransientVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 4504, :column 10, :line 4504, :file "cljs/core.cljs"} TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 4507, :column 26, :line 4504, :file "cljs/core.cljs"} [^{:mutable true, :end-column 41, :end-line 4504, :column 37, :line 4504, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4505, :column 37, :line 4505, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4506, :column 37, :line 4506, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4507, :column 37, :line 4507, :file "cljs/core.cljs"} tail], :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 2037, :column 3, :line 2037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2035, :column 8, :line 2035, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2035, :column 16, :line 2035, :file "cljs/core.cljs"} pos? ^{:arglists (^{:end-column 6, :end-line 2037, :column 3, :line 2037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2035, :column 8, :line 2035, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2035, :column 16, :line 2035, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2037, :column 3, :line 2037, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2037, :column 4, :line 2037, :file "cljs/core.cljs"} n]), :doc "Returns true if num is greater than zero, else false", :tag ^{:end-column 16, :end-line 2035, :column 8, :line 2035, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2035, :column 16, :line 2035, :file "cljs/core.cljs"} pos?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3236, :column 4, :line 3236, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3236, :column 5, :line 3236, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3236, :column 7, :line 3236, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3242, :column 4, :line 3242, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3242, :column 5, :line 3242, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3242, :column 7, :line 3242, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3242, :column 9, :line 3242, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3247, :column 4, :line 3247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3247, :column 5, :line 3247, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3247, :column 7, :line 3247, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3247, :column 9, :line 3247, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3247, :column 11, :line 3247, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3230, :column 7, :line 3230, :file "cljs/core.cljs"} fnil ^{:arglists (^{:end-column 9, :end-line 3236, :column 4, :line 3236, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3236, :column 5, :line 3236, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3236, :column 7, :line 3236, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3242, :column 4, :line 3242, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3242, :column 5, :line 3242, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3242, :column 7, :line 3242, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3242, :column 9, :line 3242, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3247, :column 4, :line 3247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3247, :column 5, :line 3247, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3247, :column 7, :line 3247, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3247, :column 9, :line 3247, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3247, :column 11, :line 3247, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3230, :column 7, :line 3230, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3236, :column 5, :line 3236, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3236, :column 7, :line 3236, :file "cljs/core.cljs"} x] ^function [^{:end-column 7, :end-line 3242, :column 5, :line 3242, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3242, :column 7, :line 3242, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3242, :column 9, :line 3242, :file "cljs/core.cljs"} y] ^function [^{:end-column 7, :end-line 3247, :column 5, :line 3247, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3247, :column 7, :line 3247, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3247, :column 9, :line 3247, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3247, :column 11, :line 3247, :file "cljs/core.cljs"} z]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3236, :column 4, :line 3236, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3236, :column 5, :line 3236, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3236, :column 7, :line 3236, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 3242, :column 4, :line 3242, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3242, :column 5, :line 3242, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3242, :column 7, :line 3242, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3242, :column 9, :line 3242, :file "cljs/core.cljs"} y] ^{:end-column 13, :end-line 3247, :column 4, :line 3247, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3247, :column 5, :line 3247, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 3247, :column 7, :line 3247, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 3247, :column 9, :line 3247, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 3247, :column 11, :line 3247, :file "cljs/core.cljs"} z]), :doc "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.", :end-column 12, :end-line 3230, :column 7, :line 3230, :file "cljs/core.cljs"} fnil, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 7057, :column 3, :line 7057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7057, :column 4, :line 7057, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7057, :column 6, :line 7057, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 7057, :column 8, :line 7057, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 7052, :column 7, :line 7052, :file "cljs/core.cljs"} merge-with ^{:arglists (^{:end-column 13, :end-line 7057, :column 3, :line 7057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7057, :column 4, :line 7057, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7057, :column 6, :line 7057, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 7057, :column 8, :line 7057, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 7052, :column 7, :line 7052, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7057, :column 4, :line 7057, :file "cljs/core.cljs"} f & ^{:end-column 13, :end-line 7057, :column 8, :line 7057, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7057, :column 3, :line 7057, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7057, :column 4, :line 7057, :file "cljs/core.cljs"} f ^{:end-column 8, :end-line 7057, :column 6, :line 7057, :file "cljs/core.cljs"} & ^{:end-column 13, :end-line 7057, :column 8, :line 7057, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).", :end-column 18, :end-line 7052, :column 7, :line 7052, :file "cljs/core.cljs"} merge-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1379, :column 3, :line 1379, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1379, :column 4, :line 1379, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1377, :column 8, :line 1377, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1377, :column 16, :line 1377, :file "cljs/core.cljs"} sequential? ^{:arglists (^{:end-column 6, :end-line 1379, :column 3, :line 1379, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1379, :column 4, :line 1379, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1377, :column 8, :line 1377, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1377, :column 16, :line 1377, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1379, :column 4, :line 1379, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1379, :column 3, :line 1379, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1379, :column 4, :line 1379, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISequential", :tag ^{:end-column 16, :end-line 1377, :column 8, :line 1377, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1377, :column 16, :line 1377, :file "cljs/core.cljs"} sequential?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6708, :column 25, :line 6708, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6708, :column 26, :line 6708, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6708, :column 31, :line 6708, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6708, :column 36, :line 6708, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6708, :column 38, :line 6708, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6708, :column 8, :line 6708, :file "cljs/core.cljs"} tree-map-replace ^{:arglists (^{:end-column 40, :end-line 6708, :column 25, :line 6708, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6708, :column 26, :line 6708, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6708, :column 31, :line 6708, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6708, :column 36, :line 6708, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6708, :column 38, :line 6708, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6708, :column 8, :line 6708, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 6708, :column 26, :line 6708, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6708, :column 31, :line 6708, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6708, :column 36, :line 6708, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6708, :column 38, :line 6708, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6708, :column 25, :line 6708, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6708, :column 26, :line 6708, :file "cljs/core.cljs"} comp ^{:end-column 36, :end-line 6708, :column 31, :line 6708, :file "cljs/core.cljs"} tree ^{:end-column 38, :end-line 6708, :column 36, :line 6708, :file "cljs/core.cljs"} k ^{:end-column 40, :end-line 6708, :column 38, :line 6708, :file "cljs/core.cljs"} v]), :private true, :end-column 25, :end-line 6708, :column 8, :line 6708, :file "cljs/core.cljs"} tree-map-replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 444, :column 25, :line 444, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 444, :column 26, :line 444, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 444, :column 29, :line 444, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 444, :column 8, :line 444, :file "cljs/core.cljs"} number, :end-column 25, :end-line 444, :column 15, :line 444, :file "cljs/core.cljs"} m3-mix-H1 ^{:arglists (^{:end-column 32, :end-line 444, :column 25, :line 444, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 444, :column 26, :line 444, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 444, :column 29, :line 444, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 444, :column 8, :line 444, :file "cljs/core.cljs"} number, :end-column 25, :end-line 444, :column 15, :line 444, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 29, :end-line 444, :column 26, :line 444, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 444, :column 29, :line 444, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 444, :column 25, :line 444, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 444, :column 26, :line 444, :file "cljs/core.cljs"} h1 ^{:end-column 32, :end-line 444, :column 29, :line 444, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 444, :column 8, :line 444, :file "cljs/core.cljs"} number, :end-column 25, :end-line 444, :column 15, :line 444, :file "cljs/core.cljs"} m3-mix-H1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 49, :end-line 5272, :column 39, :line 5272, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5273, :column 39, :line 5273, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5274, :column 29, :line 5274, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 5272, :column 10, :line 5272, :file "cljs/core.cljs"} ->TransientArrayMap ^{:arglists ([^{:mutable true, :end-column 49, :end-line 5272, :column 39, :line 5272, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5273, :column 39, :line 5273, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5274, :column 29, :line 5274, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 5272, :column 10, :line 5272, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientArrayMap [^{:mutable true, :end-column 49, :end-line 5272, :column 39, :line 5272, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5273, :column 39, :line 5273, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5274, :column 29, :line 5274, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 49, :end-line 5272, :column 39, :line 5272, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5273, :column 39, :line 5273, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5274, :column 29, :line 5274, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 5272, :column 10, :line 5272, :file "cljs/core.cljs"} ->TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 29, :end-line 609, :column 20, :line 609, :file "cljs/core.cljs"} prim-seq ^{:arglists (^{:end-column 10, :end-line 943, :column 4, :line 943, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 943, :column 5, :line 943, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 945, :column 4, :line 945, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 945, :column 5, :line 945, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 945, :column 10, :line 945, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 942, :column 7, :line 942, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 943, :column 5, :line 943, :file "cljs/core.cljs"} prim] [^{:end-column 10, :end-line 945, :column 5, :line 945, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 945, :column 10, :line 945, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 943, :column 4, :line 943, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 943, :column 5, :line 943, :file "cljs/core.cljs"} prim] ^{:end-column 12, :end-line 945, :column 4, :line 945, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 945, :column 5, :line 945, :file "cljs/core.cljs"} prim ^{:end-column 12, :end-line 945, :column 10, :line 945, :file "cljs/core.cljs"} i]), :end-column 16, :end-line 942, :column 7, :line 942, :file "cljs/core.cljs"} prim-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level* ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 38, :column 1, :line 38, :file "cljs/core.cljs"} *print-level*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1617, :column 3, :line 1617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1617, :column 4, :line 1617, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1615, :column 7, :line 1615, :file "cljs/core.cljs"} shuffle ^{:arglists (^{:end-column 9, :end-line 1617, :column 3, :line 1617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1617, :column 4, :line 1617, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1615, :column 7, :line 1615, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1617, :column 4, :line 1617, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1617, :column 3, :line 1617, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1617, :column 4, :line 1617, :file "cljs/core.cljs"} coll]), :doc "Return a random permutation of coll", :end-column 15, :end-line 1615, :column 7, :line 1615, :file "cljs/core.cljs"} shuffle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 33, :end-line 1400, :column 22, :line 1400, :file "cljs/core.cljs"} ChunkedSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 4251, :column 10, :line 4251, :file "cljs/core.cljs"} ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 59, :end-line 4251, :column 21, :line 4251, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4251, :column 22, :line 4251, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4251, :column 26, :line 4251, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4251, :column 31, :line 4251, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4251, :column 33, :line 4251, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4251, :column 37, :line 4251, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4251, :column 52, :line 4251, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 23, :end-line 2337, :column 20, :line 2337, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2337, :column 21, :line 2337, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2337, :column 7, :line 2337, :file "cljs/core.cljs"} hash-keyword ^{:arglists (^{:end-column 23, :end-line 2337, :column 20, :line 2337, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2337, :column 21, :line 2337, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2337, :column 7, :line 2337, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 2337, :column 21, :line 2337, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2337, :column 20, :line 2337, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2337, :column 21, :line 2337, :file "cljs/core.cljs"} k]), :end-column 20, :end-line 2337, :column 7, :line 2337, :file "cljs/core.cljs"} hash-keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 1490, :column 3, :line 1490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1490, :column 4, :line 1490, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1490, :column 9, :line 1490, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} find ^{:arglists (^{:end-column 11, :end-line 1490, :column 3, :line 1490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1490, :column 4, :line 1490, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1490, :column 9, :line 1490, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1490, :column 4, :line 1490, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1490, :column 9, :line 1490, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1490, :column 3, :line 1490, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1490, :column 4, :line 1490, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 1490, :column 9, :line 1490, :file "cljs/core.cljs"} k]), :doc "Returns the map entry for key, or nil if key not present.", :end-column 12, :end-line 1488, :column 7, :line 1488, :file "cljs/core.cljs"} find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} alength ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 190, :column 3, :line 190, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 190, :column 4, :line 190, :file "cljs/core.cljs"} array]), :doc "Returns the length of the array. Works on arrays of all types.", :tag ^{:end-column 15, :end-line 188, :column 8, :line 188, :file "cljs/core.cljs"} number, :end-column 23, :end-line 188, :column 15, :line 188, :file "cljs/core.cljs"} alength, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1961, :column 3, :line 1961, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1961, :column 4, :line 1961, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1961, :column 6, :line 1961, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} bit-xor ^{:arglists (^{:end-column 8, :end-line 1961, :column 3, :line 1961, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1961, :column 4, :line 1961, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1961, :column 6, :line 1961, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1961, :column 4, :line 1961, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1961, :column 6, :line 1961, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1961, :column 3, :line 1961, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1961, :column 4, :line 1961, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1961, :column 6, :line 1961, :file "cljs/core.cljs"} y]), :doc "Bitwise exclusive or", :end-column 15, :end-line 1959, :column 7, :line 1959, :file "cljs/core.cljs"} bit-xor, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 874, :column 22, :line 874, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 874, :column 26, :line 874, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 874, :column 10, :line 874, :file "cljs/core.cljs"} ->IndexedSeq ^{:arglists ([^{:end-column 26, :end-line 874, :column 22, :line 874, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 874, :column 26, :line 874, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 874, :column 10, :line 874, :file "cljs/core.cljs"} {:arglists (^cljs.core/IndexedSeq [^{:end-column 26, :end-line 874, :column 22, :line 874, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 874, :column 26, :line 874, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 874, :column 22, :line 874, :file "cljs/core.cljs"} arr ^{:end-column 28, :end-line 874, :column 26, :line 874, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/ISequential cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IReduce}, :end-column 21, :end-line 874, :column 10, :line 874, :file "cljs/core.cljs"} ->IndexedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4800, :column 10, :line 4800, :file "cljs/core.cljs"} ObjMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4800, :column 10, :line 4800, :file "cljs/core.cljs"} ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 4800, :column 17, :line 4800, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4800, :column 18, :line 4800, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4800, :column 23, :line 4800, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4800, :column 28, :line 4800, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4800, :column 35, :line 4800, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4800, :column 58, :line 4800, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} unsigned-bit-shift-right ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2013, :column 3, :line 2013, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2013, :column 4, :line 2013, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2013, :column 6, :line 2013, :file "cljs/core.cljs"} n]), :doc "Bitwise shift right with zero fill", :end-column 32, :end-line 2011, :column 7, :line 2011, :file "cljs/core.cljs"} unsigned-bit-shift-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 32, :end-line 4937, :column 10, :line 4937, :file "cljs/core.cljs"} ES6SetEntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 32, :end-line 4937, :column 10, :line 4937, :file "cljs/core.cljs"} ES6SetEntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 4937, :column 32, :line 4937, :file "cljs/core.cljs"} [^{:mutable true, :end-column 45, :end-line 4937, :column 43, :line 4937, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 6, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2042, :column 8, :line 2042, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2042, :column 16, :line 2042, :file "cljs/core.cljs"} neg? ^{:arglists (^{:end-column 6, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2042, :column 8, :line 2042, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2042, :column 16, :line 2042, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2044, :column 3, :line 2044, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2044, :column 4, :line 2044, :file "cljs/core.cljs"} x]), :doc "Returns true if num is less than zero, else false", :tag ^{:end-column 16, :end-line 2042, :column 8, :line 2042, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2042, :column 16, :line 2042, :file "cljs/core.cljs"} neg?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} Cons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 49, :end-line 2279, :column 15, :line 2279, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2279, :column 16, :line 2279, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2279, :column 27, :line 2279, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2279, :column 42, :line 2279, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} -remove-method ^{:arglists (^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} -remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 2911, :column 22, :line 2911, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2911, :column 34, :line 2911, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2911, :column 10, :line 2911, :file "cljs/core.cljs"} ->StringIter ^{:arglists ([^{:end-column 24, :end-line 2911, :column 22, :line 2911, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2911, :column 34, :line 2911, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2911, :column 10, :line 2911, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringIter [^{:end-column 24, :end-line 2911, :column 22, :line 2911, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2911, :column 34, :line 2911, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 2911, :column 22, :line 2911, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2911, :column 34, :line 2911, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2911, :column 10, :line 2911, :file "cljs/core.cljs"} ->StringIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 2138, :column 16, :line 2138, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2138, :column 21, :line 2138, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2138, :column 27, :line 2138, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2138, :column 32, :line 2138, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2138, :column 48, :line 2138, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2138, :column 10, :line 2138, :file "cljs/core.cljs"} ->List ^{:arglists ([^{:end-column 21, :end-line 2138, :column 16, :line 2138, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2138, :column 21, :line 2138, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2138, :column 27, :line 2138, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2138, :column 32, :line 2138, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2138, :column 48, :line 2138, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2138, :column 10, :line 2138, :file "cljs/core.cljs"} {:arglists (^cljs.core/List [^{:end-column 21, :end-line 2138, :column 16, :line 2138, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2138, :column 21, :line 2138, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2138, :column 27, :line 2138, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2138, :column 32, :line 2138, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2138, :column 48, :line 2138, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 2138, :column 16, :line 2138, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2138, :column 21, :line 2138, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2138, :column 27, :line 2138, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2138, :column 32, :line 2138, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2138, :column 48, :line 2138, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2138, :column 10, :line 2138, :file "cljs/core.cljs"} ->List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 441, :column 25, :line 441, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 441, :column 26, :line 441, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 441, :column 8, :line 441, :file "cljs/core.cljs"} number, :end-column 25, :end-line 441, :column 15, :line 441, :file "cljs/core.cljs"} m3-mix-K1 ^{:arglists (^{:end-column 29, :end-line 441, :column 25, :line 441, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 441, :column 26, :line 441, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 441, :column 8, :line 441, :file "cljs/core.cljs"} number, :end-column 25, :end-line 441, :column 15, :line 441, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 29, :end-line 441, :column 26, :line 441, :file "cljs/core.cljs"} k1]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 441, :column 25, :line 441, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 441, :column 26, :line 441, :file "cljs/core.cljs"} k1]), :tag ^{:end-column 15, :end-line 441, :column 8, :line 441, :file "cljs/core.cljs"} number, :end-column 25, :end-line 441, :column 15, :line 441, :file "cljs/core.cljs"} m3-mix-K1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 1819, :column 31, :line 1819, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1819, :column 32, :line 1819, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1819, :column 8, :line 1819, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1819, :column 15, :line 1819, :file "cljs/core.cljs"} unchecked-float ^{:arglists (^{:end-column 34, :end-line 1819, :column 31, :line 1819, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1819, :column 32, :line 1819, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1819, :column 8, :line 1819, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1819, :column 15, :line 1819, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1819, :column 32, :line 1819, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1819, :column 31, :line 1819, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1819, :column 32, :line 1819, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1819, :column 8, :line 1819, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1819, :column 15, :line 1819, :file "cljs/core.cljs"} unchecked-float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 1448, :column 27, :line 1448, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1448, :column 28, :line 1448, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} undefined? ^{:arglists (^{:end-column 30, :end-line 1448, :column 27, :line 1448, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1448, :column 28, :line 1448, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 30, :end-line 1448, :column 28, :line 1448, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 1448, :column 27, :line 1448, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 1448, :column 28, :line 1448, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1448, :column 8, :line 1448, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 1448, :column 16, :line 1448, :file "cljs/core.cljs"} undefined?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} IMeta ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/MetaFn cljs.core/RSeq ^{:end-column 23, :end-line 754, :column 14, :line 754, :file "cljs/core.cljs"} function cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} -meta [^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 290, :column 14, :line 290, :file "cljs/core.cljs"} IMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 782, :column 3, :line 782, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 782, :column 4, :line 782, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 780, :column 8, :line 780, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 780, :column 16, :line 780, :file "cljs/core.cljs"} reduced? ^{:arglists (^{:end-column 6, :end-line 782, :column 3, :line 782, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 782, :column 4, :line 782, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 780, :column 8, :line 780, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 780, :column 16, :line 780, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 782, :column 4, :line 782, :file "cljs/core.cljs"} r]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 782, :column 3, :line 782, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 782, :column 4, :line 782, :file "cljs/core.cljs"} r]), :doc "Returns true if x is the result of a call to reduced", :tag ^{:end-column 16, :end-line 780, :column 8, :line 780, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 780, :column 16, :line 780, :file "cljs/core.cljs"} reduced?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to ^{:file "cljs/core.cljs", :arglists ([f argc args])} {:arglists ([f argc args]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([f argc args])} apply-to, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2813, :column 4, :line 2813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2813, :column 5, :line 2813, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2813, :column 11, :line 2813, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2815, :column 4, :line 2815, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2815, :column 5, :line 2815, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2815, :column 11, :line 2815, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2815, :column 15, :line 2815, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2815, :column 17, :line 2815, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2810, :column 7, :line 2810, :file "cljs/core.cljs"} disj! ^{:arglists (^{:end-column 15, :end-line 2813, :column 4, :line 2813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2813, :column 5, :line 2813, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2813, :column 11, :line 2813, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2815, :column 4, :line 2815, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2815, :column 5, :line 2815, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2815, :column 11, :line 2815, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2815, :column 15, :line 2815, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2815, :column 17, :line 2815, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2810, :column 7, :line 2810, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2813, :column 5, :line 2813, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2813, :column 11, :line 2813, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2815, :column 5, :line 2815, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2815, :column 11, :line 2815, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2815, :column 17, :line 2815, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2813, :column 4, :line 2813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2813, :column 5, :line 2813, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2813, :column 11, :line 2813, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2815, :column 4, :line 2815, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2815, :column 5, :line 2815, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2815, :column 11, :line 2815, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2815, :column 15, :line 2815, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2815, :column 17, :line 2815, :file "cljs/core.cljs"} vals]), :doc "disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).", :end-column 13, :end-line 2810, :column 7, :line 2810, :file "cljs/core.cljs"} disj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} -lookup ^{:arglists (^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 259, :column 12, :line 259, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 259, :column 13, :line 259, :file "cljs/core.cljs"} o ^{:end-column 17, :end-line 259, :column 15, :line 259, :file "cljs/core.cljs"} k] ^{:end-column 33, :end-line 259, :column 18, :line 259, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 259, :column 19, :line 259, :file "cljs/core.cljs"} o ^{:end-column 23, :end-line 259, :column 21, :line 259, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 259, :column 23, :line 259, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/ILookup, :end-column 12, :end-line 259, :column 4, :line 259, :file "cljs/core.cljs"} -lookup, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 25, :end-line 231, :column 14, :line 231, :file "cljs/core.cljs"} ICloneable ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/PersistentQueue cljs.core/Subvec cljs.core/PersistentVector cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 25, :end-line 231, :column 14, :line 231, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 232, :column 9, :line 232, :file "cljs/core.cljs"} -clone [^{:end-column 23, :end-line 232, :column 16, :line 232, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 232, :column 17, :line 232, :file "cljs/core.cljs"} value]]}}, :protocol-symbol true, :end-column 25, :end-line 231, :column 14, :line 231, :file "cljs/core.cljs"} ICloneable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 29, :end-line 8358, :column 14, :line 8358, :file "cljs/core.cljs"} IEncodeClojure ^{:protocol-info {:methods {^{:end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 29, :end-line 8358, :column 14, :line 8358, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 13, :end-line 8359, :column 4, :line 8359, :file "cljs/core.cljs"} -js->clj [^{:end-column 24, :end-line 8359, :column 13, :line 8359, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8359, :column 14, :line 8359, :file "cljs/core.cljs"} x ^{:end-column 24, :end-line 8359, :column 16, :line 8359, :file "cljs/core.cljs"} options]]}}, :protocol-symbol true, :end-column 29, :end-line 8358, :column 14, :line 8358, :file "cljs/core.cljs"} IEncodeClojure, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1919, :column 16, :line 1919, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1919, :column 17, :line 1919, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} booleans ^{:arglists (^{:end-column 19, :end-line 1919, :column 16, :line 1919, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1919, :column 17, :line 1919, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 1919, :column 17, :line 1919, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1919, :column 16, :line 1919, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1919, :column 17, :line 1919, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1919, :column 7, :line 1919, :file "cljs/core.cljs"} booleans, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 4970, :column 35, :line 4970, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4970, :column 36, :line 4970, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4970, :column 40, :line 4970, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4970, :column 42, :line 4970, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4970, :column 8, :line 4970, :file "cljs/core.cljs"} array-map-index-of-symbol? ^{:arglists (^{:end-column 44, :end-line 4970, :column 35, :line 4970, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4970, :column 36, :line 4970, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4970, :column 40, :line 4970, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4970, :column 42, :line 4970, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4970, :column 8, :line 4970, :file "cljs/core.cljs"} {:arglists ([^{:end-column 40, :end-line 4970, :column 36, :line 4970, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4970, :column 40, :line 4970, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4970, :column 42, :line 4970, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 4970, :column 35, :line 4970, :file "cljs/core.cljs"} [^{:end-column 40, :end-line 4970, :column 36, :line 4970, :file "cljs/core.cljs"} arr ^{:end-column 42, :end-line 4970, :column 40, :line 4970, :file "cljs/core.cljs"} m ^{:end-column 44, :end-line 4970, :column 42, :line 4970, :file "cljs/core.cljs"} k]), :private true, :end-column 35, :end-line 4970, :column 8, :line 4970, :file "cljs/core.cljs"} array-map-index-of-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 35, :end-line 7418, :column 31, :line 7418, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7418, :column 10, :line 7418, :file "cljs/core.cljs"} ->ArrayList ^{:arglists ([^{:mutable true, :end-column 35, :end-line 7418, :column 31, :line 7418, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7418, :column 10, :line 7418, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayList [^{:mutable true, :end-column 35, :end-line 7418, :column 31, :line 7418, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 35, :end-line 7418, :column 31, :line 7418, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7418, :column 10, :line 7418, :file "cljs/core.cljs"} ->ArrayList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 30, :end-line 855, :column 25, :line 855, :file "cljs/core.cljs"} RSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 957, :column 10, :line 957, :file "cljs/core.cljs"} RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 957, :column 15, :line 957, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 957, :column 16, :line 957, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 957, :column 19, :line 957, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 957, :column 21, :line 957, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 5361, :column 13, :line 5361, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5361, :column 14, :line 5361, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5361, :column 19, :line 5361, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5361, :column 8, :line 5361, :file "cljs/core.cljs"} mask ^{:arglists (^{:end-column 25, :end-line 5361, :column 13, :line 5361, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5361, :column 14, :line 5361, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5361, :column 19, :line 5361, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5361, :column 8, :line 5361, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 19, :end-line 5361, :column 14, :line 5361, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5361, :column 19, :line 5361, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 5361, :column 13, :line 5361, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 5361, :column 14, :line 5361, :file "cljs/core.cljs"} hash ^{:end-column 25, :end-line 5361, :column 19, :line 5361, :file "cljs/core.cljs"} shift]), :private true, :end-column 13, :end-line 5361, :column 8, :line 5361, :file "cljs/core.cljs"} mask, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2624, :column 4, :line 2624, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2624, :column 5, :line 2624, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2628, :column 4, :line 2628, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2628, :column 5, :line 2628, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2628, :column 10, :line 2628, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2623, :column 7, :line 2623, :file "cljs/core.cljs"} int-array ^{:arglists (^{:end-column 17, :end-line 2624, :column 4, :line 2624, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2624, :column 5, :line 2624, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2628, :column 4, :line 2628, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2628, :column 5, :line 2628, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2628, :column 10, :line 2628, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2623, :column 7, :line 2623, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2624, :column 5, :line 2624, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 10, :end-line 2628, :column 5, :line 2628, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2628, :column 10, :line 2628, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2624, :column 4, :line 2624, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2624, :column 5, :line 2624, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2628, :column 4, :line 2628, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2628, :column 5, :line 2628, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2628, :column 10, :line 2628, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 17, :end-line 2623, :column 7, :line 2623, :file "cljs/core.cljs"} int-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 88, :end-line 8595, :column 3, :line 8595, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8595, :column 4, :line 8595, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8595, :column 9, :line 8595, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8595, :column 22, :line 8595, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8595, :column 32, :line 8595, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8595, :column 45, :line 8595, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8595, :column 58, :line 8595, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8595, :column 71, :line 8595, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8594, :column 8, :line 8594, :file "cljs/core.cljs"} find-and-cache-best-method ^{:arglists (^{:end-column 88, :end-line 8595, :column 3, :line 8595, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8595, :column 4, :line 8595, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8595, :column 9, :line 8595, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8595, :column 22, :line 8595, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8595, :column 32, :line 8595, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8595, :column 45, :line 8595, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8595, :column 58, :line 8595, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8595, :column 71, :line 8595, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8594, :column 8, :line 8594, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8595, :column 4, :line 8595, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8595, :column 9, :line 8595, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8595, :column 22, :line 8595, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8595, :column 32, :line 8595, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8595, :column 45, :line 8595, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8595, :column 58, :line 8595, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8595, :column 71, :line 8595, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists (^{:end-column 88, :end-line 8595, :column 3, :line 8595, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8595, :column 4, :line 8595, :file "cljs/core.cljs"} name ^{:end-column 22, :end-line 8595, :column 9, :line 8595, :file "cljs/core.cljs"} dispatch-val ^{:end-column 32, :end-line 8595, :column 22, :line 8595, :file "cljs/core.cljs"} hierarchy ^{:end-column 45, :end-line 8595, :column 32, :line 8595, :file "cljs/core.cljs"} method-table ^{:end-column 58, :end-line 8595, :column 45, :line 8595, :file "cljs/core.cljs"} prefer-table ^{:end-column 71, :end-line 8595, :column 58, :line 8595, :file "cljs/core.cljs"} method-cache ^{:end-column 88, :end-line 8595, :column 71, :line 8595, :file "cljs/core.cljs"} cached-hierarchy]), :private true, :end-column 35, :end-line 8594, :column 8, :line 8594, :file "cljs/core.cljs"} find-and-cache-best-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1368, :column 3, :line 1368, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1366, :column 8, :line 1366, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1366, :column 16, :line 1366, :file "cljs/core.cljs"} set? ^{:arglists (^{:end-column 6, :end-line 1368, :column 3, :line 1368, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1366, :column 8, :line 1366, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1366, :column 16, :line 1366, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1368, :column 3, :line 1368, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1368, :column 4, :line 1368, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ISet", :tag ^{:end-column 16, :end-line 1366, :column 8, :line 1366, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1366, :column 16, :line 1366, :file "cljs/core.cljs"} set?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 611, :column 17, :line 611, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 611, :column 18, :line 611, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 611, :column 7, :line 611, :file "cljs/core.cljs"} iterable? ^{:arglists (^{:end-column 20, :end-line 611, :column 17, :line 611, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 611, :column 18, :line 611, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 611, :column 7, :line 611, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 20, :end-line 611, :column 18, :line 611, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 611, :column 17, :line 611, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 611, :column 18, :line 611, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 611, :column 7, :line 611, :file "cljs/core.cljs"} iterable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 3727, :column 10, :line 3727, :file "cljs/core.cljs"} cat ^{:arglists (^{:end-column 7, :end-line 8261, :column 3, :line 8261, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8261, :column 4, :line 8261, :file "cljs/core.cljs"} rf]), :added "1.7", :doc "A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.", :end-column 11, :end-line 8257, :column 7, :line 8257, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 8261, :column 4, :line 8261, :file "cljs/core.cljs"} rf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8261, :column 3, :line 8261, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8261, :column 4, :line 8261, :file "cljs/core.cljs"} rf]), :added "1.7", :doc "A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.", :end-column 11, :end-line 8257, :column 7, :line 8257, :file "cljs/core.cljs"} cat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 42, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4924, :column 10, :line 4924, :file "cljs/core.cljs"} ->ES6EntriesIterator ^{:arglists ([^{:mutable true, :end-column 42, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4924, :column 10, :line 4924, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6EntriesIterator [^{:mutable true, :end-column 42, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 42, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} s]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4924, :column 10, :line 4924, :file "cljs/core.cljs"} ->ES6EntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 1727, :column 10, :line 1727, :file "cljs/core.cljs"} divide ^{:declared true, :end-column 17, :end-line 1727, :column 10, :line 1727, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 17, :end-line 1727, :column 10, :line 1727, :file "cljs/core.cljs"} divide, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} -pr-writer ^{:arglists (^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 339, :column 15, :line 339, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 339, :column 16, :line 339, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 339, :column 18, :line 339, :file "cljs/core.cljs"} writer ^{:end-column 30, :end-line 339, :column 25, :line 339, :file "cljs/core.cljs"} opts]), :protocol cljs.core/IPrintWithWriter, :end-column 15, :end-line 339, :column 4, :line 339, :file "cljs/core.cljs"} -pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7851, :column 13, :line 7851, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} flush ^{:arglists (^{:end-column 15, :end-line 7851, :column 13, :line 7851, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7851, :column 13, :line 7851, :file "cljs/core.cljs"} []), :end-column 13, :end-line 7851, :column 7, :line 7851, :file "cljs/core.cljs"} flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 7307, :column 28, :line 7307, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7307, :column 29, :line 7307, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} set-from-indexed-seq ^{:arglists (^{:end-column 34, :end-line 7307, :column 28, :line 7307, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7307, :column 29, :line 7307, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 34, :end-line 7307, :column 29, :line 7307, :file "cljs/core.cljs"} iseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 7307, :column 28, :line 7307, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7307, :column 29, :line 7307, :file "cljs/core.cljs"} iseq]), :end-column 28, :end-line 7307, :column 7, :line 7307, :file "cljs/core.cljs"} set-from-indexed-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7464, :column 4, :line 7464, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7464, :column 5, :line 7464, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7473, :column 4, :line 7473, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7473, :column 5, :line 7473, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7473, :column 10, :line 7473, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} take-while ^{:arglists (^{:end-column 10, :end-line 7464, :column 4, :line 7464, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7464, :column 5, :line 7464, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7473, :column 4, :line 7473, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7473, :column 5, :line 7473, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7473, :column 10, :line 7473, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 7464, :column 5, :line 7464, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 7473, :column 5, :line 7473, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7473, :column 10, :line 7473, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7464, :column 4, :line 7464, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7464, :column 5, :line 7464, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 7473, :column 4, :line 7473, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7473, :column 5, :line 7473, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 7473, :column 10, :line 7473, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 18, :end-line 7460, :column 7, :line 7460, :file "cljs/core.cljs"} take-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2880, :column 4, :line 2880, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2880, :column 5, :line 2880, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2880, :column 9, :line 2880, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2882, :column 4, :line 2882, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2882, :column 5, :line 2882, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2882, :column 9, :line 2882, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2882, :column 11, :line 2882, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 5, :line 2884, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2884, :column 9, :line 2884, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2884, :column 11, :line 2884, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2884, :column 13, :line 2884, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2886, :column 4, :line 2886, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2886, :column 5, :line 2886, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2886, :column 9, :line 2886, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2886, :column 11, :line 2886, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2886, :column 13, :line 2886, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2886, :column 15, :line 2886, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2888, :column 4, :line 2888, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2888, :column 5, :line 2888, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2888, :column 9, :line 2888, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2888, :column 11, :line 2888, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2888, :column 13, :line 2888, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2888, :column 15, :line 2888, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2888, :column 17, :line 2888, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2890, :column 9, :line 2890, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2890, :column 13, :line 2890, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2890, :column 15, :line 2890, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2890, :column 17, :line 2890, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2890, :column 19, :line 2890, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2890, :column 21, :line 2890, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2877, :column 7, :line 2877, :file "cljs/core.cljs"} vary-meta ^{:arglists (^{:end-column 11, :end-line 2880, :column 4, :line 2880, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2880, :column 5, :line 2880, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2880, :column 9, :line 2880, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2882, :column 4, :line 2882, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2882, :column 5, :line 2882, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2882, :column 9, :line 2882, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2882, :column 11, :line 2882, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 5, :line 2884, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2884, :column 9, :line 2884, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2884, :column 11, :line 2884, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2884, :column 13, :line 2884, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2886, :column 4, :line 2886, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2886, :column 5, :line 2886, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2886, :column 9, :line 2886, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2886, :column 11, :line 2886, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2886, :column 13, :line 2886, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2886, :column 15, :line 2886, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2888, :column 4, :line 2888, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2888, :column 5, :line 2888, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2888, :column 9, :line 2888, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2888, :column 11, :line 2888, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2888, :column 13, :line 2888, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2888, :column 15, :line 2888, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2888, :column 17, :line 2888, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2890, :column 9, :line 2890, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2890, :column 13, :line 2890, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2890, :column 15, :line 2890, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2890, :column 17, :line 2890, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2890, :column 19, :line 2890, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2890, :column 21, :line 2890, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2877, :column 7, :line 2877, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2880, :column 5, :line 2880, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2880, :column 9, :line 2880, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 2882, :column 5, :line 2882, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2882, :column 9, :line 2882, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2882, :column 11, :line 2882, :file "cljs/core.cljs"} a] [^{:end-column 9, :end-line 2884, :column 5, :line 2884, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2884, :column 9, :line 2884, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2884, :column 11, :line 2884, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2884, :column 13, :line 2884, :file "cljs/core.cljs"} b] [^{:end-column 9, :end-line 2886, :column 5, :line 2886, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2886, :column 9, :line 2886, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2886, :column 11, :line 2886, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2886, :column 13, :line 2886, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2886, :column 15, :line 2886, :file "cljs/core.cljs"} c] [^{:end-column 9, :end-line 2888, :column 5, :line 2888, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2888, :column 9, :line 2888, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2888, :column 11, :line 2888, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2888, :column 13, :line 2888, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2888, :column 15, :line 2888, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2888, :column 17, :line 2888, :file "cljs/core.cljs"} d] [^{:end-column 9, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2890, :column 9, :line 2890, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2890, :column 13, :line 2890, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2890, :column 15, :line 2890, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2890, :column 17, :line 2890, :file "cljs/core.cljs"} d & ^{:end-column 26, :end-line 2890, :column 21, :line 2890, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2880, :column 4, :line 2880, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2880, :column 5, :line 2880, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2880, :column 9, :line 2880, :file "cljs/core.cljs"} f] ^{:end-column 13, :end-line 2882, :column 4, :line 2882, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2882, :column 5, :line 2882, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2882, :column 9, :line 2882, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2882, :column 11, :line 2882, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 2884, :column 4, :line 2884, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2884, :column 5, :line 2884, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2884, :column 9, :line 2884, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2884, :column 11, :line 2884, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2884, :column 13, :line 2884, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 2886, :column 4, :line 2886, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2886, :column 5, :line 2886, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2886, :column 9, :line 2886, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2886, :column 11, :line 2886, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2886, :column 13, :line 2886, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2886, :column 15, :line 2886, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 2888, :column 4, :line 2888, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2888, :column 5, :line 2888, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2888, :column 9, :line 2888, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2888, :column 11, :line 2888, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2888, :column 13, :line 2888, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2888, :column 15, :line 2888, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2888, :column 17, :line 2888, :file "cljs/core.cljs"} d] ^{:end-column 26, :end-line 2890, :column 4, :line 2890, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2890, :column 5, :line 2890, :file "cljs/core.cljs"} obj ^{:end-column 11, :end-line 2890, :column 9, :line 2890, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 2890, :column 11, :line 2890, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 2890, :column 13, :line 2890, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 2890, :column 15, :line 2890, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 2890, :column 17, :line 2890, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 2890, :column 19, :line 2890, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 2890, :column 21, :line 2890, :file "cljs/core.cljs"} args]), :doc "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.", :end-column 17, :end-line 2877, :column 7, :line 2877, :file "cljs/core.cljs"} vary-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 255, :column 14, :line 255, :file "cljs/core.cljs"} INext ^{:impls (cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentArrayMapSeq cljs.core/ChunkedSeq cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 255, :column 14, :line 255, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} -next [^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 20, :end-line 255, :column 14, :line 255, :file "cljs/core.cljs"} INext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_ ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 122, :column 3, :line 122, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 122, :column 4, :line 122, :file "cljs/core.cljs"} x]), :end-column 17, :end-line 121, :column 7, :line 121, :file "cljs/core.cljs"} is_proto_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 19, :end-line 2936, :column 1, :line 2936, :file "cljs/core.cljs"} START ^{:end-column 19, :end-line 2936, :column 1, :line 2936, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 19, :end-line 2936, :column 1, :line 2936, :file "cljs/core.cljs"} START, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 234, :column 14, :line 234, :file "cljs/core.cljs"} ICounted ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/TransientHashMap cljs.core/PersistentHashMap cljs.core/TransientArrayMap cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/ChunkBuffer cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq nil), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 234, :column 14, :line 234, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 235, :column 5, :line 235, :file "cljs/core.cljs"} number, :end-column 19, :end-line 235, :column 12, :line 235, :file "cljs/core.cljs"} -count [^{:end-column 25, :end-line 235, :column 19, :line 235, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 235, :column 20, :line 235, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 23, :end-line 234, :column 14, :line 234, :file "cljs/core.cljs"} ICounted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]], ^{:end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 270, :column 14, :line 270, :file "cljs/core.cljs"} IMapEntry ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentVector), :protocol-info {:methods {^{:end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]], ^{:end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 270, :column 14, :line 270, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -key [^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]], ^{:end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} -val [^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 24, :end-line 270, :column 14, :line 270, :file "cljs/core.cljs"} IMapEntry, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1753, :column 4, :line 1753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1753, :column 5, :line 1753, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1753, :column 7, :line 1753, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1753, :column 9, :line 1753, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1753, :column 11, :line 1753, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1748, :column 8, :line 1748, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1748, :column 16, :line 1748, :file "cljs/core.cljs"} <= ^{:arglists (^{:end-column 7, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1753, :column 4, :line 1753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1753, :column 5, :line 1753, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1753, :column 7, :line 1753, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1753, :column 9, :line 1753, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1753, :column 11, :line 1753, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1748, :column 8, :line 1748, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1748, :column 16, :line 1748, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1753, :column 5, :line 1753, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1753, :column 7, :line 1753, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1753, :column 11, :line 1753, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1751, :column 4, :line 1751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1751, :column 5, :line 1751, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1752, :column 4, :line 1752, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1752, :column 5, :line 1752, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1752, :column 7, :line 1752, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1753, :column 4, :line 1753, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1753, :column 5, :line 1753, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1753, :column 7, :line 1753, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1753, :column 9, :line 1753, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1753, :column 11, :line 1753, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1748, :column 8, :line 1748, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1748, :column 16, :line 1748, :file "cljs/core.cljs"} <=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2772, :column 4, :line 2772, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2773, :column 4, :line 2773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2773, :column 5, :line 2773, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2774, :column 4, :line 2774, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2774, :column 5, :line 2774, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2774, :column 11, :line 2774, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2776, :column 4, :line 2776, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2776, :column 5, :line 2776, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2776, :column 11, :line 2776, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2776, :column 15, :line 2776, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2776, :column 17, :line 2776, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2769, :column 7, :line 2769, :file "cljs/core.cljs"} conj! ^{:arglists (^{:end-column 6, :end-line 2772, :column 4, :line 2772, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2773, :column 4, :line 2773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2773, :column 5, :line 2773, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2774, :column 4, :line 2774, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2774, :column 5, :line 2774, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2774, :column 11, :line 2774, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2776, :column 4, :line 2776, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2776, :column 5, :line 2776, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2776, :column 11, :line 2776, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2776, :column 15, :line 2776, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2776, :column 17, :line 2776, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2769, :column 7, :line 2769, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj [] [^{:end-column 10, :end-line 2773, :column 5, :line 2773, :file "cljs/core.cljs"} coll] ^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2774, :column 5, :line 2774, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2774, :column 11, :line 2774, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2776, :column 5, :line 2776, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2776, :column 11, :line 2776, :file "cljs/core.cljs"} val & ^{:end-column 22, :end-line 2776, :column 17, :line 2776, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2772, :column 4, :line 2772, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 2773, :column 4, :line 2773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2773, :column 5, :line 2773, :file "cljs/core.cljs"} coll] ^{:end-column 15, :end-line 2774, :column 4, :line 2774, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2774, :column 5, :line 2774, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2774, :column 11, :line 2774, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 2776, :column 4, :line 2776, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2776, :column 5, :line 2776, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2776, :column 11, :line 2776, :file "cljs/core.cljs"} val ^{:end-column 17, :end-line 2776, :column 15, :line 2776, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2776, :column 17, :line 2776, :file "cljs/core.cljs"} vals]), :doc "Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.", :end-column 13, :end-line 2769, :column 7, :line 2769, :file "cljs/core.cljs"} conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -pop ^{:arglists (^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3687, :column 4, :line 3687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3687, :column 5, :line 3687, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3688, :column 4, :line 3688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3688, :column 5, :line 3688, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3688, :column 7, :line 3688, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3683, :column 7, :line 3683, :file "cljs/core.cljs"} repeatedly ^{:arglists (^{:end-column 7, :end-line 3687, :column 4, :line 3687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3687, :column 5, :line 3687, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3688, :column 4, :line 3688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3688, :column 5, :line 3688, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3688, :column 7, :line 3688, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3683, :column 7, :line 3683, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3687, :column 5, :line 3687, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3688, :column 5, :line 3688, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3688, :column 7, :line 3688, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3687, :column 4, :line 3687, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3687, :column 5, :line 3687, :file "cljs/core.cljs"} f] ^{:end-column 9, :end-line 3688, :column 4, :line 3688, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3688, :column 5, :line 3688, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3688, :column 7, :line 3688, :file "cljs/core.cljs"} f]), :doc "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it", :end-column 18, :end-line 3683, :column 7, :line 3683, :file "cljs/core.cljs"} repeatedly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7394, :column 3, :line 7394, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7394, :column 4, :line 7394, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7394, :column 9, :line 7394, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7392, :column 7, :line 7392, :file "cljs/core.cljs"} zipmap ^{:arglists (^{:end-column 14, :end-line 7394, :column 3, :line 7394, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7394, :column 4, :line 7394, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7394, :column 9, :line 7394, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7392, :column 7, :line 7392, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 7394, :column 4, :line 7394, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7394, :column 9, :line 7394, :file "cljs/core.cljs"} vals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7394, :column 3, :line 7394, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7394, :column 4, :line 7394, :file "cljs/core.cljs"} keys ^{:end-column 14, :end-line 7394, :column 9, :line 7394, :file "cljs/core.cljs"} vals]), :doc "Returns a map with the keys mapped to the corresponding vals.", :end-column 14, :end-line 7392, :column 7, :line 7392, :file "cljs/core.cljs"} zipmap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} IStack ^{:impls (cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentQueue cljs.core/Subvec cljs.core/PersistentVector cljs.core/EmptyList cljs.core/List), :protocol-info {:methods {^{:end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} -peek [^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 279, :column 5, :line 279, :file "cljs/core.cljs"} clj, :end-column 14, :end-line 279, :column 9, :line 279, :file "cljs/core.cljs"} -pop [^{:end-column 20, :end-line 279, :column 14, :line 279, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 279, :column 15, :line 279, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 21, :end-line 277, :column 14, :line 277, :file "cljs/core.cljs"} IStack, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} -remove-watch ^{:arglists (^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]), :protocol cljs.core/IWatchable, :end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} -remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3772, :column 5, :line 3772, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3773, :column 4, :line 3773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3773, :column 5, :line 3773, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3773, :column 10, :line 3773, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3768, :column 7, :line 3768, :file "cljs/core.cljs"} remove ^{:arglists (^{:end-column 10, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3772, :column 5, :line 3772, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3773, :column 4, :line 3773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3773, :column 5, :line 3773, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3773, :column 10, :line 3773, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3768, :column 7, :line 3768, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3772, :column 5, :line 3772, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3773, :column 5, :line 3773, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3773, :column 10, :line 3773, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3772, :column 4, :line 3772, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3772, :column 5, :line 3772, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3773, :column 4, :line 3773, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3773, :column 5, :line 3773, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3773, :column 10, :line 3773, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3768, :column 7, :line 3768, :file "cljs/core.cljs"} remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 34, :end-line 5414, :column 29, :line 5414, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5414, :column 44, :line 5414, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5414, :column 61, :line 5414, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5414, :column 10, :line 5414, :file "cljs/core.cljs"} ->BitmapIndexedNode ^{:arglists ([^{:end-column 34, :end-line 5414, :column 29, :line 5414, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5414, :column 44, :line 5414, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5414, :column 61, :line 5414, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5414, :column 10, :line 5414, :file "cljs/core.cljs"} {:arglists (^cljs.core/BitmapIndexedNode [^{:end-column 34, :end-line 5414, :column 29, :line 5414, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5414, :column 44, :line 5414, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5414, :column 61, :line 5414, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 5414, :column 29, :line 5414, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5414, :column 44, :line 5414, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5414, :column 61, :line 5414, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5414, :column 10, :line 5414, :file "cljs/core.cljs"} ->BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1722, :column 4, :line 1722, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1723, :column 4, :line 1723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1723, :column 5, :line 1723, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1724, :column 4, :line 1724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1724, :column 5, :line 1724, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1725, :column 4, :line 1725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1725, :column 5, :line 1725, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1725, :column 7, :line 1725, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1725, :column 9, :line 1725, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1725, :column 11, :line 1725, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1720, :column 8, :line 1720, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} * ^{:arglists (^{:end-column 6, :end-line 1722, :column 4, :line 1722, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1723, :column 4, :line 1723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1723, :column 5, :line 1723, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1724, :column 4, :line 1724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1724, :column 5, :line 1724, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1725, :column 4, :line 1725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1725, :column 5, :line 1725, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1725, :column 7, :line 1725, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1725, :column 9, :line 1725, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1725, :column 11, :line 1725, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1720, :column 8, :line 1720, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1723, :column 5, :line 1723, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1724, :column 5, :line 1724, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1725, :column 5, :line 1725, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1725, :column 7, :line 1725, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1725, :column 11, :line 1725, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1722, :column 4, :line 1722, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1723, :column 4, :line 1723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1723, :column 5, :line 1723, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1724, :column 4, :line 1724, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1724, :column 5, :line 1724, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1724, :column 7, :line 1724, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1725, :column 4, :line 1725, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1725, :column 5, :line 1725, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1725, :column 7, :line 1725, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1725, :column 9, :line 1725, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1725, :column 11, :line 1725, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1720, :column 8, :line 1720, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1720, :column 15, :line 1720, :file "cljs/core.cljs"} *, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7816, :column 3, :line 7816, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7816, :column 4, :line 7816, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7814, :column 7, :line 7814, :file "cljs/core.cljs"} re-pattern ^{:arglists (^{:end-column 6, :end-line 7816, :column 3, :line 7816, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7816, :column 4, :line 7816, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7814, :column 7, :line 7814, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7816, :column 4, :line 7816, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7816, :column 3, :line 7816, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7816, :column 4, :line 7816, :file "cljs/core.cljs"} s]), :doc "Returns an instance of RegExp which has compiled the provided string.", :end-column 18, :end-line 7814, :column 7, :line 7814, :file "cljs/core.cljs"} re-pattern, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1797, :column 4, :line 1797, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1797, :column 5, :line 1797, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1798, :column 4, :line 1798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1798, :column 5, :line 1798, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1798, :column 7, :line 1798, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1799, :column 7, :line 1799, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1799, :column 9, :line 1799, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1799, :column 11, :line 1799, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} min ^{:arglists (^{:end-column 7, :end-line 1797, :column 4, :line 1797, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1797, :column 5, :line 1797, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1798, :column 4, :line 1798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1798, :column 5, :line 1798, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1798, :column 7, :line 1798, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1799, :column 7, :line 1799, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1799, :column 9, :line 1799, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1799, :column 11, :line 1799, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1797, :column 5, :line 1797, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1798, :column 5, :line 1798, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1798, :column 7, :line 1798, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1799, :column 7, :line 1799, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1799, :column 11, :line 1799, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1797, :column 4, :line 1797, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1797, :column 5, :line 1797, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1798, :column 4, :line 1798, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1798, :column 5, :line 1798, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1798, :column 7, :line 1798, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1799, :column 4, :line 1799, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1799, :column 5, :line 1799, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1799, :column 7, :line 1799, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1799, :column 9, :line 1799, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1799, :column 11, :line 1799, :file "cljs/core.cljs"} more]), :doc "Returns the least of the nums.", :tag ^{:end-column 15, :end-line 1795, :column 8, :line 1795, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1795, :column 15, :line 1795, :file "cljs/core.cljs"} min, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 4951, :column 32, :line 4951, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4951, :column 33, :line 4951, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4951, :column 37, :line 4951, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4951, :column 39, :line 4951, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4951, :column 8, :line 4951, :file "cljs/core.cljs"} array-map-index-of-nil? ^{:arglists (^{:end-column 41, :end-line 4951, :column 32, :line 4951, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4951, :column 33, :line 4951, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4951, :column 37, :line 4951, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4951, :column 39, :line 4951, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4951, :column 8, :line 4951, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 4951, :column 33, :line 4951, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4951, :column 37, :line 4951, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4951, :column 39, :line 4951, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 4951, :column 32, :line 4951, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 4951, :column 33, :line 4951, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 4951, :column 37, :line 4951, :file "cljs/core.cljs"} m ^{:end-column 41, :end-line 4951, :column 39, :line 4951, :file "cljs/core.cljs"} k]), :private true, :end-column 32, :end-line 4951, :column 8, :line 4951, :file "cljs/core.cljs"} array-map-index-of-nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} -persistent! ^{:arglists (^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} {:arglists ([^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} -persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -nth ^{:arglists (^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 247, :column 9, :line 247, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 247, :column 10, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 17, :end-line 247, :column 15, :line 247, :file "cljs/core.cljs"} n] ^{:end-column 36, :end-line 247, :column 18, :line 247, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 247, :column 19, :line 247, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 247, :column 24, :line 247, :file "cljs/core.cljs"} n ^{:end-column 36, :end-line 247, :column 26, :line 247, :file "cljs/core.cljs"} not-found]), :protocol cljs.core/IIndexed, :end-column 9, :end-line 247, :column 4, :line 247, :file "cljs/core.cljs"} -nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2807, :column 3, :line 2807, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2807, :column 4, :line 2807, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} pop! ^{:arglists (^{:end-column 10, :end-line 2807, :column 3, :line 2807, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2807, :column 4, :line 2807, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2807, :column 4, :line 2807, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2807, :column 3, :line 2807, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2807, :column 4, :line 2807, :file "cljs/core.cljs"} tcoll]), :doc "Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll", :end-column 12, :end-line 2804, :column 7, :line 2804, :file "cljs/core.cljs"} pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2583, :column 20, :line 2583, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2583, :column 21, :line 2583, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2583, :column 23, :line 2583, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} chunk-append ^{:arglists (^{:end-column 25, :end-line 2583, :column 20, :line 2583, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2583, :column 21, :line 2583, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2583, :column 23, :line 2583, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 2583, :column 21, :line 2583, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2583, :column 23, :line 2583, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2583, :column 20, :line 2583, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2583, :column 21, :line 2583, :file "cljs/core.cljs"} b ^{:end-column 25, :end-line 2583, :column 23, :line 2583, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 2583, :column 7, :line 2583, :file "cljs/core.cljs"} chunk-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7992, :column 3, :line 7992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7992, :column 4, :line 7992, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7992, :column 6, :line 7992, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7990, :column 7, :line 7990, :file "cljs/core.cljs"} prn-str ^{:arglists (^{:end-column 11, :end-line 7992, :column 3, :line 7992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7992, :column 4, :line 7992, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7992, :column 6, :line 7992, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7990, :column 7, :line 7990, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7992, :column 6, :line 7992, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7992, :column 3, :line 7992, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7992, :column 4, :line 7992, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7992, :column 6, :line 7992, :file "cljs/core.cljs"} objs]), :doc "Same as pr-str followed by (newline)", :end-column 15, :end-line 7990, :column 7, :line 7990, :file "cljs/core.cljs"} prn-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 320, :column 14, :line 320, :file "cljs/core.cljs"} IReversible ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentTreeMap cljs.core/Subvec cljs.core/PersistentVector cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 320, :column 14, :line 320, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} -rseq [^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 320, :column 14, :line 320, :file "cljs/core.cljs"} IReversible, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists ([meta8428]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} ->t8427 ^{:file "cljs/core.cljs", :arglists ([meta8428]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} {:arglists (^cljs.core/t8427 [meta8428]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists ([meta8428]), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} ->t8427, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 2251, :column 28, :line 2251, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2251, :column 29, :line 2251, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2251, :column 8, :line 2251, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} reversible? ^{:arglists (^{:end-column 34, :end-line 2251, :column 28, :line 2251, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2251, :column 29, :line 2251, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2251, :column 8, :line 2251, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 34, :end-line 2251, :column 29, :line 2251, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 2251, :column 28, :line 2251, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 2251, :column 29, :line 2251, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 16, :end-line 2251, :column 8, :line 2251, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 2251, :column 16, :line 2251, :file "cljs/core.cljs"} reversible?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} -realized? ^{:arglists (^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]), :protocol cljs.core/IPending, :tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} -realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -add-watch ^{:arglists (^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]), :protocol cljs.core/IWatchable, :end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} -deref-with-timeout ^{:arglists (^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]), :protocol cljs.core/IDerefWithTimeout, :end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} -deref-with-timeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1051, :column 4, :line 1051, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1052, :column 4, :line 1052, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1052, :column 5, :line 1052, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1053, :column 4, :line 1053, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1053, :column 5, :line 1053, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1053, :column 10, :line 1053, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1057, :column 5, :line 1057, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1057, :column 10, :line 1057, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1057, :column 12, :line 1057, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1057, :column 14, :line 1057, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1047, :column 7, :line 1047, :file "cljs/core.cljs"} conj ^{:arglists (^{:end-column 6, :end-line 1051, :column 4, :line 1051, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1052, :column 4, :line 1052, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1052, :column 5, :line 1052, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1053, :column 4, :line 1053, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1053, :column 5, :line 1053, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1053, :column 10, :line 1053, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1057, :column 5, :line 1057, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1057, :column 10, :line 1057, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1057, :column 12, :line 1057, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1057, :column 14, :line 1057, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1047, :column 7, :line 1047, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [] [^{:end-column 10, :end-line 1052, :column 5, :line 1052, :file "cljs/core.cljs"} coll] ^^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 1053, :column 5, :line 1053, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1053, :column 10, :line 1053, :file "cljs/core.cljs"} x] [^{:end-column 10, :end-line 1057, :column 5, :line 1057, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1057, :column 10, :line 1057, :file "cljs/core.cljs"} x & ^{:end-column 17, :end-line 1057, :column 14, :line 1057, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1051, :column 4, :line 1051, :file "cljs/core.cljs"} [] ^{:end-column 10, :end-line 1052, :column 4, :line 1052, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1052, :column 5, :line 1052, :file "cljs/core.cljs"} coll] ^{:end-column 12, :end-line 1053, :column 4, :line 1053, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1053, :column 5, :line 1053, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1053, :column 10, :line 1053, :file "cljs/core.cljs"} x] ^{:end-column 17, :end-line 1057, :column 4, :line 1057, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1057, :column 5, :line 1057, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1057, :column 10, :line 1057, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 1057, :column 12, :line 1057, :file "cljs/core.cljs"} & ^{:end-column 17, :end-line 1057, :column 14, :line 1057, :file "cljs/core.cljs"} xs]), :doc "conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.", :end-column 12, :end-line 1047, :column 7, :line 1047, :file "cljs/core.cljs"} conj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq ^{:arglists (^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]), :protocol cljs.core/ISorted, :tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3718, :column 3, :line 3718, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3718, :column 4, :line 3718, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3715, :column 8, :line 3715, :file "cljs/core.cljs"} flatten1 ^{:arglists (^{:end-column 10, :end-line 3718, :column 3, :line 3718, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3718, :column 4, :line 3718, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3715, :column 8, :line 3715, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 10, :end-line 3718, :column 4, :line 3718, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3718, :column 3, :line 3718, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3718, :column 4, :line 3718, :file "cljs/core.cljs"} colls]), :doc "Take a collection of collections, and return a lazy seq\n  of items from the inner collection", :private true, :end-column 17, :end-line 3715, :column 8, :line 3715, :file "cljs/core.cljs"} flatten1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1696, :column 4, :line 1696, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1696, :column 5, :line 1696, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1696, :column 11, :line 1696, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1696, :column 13, :line 1696, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1697, :column 5, :line 1697, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1697, :column 11, :line 1697, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1697, :column 13, :line 1697, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1697, :column 18, :line 1697, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1687, :column 7, :line 1687, :file "cljs/core.cljs"} transduce ^{:arglists (^{:end-column 18, :end-line 1696, :column 4, :line 1696, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1696, :column 5, :line 1696, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1696, :column 11, :line 1696, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1696, :column 13, :line 1696, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1697, :column 5, :line 1697, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1697, :column 11, :line 1697, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1697, :column 13, :line 1697, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1697, :column 18, :line 1697, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1687, :column 7, :line 1687, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 1696, :column 5, :line 1696, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1696, :column 11, :line 1696, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1696, :column 13, :line 1696, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 1697, :column 5, :line 1697, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1697, :column 11, :line 1697, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1697, :column 13, :line 1697, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1697, :column 18, :line 1697, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1696, :column 4, :line 1696, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1696, :column 5, :line 1696, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1696, :column 11, :line 1696, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1696, :column 13, :line 1696, :file "cljs/core.cljs"} coll] ^{:end-column 23, :end-line 1697, :column 4, :line 1697, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 1697, :column 5, :line 1697, :file "cljs/core.cljs"} xform ^{:end-column 13, :end-line 1697, :column 11, :line 1697, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 1697, :column 13, :line 1697, :file "cljs/core.cljs"} init ^{:end-column 23, :end-line 1697, :column 18, :line 1697, :file "cljs/core.cljs"} coll]), :doc "reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.", :end-column 17, :end-line 1687, :column 7, :line 1687, :file "cljs/core.cljs"} transduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8217, :column 1, :line 8217, :file "cljs/core.cljs"} fixture1 ^{:end-column 17, :end-line 8217, :column 1, :line 8217, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8217, :column 1, :line 8217, :file "cljs/core.cljs"} fixture1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} -swap! ^{:arglists (^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]), :protocol cljs.core/ISwap, :end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} -swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length* ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 37, :column 1, :line 37, :file "cljs/core.cljs"} *print-length*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 1417, :column 17, :line 1417, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1417, :column 18, :line 1417, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1417, :column 22, :line 1417, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1417, :column 7, :line 1417, :file "cljs/core.cljs"} js-delete ^{:arglists (^{:end-column 26, :end-line 1417, :column 17, :line 1417, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1417, :column 18, :line 1417, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1417, :column 22, :line 1417, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1417, :column 7, :line 1417, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 1417, :column 18, :line 1417, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1417, :column 22, :line 1417, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 1417, :column 17, :line 1417, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1417, :column 18, :line 1417, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 1417, :column 22, :line 1417, :file "cljs/core.cljs"} key]), :end-column 17, :end-line 1417, :column 7, :line 1417, :file "cljs/core.cljs"} js-delete, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_ ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 71, :column 3, :line 71, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 71, :column 4, :line 71, :file "cljs/core.cljs"} x]), :doc "Internal - do not use!", :end-column 14, :end-line 69, :column 7, :line 69, :file "cljs/core.cljs"} truth_, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 8631, :column 19, :line 8631, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8631, :column 24, :line 8631, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8631, :column 36, :line 8631, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8631, :column 57, :line 8631, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8632, :column 19, :line 8632, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8632, :column 32, :line 8632, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8632, :column 45, :line 8632, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8632, :column 58, :line 8632, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8631, :column 10, :line 8631, :file "cljs/core.cljs"} ->MultiFn ^{:arglists ([^{:end-column 24, :end-line 8631, :column 19, :line 8631, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8631, :column 24, :line 8631, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8631, :column 36, :line 8631, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8631, :column 57, :line 8631, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8632, :column 19, :line 8632, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8632, :column 32, :line 8632, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8632, :column 45, :line 8632, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8632, :column 58, :line 8632, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8631, :column 10, :line 8631, :file "cljs/core.cljs"} {:arglists (^cljs.core/MultiFn [^{:end-column 24, :end-line 8631, :column 19, :line 8631, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8631, :column 24, :line 8631, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8631, :column 36, :line 8631, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8631, :column 57, :line 8631, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8632, :column 19, :line 8632, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8632, :column 32, :line 8632, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8632, :column 45, :line 8632, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8632, :column 58, :line 8632, :file "cljs/core.cljs"} cached-hierarchy]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 8631, :column 19, :line 8631, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8631, :column 24, :line 8631, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8631, :column 36, :line 8631, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8631, :column 57, :line 8631, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8632, :column 19, :line 8632, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8632, :column 32, :line 8632, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8632, :column 45, :line 8632, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8632, :column 58, :line 8632, :file "cljs/core.cljs"} cached-hierarchy]), :factory :positional, :skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8631, :column 10, :line 8631, :file "cljs/core.cljs"} ->MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8327, :column 15, :line 8327, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8327, :column 16, :line 8327, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8327, :column 7, :line 8327, :file "cljs/core.cljs"} key->js ^{:arglists (^{:end-column 18, :end-line 8327, :column 15, :line 8327, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8327, :column 16, :line 8327, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8327, :column 7, :line 8327, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 8327, :column 16, :line 8327, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8327, :column 15, :line 8327, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 8327, :column 16, :line 8327, :file "cljs/core.cljs"} k]), :end-column 15, :end-line 8327, :column 7, :line 8327, :file "cljs/core.cljs"} key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 30, :end-line 3002, :column 24, :line 3002, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 3002, :column 30, :line 3002, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 3002, :column 36, :line 3002, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 3002, :column 10, :line 3002, :file "cljs/core.cljs"} ->MultiStepper ^{:arglists ([^{:end-column 30, :end-line 3002, :column 24, :line 3002, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 3002, :column 30, :line 3002, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 3002, :column 36, :line 3002, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 3002, :column 10, :line 3002, :file "cljs/core.cljs"} {:arglists (^cljs.core/MultiStepper [^{:end-column 30, :end-line 3002, :column 24, :line 3002, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 3002, :column 30, :line 3002, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 3002, :column 36, :line 3002, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 30, :end-line 3002, :column 24, :line 3002, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 3002, :column 30, :line 3002, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 3002, :column 36, :line 3002, :file "cljs/core.cljs"} nexts]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 3002, :column 10, :line 3002, :file "cljs/core.cljs"} ->MultiStepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]], ^{:end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 24, :end-line 8320, :column 14, :line 8320, :file "cljs/core.cljs"} IEncodeJS ^{:protocol-info {:methods {^{:end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]], ^{:end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 24, :end-line 8320, :column 14, :line 8320, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} -clj->js [^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]], ^{:end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} -key->js [^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 24, :end-line 8320, :column 14, :line 8320, :file "cljs/core.cljs"} IEncodeJS, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3939, :column 17, :line 3939, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3939, :column 18, :line 3939, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3939, :column 23, :line 3939, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3939, :column 29, :line 3939, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3939, :column 8, :line 3939, :file "cljs/core.cljs"} new-path ^{:arglists (^{:end-column 34, :end-line 3939, :column 17, :line 3939, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3939, :column 18, :line 3939, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3939, :column 23, :line 3939, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3939, :column 29, :line 3939, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3939, :column 8, :line 3939, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 3939, :column 18, :line 3939, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3939, :column 23, :line 3939, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3939, :column 29, :line 3939, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3939, :column 17, :line 3939, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 3939, :column 18, :line 3939, :file "cljs/core.cljs"} edit ^{:end-column 29, :end-line 3939, :column 23, :line 3939, :file "cljs/core.cljs"} level ^{:end-column 34, :end-line 3939, :column 29, :line 3939, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 3939, :column 8, :line 3939, :file "cljs/core.cljs"} new-path, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 3395, :column 3, :line 3395, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3395, :column 4, :line 3395, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3395, :column 6, :line 3395, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3395, :column 13, :line 3395, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3391, :column 7, :line 3391, :file "cljs/core.cljs"} compare-and-set! ^{:arglists (^{:end-column 20, :end-line 3395, :column 3, :line 3395, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3395, :column 4, :line 3395, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3395, :column 6, :line 3395, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3395, :column 13, :line 3395, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3391, :column 7, :line 3391, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 3395, :column 4, :line 3395, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3395, :column 6, :line 3395, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3395, :column 13, :line 3395, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 3395, :column 3, :line 3395, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3395, :column 4, :line 3395, :file "cljs/core.cljs"} a ^{:end-column 13, :end-line 3395, :column 6, :line 3395, :file "cljs/core.cljs"} oldval ^{:end-column 20, :end-line 3395, :column 13, :line 3395, :file "cljs/core.cljs"} newval]), :doc "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false.", :end-column 24, :end-line 3391, :column 7, :line 3391, :file "cljs/core.cljs"} compare-and-set!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 609, :column 10, :line 609, :file "cljs/core.cljs"} array-seq ^{:arglists (^{:end-column 11, :end-line 950, :column 4, :line 950, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 950, :column 5, :line 950, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 952, :column 4, :line 952, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 952, :column 5, :line 952, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 952, :column 11, :line 952, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 949, :column 7, :line 949, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 950, :column 5, :line 950, :file "cljs/core.cljs"} array] [^{:end-column 11, :end-line 952, :column 5, :line 952, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 952, :column 11, :line 952, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 950, :column 4, :line 950, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 950, :column 5, :line 950, :file "cljs/core.cljs"} array] ^{:end-column 13, :end-line 952, :column 4, :line 952, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 952, :column 5, :line 952, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 952, :column 11, :line 952, :file "cljs/core.cljs"} i]), :end-column 17, :end-line 949, :column 7, :line 949, :file "cljs/core.cljs"} array-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1429, :column 4, :line 1429, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1429, :column 5, :line 1429, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1429, :column 10, :line 1429, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1429, :column 12, :line 1429, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1429, :column 15, :line 1429, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1429, :column 17, :line 1429, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} array-copy-downward ^{:arglists (^{:end-column 21, :end-line 1429, :column 4, :line 1429, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1429, :column 5, :line 1429, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1429, :column 10, :line 1429, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1429, :column 12, :line 1429, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1429, :column 15, :line 1429, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1429, :column 17, :line 1429, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1429, :column 5, :line 1429, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1429, :column 10, :line 1429, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1429, :column 12, :line 1429, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1429, :column 15, :line 1429, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1429, :column 17, :line 1429, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1429, :column 4, :line 1429, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1429, :column 5, :line 1429, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1429, :column 10, :line 1429, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1429, :column 12, :line 1429, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1429, :column 15, :line 1429, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1429, :column 17, :line 1429, :file "cljs/core.cljs"} len]), :private true, :end-column 28, :end-line 1428, :column 8, :line 1428, :file "cljs/core.cljs"} array-copy-downward, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5612, :column 24, :line 5612, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5612, :column 25, :line 5612, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5612, :column 36, :line 5612, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5612, :column 41, :line 5612, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5612, :column 8, :line 5612, :file "cljs/core.cljs"} pack-array-node ^{:arglists (^{:end-column 45, :end-line 5612, :column 24, :line 5612, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5612, :column 25, :line 5612, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5612, :column 36, :line 5612, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5612, :column 41, :line 5612, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5612, :column 8, :line 5612, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 5612, :column 25, :line 5612, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5612, :column 36, :line 5612, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5612, :column 41, :line 5612, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5612, :column 24, :line 5612, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 5612, :column 25, :line 5612, :file "cljs/core.cljs"} array-node ^{:end-column 41, :end-line 5612, :column 36, :line 5612, :file "cljs/core.cljs"} edit ^{:end-column 45, :end-line 5612, :column 41, :line 5612, :file "cljs/core.cljs"} idx]), :private true, :end-column 24, :end-line 5612, :column 8, :line 5612, :file "cljs/core.cljs"} pack-array-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3697, :column 4, :line 3697, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3697, :column 5, :line 3697, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3697, :column 8, :line 3697, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3703, :column 4, :line 3703, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3703, :column 5, :line 3703, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3703, :column 8, :line 3703, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3703, :column 11, :line 3703, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3703, :column 13, :line 3703, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} interleave ^{:arglists (^{:end-column 11, :end-line 3697, :column 4, :line 3697, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3697, :column 5, :line 3697, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3697, :column 8, :line 3697, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3703, :column 4, :line 3703, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3703, :column 5, :line 3703, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3703, :column 8, :line 3703, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3703, :column 11, :line 3703, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3703, :column 13, :line 3703, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3697, :column 5, :line 3697, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3697, :column 8, :line 3697, :file "cljs/core.cljs"} c2] ^cljs.core/LazySeq [^{:end-column 8, :end-line 3703, :column 5, :line 3703, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3703, :column 8, :line 3703, :file "cljs/core.cljs"} c2 & ^{:end-column 19, :end-line 3703, :column 13, :line 3703, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3697, :column 4, :line 3697, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3697, :column 5, :line 3697, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3697, :column 8, :line 3697, :file "cljs/core.cljs"} c2] ^{:end-column 19, :end-line 3703, :column 4, :line 3703, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3703, :column 5, :line 3703, :file "cljs/core.cljs"} c1 ^{:end-column 11, :end-line 3703, :column 8, :line 3703, :file "cljs/core.cljs"} c2 ^{:end-column 13, :end-line 3703, :column 11, :line 3703, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3703, :column 13, :line 3703, :file "cljs/core.cljs"} colls]), :doc "Returns a lazy seq of the first item in each coll, then the second etc.", :end-column 18, :end-line 3695, :column 7, :line 3695, :file "cljs/core.cljs"} interleave, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 7871, :column 10, :line 7871, :file "cljs/core.cljs"} print-map ^{:arglists (^{:end-column 42, :end-line 8034, :column 17, :line 8034, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8034, :column 18, :line 8034, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 8034, :column 20, :line 8034, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 8034, :column 30, :line 8034, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 8034, :column 37, :line 8034, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 8034, :column 7, :line 8034, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 8034, :column 18, :line 8034, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 8034, :column 20, :line 8034, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 8034, :column 30, :line 8034, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 8034, :column 37, :line 8034, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 8034, :column 17, :line 8034, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8034, :column 18, :line 8034, :file "cljs/core.cljs"} m ^{:end-column 30, :end-line 8034, :column 20, :line 8034, :file "cljs/core.cljs"} print-one ^{:end-column 37, :end-line 8034, :column 30, :line 8034, :file "cljs/core.cljs"} writer ^{:end-column 42, :end-line 8034, :column 37, :line 8034, :file "cljs/core.cljs"} opts]), :end-column 17, :end-line 8034, :column 7, :line 8034, :file "cljs/core.cljs"} print-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1391, :column 3, :line 1391, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1391, :column 4, :line 1391, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1389, :column 8, :line 1389, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1389, :column 16, :line 1389, :file "cljs/core.cljs"} map? ^{:arglists (^{:end-column 6, :end-line 1391, :column 3, :line 1391, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1391, :column 4, :line 1391, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1389, :column 8, :line 1389, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1389, :column 16, :line 1389, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1391, :column 4, :line 1391, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1391, :column 3, :line 1391, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1391, :column 4, :line 1391, :file "cljs/core.cljs"} x]), :doc "Return true if x satisfies IMap", :tag ^{:end-column 16, :end-line 1389, :column 8, :line 1389, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1389, :column 16, :line 1389, :file "cljs/core.cljs"} map?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 438, :column 1, :line 438, :file "cljs/core.cljs"} m3-C1 ^{:end-column 23, :end-line 438, :column 1, :line 438, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 438, :column 1, :line 438, :file "cljs/core.cljs"} m3-C1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1181, :column 4, :line 1181, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1181, :column 5, :line 1181, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1181, :column 7, :line 1181, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1199, :column 4, :line 1199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1199, :column 5, :line 1199, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1199, :column 7, :line 1199, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1199, :column 9, :line 1199, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} get ^{:arglists (^{:end-column 9, :end-line 1181, :column 4, :line 1181, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1181, :column 5, :line 1181, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1181, :column 7, :line 1181, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1199, :column 4, :line 1199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1199, :column 5, :line 1199, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1199, :column 7, :line 1199, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1199, :column 9, :line 1199, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1181, :column 5, :line 1181, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1181, :column 7, :line 1181, :file "cljs/core.cljs"} k] [^{:end-column 7, :end-line 1199, :column 5, :line 1199, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1199, :column 7, :line 1199, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1199, :column 9, :line 1199, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1181, :column 4, :line 1181, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1181, :column 5, :line 1181, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1181, :column 7, :line 1181, :file "cljs/core.cljs"} k] ^{:end-column 19, :end-line 1199, :column 4, :line 1199, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1199, :column 5, :line 1199, :file "cljs/core.cljs"} o ^{:end-column 9, :end-line 1199, :column 7, :line 1199, :file "cljs/core.cljs"} k ^{:end-column 19, :end-line 1199, :column 9, :line 1199, :file "cljs/core.cljs"} not-found]), :doc "Returns the value mapped to key, not-found or nil if key not present.", :end-column 11, :end-line 1179, :column 7, :line 1179, :file "cljs/core.cljs"} get, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 1677, :column 16, :line 1677, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1677, :column 17, :line 1677, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1677, :column 7, :line 1677, :file "cljs/core.cljs"} identity ^{:arglists (^{:end-column 19, :end-line 1677, :column 16, :line 1677, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1677, :column 17, :line 1677, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1677, :column 7, :line 1677, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 1677, :column 17, :line 1677, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 1677, :column 16, :line 1677, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 1677, :column 17, :line 1677, :file "cljs/core.cljs"} x]), :end-column 16, :end-line 1677, :column 7, :line 1677, :file "cljs/core.cljs"} identity, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3802, :column 4, :line 3802, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3802, :column 5, :line 3802, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3802, :column 8, :line 3802, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3808, :column 4, :line 3808, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3808, :column 5, :line 3808, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3808, :column 8, :line 3808, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3808, :column 14, :line 3808, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3799, :column 7, :line 3799, :file "cljs/core.cljs"} into ^{:arglists (^{:end-column 13, :end-line 3802, :column 4, :line 3802, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3802, :column 5, :line 3802, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3802, :column 8, :line 3802, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3808, :column 4, :line 3808, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3808, :column 5, :line 3808, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3808, :column 8, :line 3808, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3808, :column 14, :line 3808, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3799, :column 7, :line 3799, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 3802, :column 5, :line 3802, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3802, :column 8, :line 3802, :file "cljs/core.cljs"} from] [^{:end-column 8, :end-line 3808, :column 5, :line 3808, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3808, :column 8, :line 3808, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3808, :column 14, :line 3808, :file "cljs/core.cljs"} from]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3802, :column 4, :line 3802, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3802, :column 5, :line 3802, :file "cljs/core.cljs"} to ^{:end-column 13, :end-line 3802, :column 8, :line 3802, :file "cljs/core.cljs"} from] ^{:end-column 19, :end-line 3808, :column 4, :line 3808, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3808, :column 5, :line 3808, :file "cljs/core.cljs"} to ^{:end-column 14, :end-line 3808, :column 8, :line 3808, :file "cljs/core.cljs"} xform ^{:end-column 19, :end-line 3808, :column 14, :line 3808, :file "cljs/core.cljs"} from]), :doc "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.", :end-column 12, :end-line 3799, :column 7, :line 3799, :file "cljs/core.cljs"} into, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1911, :column 3, :line 1911, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1911, :column 4, :line 1911, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1909, :column 7, :line 1909, :file "cljs/core.cljs"} long ^{:arglists (^{:end-column 6, :end-line 1911, :column 3, :line 1911, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1911, :column 4, :line 1911, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1909, :column 7, :line 1909, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1911, :column 4, :line 1911, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1911, :column 3, :line 1911, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1911, :column 4, :line 1911, :file "cljs/core.cljs"} x]), :doc "Coerce to long by stripping decimal places. Identical to `int'.", :end-column 12, :end-line 1909, :column 7, :line 1909, :file "cljs/core.cljs"} long, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 1814, :column 22, :line 1814, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1814, :column 23, :line 1814, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1814, :column 8, :line 1814, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1814, :column 15, :line 1814, :file "cljs/core.cljs"} double ^{:arglists (^{:end-column 25, :end-line 1814, :column 22, :line 1814, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1814, :column 23, :line 1814, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1814, :column 8, :line 1814, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1814, :column 15, :line 1814, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 1814, :column 23, :line 1814, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 1814, :column 22, :line 1814, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 1814, :column 23, :line 1814, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1814, :column 8, :line 1814, :file "cljs/core.cljs"} number, :end-column 22, :end-line 1814, :column 15, :line 1814, :file "cljs/core.cljs"} double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2467, :column 10, :line 2467, :file "cljs/core.cljs"} ChunkBuffer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2467, :column 10, :line 2467, :file "cljs/core.cljs"} ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 51, :end-line 2467, :column 22, :line 2467, :file "cljs/core.cljs"} [^{:mutable true, :end-column 37, :end-line 2467, :column 33, :line 2467, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2467, :column 47, :line 2467, :file "cljs/core.cljs"} end], :protocols #{Object cljs.core/ICounted}}, ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -key ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 271, :column 9, :line 271, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 271, :column 10, :line 271, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 271, :column 4, :line 271, :file "cljs/core.cljs"} -key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1022, :column 3, :line 1022, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1022, :column 4, :line 1022, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1020, :column 7, :line 1020, :file "cljs/core.cljs"} nfirst ^{:arglists (^{:end-column 9, :end-line 1022, :column 3, :line 1022, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1022, :column 4, :line 1022, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1020, :column 7, :line 1020, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 667, :column 8, :line 667, :file "cljs/core.cljs"} seq [^{:end-column 9, :end-line 1022, :column 4, :line 1022, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1022, :column 3, :line 1022, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1022, :column 4, :line 1022, :file "cljs/core.cljs"} coll]), :doc "Same as (next (first x))", :end-column 14, :end-line 1020, :column 7, :line 1020, :file "cljs/core.cljs"} nfirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 399, :column 10, :line 399, :file "cljs/core.cljs"} StringBufferWriter {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 399, :column 10, :line 399, :file "cljs/core.cljs"} StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 399, :column 29, :line 399, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 399, :column 30, :line 399, :file "cljs/core.cljs"} sb], :protocols #{cljs.core/IWriter}}, ^{:arglists (^{:end-column 6, :end-line 1319, :column 3, :line 1319, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1319, :column 4, :line 1319, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1317, :column 7, :line 1317, :file "cljs/core.cljs"} meta ^{:arglists (^{:end-column 6, :end-line 1319, :column 3, :line 1319, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1319, :column 4, :line 1319, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1317, :column 7, :line 1317, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1319, :column 4, :line 1319, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1319, :column 3, :line 1319, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1319, :column 4, :line 1319, :file "cljs/core.cljs"} o]), :doc "Returns the metadata of obj, returns nil if there is no metadata.", :end-column 12, :end-line 1317, :column 7, :line 1317, :file "cljs/core.cljs"} meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 44, :end-line 4035, :column 27, :line 4035, :file "cljs/core.cljs"} tv-editable-tail ^{:arglists (^{:end-column 29, :end-line 4457, :column 25, :line 4457, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4457, :column 26, :line 4457, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 4457, :column 8, :line 4457, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 29, :end-line 4457, :column 26, :line 4457, :file "cljs/core.cljs"} tl]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 4457, :column 25, :line 4457, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 4457, :column 26, :line 4457, :file "cljs/core.cljs"} tl]), :private true, :end-column 25, :end-line 4457, :column 8, :line 4457, :file "cljs/core.cljs"} tv-editable-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} -kv-reduce ^{:arglists (^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 300, :column 15, :line 300, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 300, :column 16, :line 300, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 300, :column 21, :line 300, :file "cljs/core.cljs"} f ^{:end-column 28, :end-line 300, :column 23, :line 300, :file "cljs/core.cljs"} init]), :protocol cljs.core/IKVReduce, :end-column 15, :end-line 300, :column 4, :line 300, :file "cljs/core.cljs"} -kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 305, :column 14, :line 305, :file "cljs/core.cljs"} IHash ^{:impls (cljs.core/UUID cljs.core/MultiFn cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Keyword cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq ^{:end-column 22, :end-line 759, :column 14, :line 759, :file "cljs/core.cljs"} default cljs.core/Symbol), :protocol-info {:methods {^{:end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 305, :column 14, :line 305, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} -hash [^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 20, :end-line 305, :column 14, :line 305, :file "cljs/core.cljs"} IHash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1973, :column 6, :line 1973, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} bit-and-not ^{:arglists (^{:end-column 8, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1973, :column 6, :line 1973, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1973, :column 6, :line 1973, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1973, :column 3, :line 1973, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1973, :column 4, :line 1973, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1973, :column 6, :line 1973, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 19, :end-line 1971, :column 7, :line 1971, :file "cljs/core.cljs"} bit-and-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} -comparator ^{:arglists (^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISorted, :end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} -comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1833, :column 7, :line 1833, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1834, :column 9, :line 1834, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1834, :column 11, :line 1834, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1829, :column 8, :line 1829, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1829, :column 15, :line 1829, :file "cljs/core.cljs"} unchecked-add-int ^{:arglists (^{:end-column 6, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1833, :column 7, :line 1833, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1834, :column 9, :line 1834, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1834, :column 11, :line 1834, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1829, :column 8, :line 1829, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1829, :column 15, :line 1829, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1833, :column 7, :line 1833, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1834, :column 11, :line 1834, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1831, :column 4, :line 1831, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1832, :column 4, :line 1832, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1832, :column 5, :line 1832, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1833, :column 4, :line 1833, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1833, :column 5, :line 1833, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1833, :column 7, :line 1833, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1834, :column 4, :line 1834, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1834, :column 5, :line 1834, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1834, :column 7, :line 1834, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1834, :column 9, :line 1834, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1834, :column 11, :line 1834, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1829, :column 8, :line 1829, :file "cljs/core.cljs"} number, :end-column 33, :end-line 1829, :column 15, :line 1829, :file "cljs/core.cljs"} unchecked-add-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 712, :column 3, :line 712, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 712, :column 4, :line 712, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 708, :column 8, :line 708, :file "cljs/core.cljs"} number, :end-column 33, :end-line 708, :column 15, :line 708, :file "cljs/core.cljs"} hash-ordered-coll ^{:arglists (^{:end-column 9, :end-line 712, :column 3, :line 712, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 712, :column 4, :line 712, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 708, :column 8, :line 708, :file "cljs/core.cljs"} number, :end-column 33, :end-line 708, :column 15, :line 708, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 9, :end-line 712, :column 4, :line 712, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 712, :column 3, :line 712, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 712, :column 4, :line 712, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 708, :column 8, :line 708, :file "cljs/core.cljs"} number, :end-column 33, :end-line 708, :column 15, :line 708, :file "cljs/core.cljs"} hash-ordered-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2131, :column 3, :line 2131, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2131, :column 4, :line 2131, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2131, :column 8, :line 2131, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2126, :column 8, :line 2126, :file "cljs/core.cljs"} extend-object! ^{:arglists (^{:end-column 15, :end-line 2131, :column 3, :line 2131, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2131, :column 4, :line 2131, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2131, :column 8, :line 2131, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2126, :column 8, :line 2126, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 2131, :column 4, :line 2131, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2131, :column 8, :line 2131, :file "cljs/core.cljs"} fn-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2131, :column 3, :line 2131, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2131, :column 4, :line 2131, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 2131, :column 8, :line 2131, :file "cljs/core.cljs"} fn-map]), :doc "Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implict this (via the this-as macro) will resolve to the\n  object that the function is attached.", :private true, :end-column 23, :end-line 2126, :column 8, :line 2126, :file "cljs/core.cljs"} extend-object!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 3992, :column 17, :line 3992, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3992, :column 18, :line 3992, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3992, :column 21, :line 3992, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3992, :column 27, :line 3992, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3992, :column 32, :line 3992, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3992, :column 34, :line 3992, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3992, :column 8, :line 3992, :file "cljs/core.cljs"} do-assoc ^{:arglists (^{:end-column 38, :end-line 3992, :column 17, :line 3992, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3992, :column 18, :line 3992, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3992, :column 21, :line 3992, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3992, :column 27, :line 3992, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3992, :column 32, :line 3992, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3992, :column 34, :line 3992, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3992, :column 8, :line 3992, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 21, :end-line 3992, :column 18, :line 3992, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3992, :column 21, :line 3992, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3992, :column 27, :line 3992, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3992, :column 32, :line 3992, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3992, :column 34, :line 3992, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 3992, :column 17, :line 3992, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 3992, :column 18, :line 3992, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 3992, :column 21, :line 3992, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 3992, :column 27, :line 3992, :file "cljs/core.cljs"} node ^{:end-column 34, :end-line 3992, :column 32, :line 3992, :file "cljs/core.cljs"} i ^{:end-column 38, :end-line 3992, :column 34, :line 3992, :file "cljs/core.cljs"} val]), :private true, :end-column 17, :end-line 3992, :column 8, :line 3992, :file "cljs/core.cljs"} do-assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8167, :column 3, :line 8167, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8167, :column 4, :line 8167, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8167, :column 9, :line 8167, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8165, :column 7, :line 8165, :file "cljs/core.cljs"} reset-meta! ^{:arglists (^{:end-column 11, :end-line 8167, :column 3, :line 8167, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8167, :column 4, :line 8167, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8167, :column 9, :line 8167, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8165, :column 7, :line 8165, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8167, :column 4, :line 8167, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8167, :column 9, :line 8167, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8167, :column 3, :line 8167, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8167, :column 4, :line 8167, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8167, :column 9, :line 8167, :file "cljs/core.cljs"} m]), :doc "Atomically resets the metadata for an atom", :end-column 19, :end-line 8165, :column 7, :line 8165, :file "cljs/core.cljs"} reset-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6912, :column 19, :line 6912, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6912, :column 30, :line 6912, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6912, :column 35, :line 6912, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6912, :column 10, :line 6912, :file "cljs/core.cljs"} ->KeySeq ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6912, :column 19, :line 6912, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6912, :column 30, :line 6912, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6912, :column 35, :line 6912, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6912, :column 10, :line 6912, :file "cljs/core.cljs"} {:arglists (^cljs.core/KeySeq [^{:tag ^{:end-column 30, :end-line 6912, :column 19, :line 6912, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6912, :column 30, :line 6912, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6912, :column 35, :line 6912, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6912, :column 19, :line 6912, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6912, :column 30, :line 6912, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6912, :column 35, :line 6912, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6912, :column 10, :line 6912, :file "cljs/core.cljs"} ->KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} t8427 {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}, :anonymous true} t8427, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields [meta8428], :protocols #{Object cljs.core/IMeta cljs.core/IWithMeta}}, ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 21, :end-line 302, :column 14, :line 302, :file "cljs/core.cljs"} IEquiv ^{:impls (cljs.core/UUID cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/NeverEquiv cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/Atom cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Keyword cljs.core/Cons cljs.core/EmptyList cljs.core/List ^{:end-column 22, :end-line 1043, :column 14, :line 1043, :file "cljs/core.cljs"} default cljs.core/RSeq cljs.core/IndexedSeq ^{:end-column 21, :end-line 748, :column 14, :line 748, :file "cljs/core.cljs"} number Date cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 21, :end-line 302, :column 14, :line 302, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} -equiv [^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]]}}, :protocol-symbol true, :end-column 21, :end-line 302, :column 14, :line 302, :file "cljs/core.cljs"} IEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6351, :column 27, :line 6351, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6351, :column 28, :line 6351, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6351, :column 33, :line 6351, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6351, :column 35, :line 6351, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6351, :column 8, :line 6351, :file "cljs/core.cljs"} tree-map-kv-reduce ^{:arglists (^{:end-column 40, :end-line 6351, :column 27, :line 6351, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6351, :column 28, :line 6351, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6351, :column 33, :line 6351, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6351, :column 35, :line 6351, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6351, :column 8, :line 6351, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 6351, :column 28, :line 6351, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6351, :column 33, :line 6351, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6351, :column 35, :line 6351, :file "cljs/core.cljs"} init]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6351, :column 27, :line 6351, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 6351, :column 28, :line 6351, :file "cljs/core.cljs"} node ^{:end-column 35, :end-line 6351, :column 33, :line 6351, :file "cljs/core.cljs"} f ^{:end-column 40, :end-line 6351, :column 35, :line 6351, :file "cljs/core.cljs"} init]), :private true, :end-column 27, :end-line 6351, :column 8, :line 6351, :file "cljs/core.cljs"} tree-map-kv-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3663, :column 7, :line 3663, :file "cljs/core.cljs"} cycle ^{:arglists (^{:end-column 9, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3663, :column 7, :line 3663, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3665, :column 3, :line 3665, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3665, :column 4, :line 3665, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy (infinite!) sequence of repetitions of the items in coll.", :end-column 13, :end-line 3663, :column 7, :line 3663, :file "cljs/core.cljs"} cycle, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} -deref ^{:arglists (^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]), :protocol cljs.core/IDeref, :end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} -deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1356, :column 3, :line 1356, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1356, :column 4, :line 1356, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} empty? ^{:arglists (^{:end-column 9, :end-line 1356, :column 3, :line 1356, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1356, :column 4, :line 1356, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 1356, :column 4, :line 1356, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1356, :column 3, :line 1356, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1356, :column 4, :line 1356, :file "cljs/core.cljs"} coll]), :doc "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))", :tag ^{:end-column 16, :end-line 1353, :column 8, :line 1353, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1353, :column 16, :line 1353, :file "cljs/core.cljs"} empty?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1812, :column 21, :line 1812, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1812, :column 22, :line 1812, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1812, :column 8, :line 1812, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1812, :column 15, :line 1812, :file "cljs/core.cljs"} short ^{:arglists (^{:end-column 24, :end-line 1812, :column 21, :line 1812, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1812, :column 22, :line 1812, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1812, :column 8, :line 1812, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1812, :column 15, :line 1812, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1812, :column 22, :line 1812, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1812, :column 21, :line 1812, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1812, :column 22, :line 1812, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1812, :column 8, :line 1812, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1812, :column 15, :line 1812, :file "cljs/core.cljs"} short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} -clj->js ^{:arglists (^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8321, :column 13, :line 8321, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8321, :column 14, :line 8321, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8321, :column 4, :line 8321, :file "cljs/core.cljs"} -clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-first ^{:arglists (^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedSeq, :end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-first, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3832, :column 3, :line 3832, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3832, :column 4, :line 3832, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3832, :column 9, :line 3832, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3829, :column 7, :line 3829, :file "cljs/core.cljs"} filterv ^{:arglists (^{:end-column 14, :end-line 3832, :column 3, :line 3832, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3832, :column 4, :line 3832, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3832, :column 9, :line 3832, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3829, :column 7, :line 3829, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 3832, :column 4, :line 3832, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3832, :column 9, :line 3832, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3832, :column 3, :line 3832, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3832, :column 4, :line 3832, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3832, :column 9, :line 3832, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.", :end-column 15, :end-line 3829, :column 7, :line 3829, :file "cljs/core.cljs"} filterv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 4035, :column 10, :line 4035, :file "cljs/core.cljs"} tv-editable-root ^{:arglists (^{:end-column 31, :end-line 4454, :column 25, :line 4454, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4454, :column 26, :line 4454, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 4454, :column 8, :line 4454, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 31, :end-line 4454, :column 26, :line 4454, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 4454, :column 25, :line 4454, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 4454, :column 26, :line 4454, :file "cljs/core.cljs"} node]), :private true, :end-column 25, :end-line 4454, :column 8, :line 4454, :file "cljs/core.cljs"} tv-editable-root, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 512, :column 12, :line 512, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 512, :column 13, :line 512, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 512, :column 7, :line 512, :file "cljs/core.cljs"} hash ^{:arglists (^{:end-column 15, :end-line 512, :column 12, :line 512, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 512, :column 13, :line 512, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 512, :column 7, :line 512, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 512, :column 13, :line 512, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 512, :column 12, :line 512, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 512, :column 13, :line 512, :file "cljs/core.cljs"} o]), :end-column 12, :end-line 512, :column 7, :line 512, :file "cljs/core.cljs"} hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} quot ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1940, :column 3, :line 1940, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1940, :column 4, :line 1940, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1940, :column 6, :line 1940, :file "cljs/core.cljs"} d]), :doc "quot[ient] of dividing numerator by denominator.", :end-column 12, :end-line 1938, :column 7, :line 1938, :file "cljs/core.cljs"} quot, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 1820, :column 32, :line 1820, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1820, :column 33, :line 1820, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1820, :column 15, :line 1820, :file "cljs/core.cljs"} unchecked-double ^{:arglists (^{:end-column 35, :end-line 1820, :column 32, :line 1820, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1820, :column 33, :line 1820, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1820, :column 15, :line 1820, :file "cljs/core.cljs"} {:arglists ([^{:end-column 35, :end-line 1820, :column 33, :line 1820, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 1820, :column 32, :line 1820, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 1820, :column 33, :line 1820, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1820, :column 8, :line 1820, :file "cljs/core.cljs"} number, :end-column 32, :end-line 1820, :column 15, :line 1820, :file "cljs/core.cljs"} unchecked-double, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 29, :end-line 2516, :column 23, :line 2516, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2516, :column 29, :line 2516, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2516, :column 34, :line 2516, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2516, :column 49, :line 2516, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2516, :column 10, :line 2516, :file "cljs/core.cljs"} ->ChunkedCons ^{:arglists ([^{:end-column 29, :end-line 2516, :column 23, :line 2516, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2516, :column 29, :line 2516, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2516, :column 34, :line 2516, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2516, :column 49, :line 2516, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2516, :column 10, :line 2516, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedCons [^{:end-column 29, :end-line 2516, :column 23, :line 2516, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2516, :column 29, :line 2516, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2516, :column 34, :line 2516, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2516, :column 49, :line 2516, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 29, :end-line 2516, :column 23, :line 2516, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2516, :column 29, :line 2516, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2516, :column 34, :line 2516, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2516, :column 49, :line 2516, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2516, :column 10, :line 2516, :file "cljs/core.cljs"} ->ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 4028, :column 23, :line 4028, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4028, :column 24, :line 4028, :file "cljs/core.cljs"} v ^{:end-column 32, :end-line 4028, :column 26, :line 4028, :file "cljs/core.cljs"} start ^{:end-column 36, :end-line 4028, :column 32, :line 4028, :file "cljs/core.cljs"} end]), :end-column 23, :end-line 4028, :column 7, :line 4028, :file "cljs/core.cljs"} ranged-iterator ^{:arglists (^{:end-column 36, :end-line 4028, :column 23, :line 4028, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4028, :column 24, :line 4028, :file "cljs/core.cljs"} v ^{:end-column 32, :end-line 4028, :column 26, :line 4028, :file "cljs/core.cljs"} start ^{:end-column 36, :end-line 4028, :column 32, :line 4028, :file "cljs/core.cljs"} end]), :end-column 23, :end-line 4028, :column 7, :line 4028, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangedIterator [^{:end-column 26, :end-line 4028, :column 24, :line 4028, :file "cljs/core.cljs"} v ^{:end-column 32, :end-line 4028, :column 26, :line 4028, :file "cljs/core.cljs"} start ^{:end-column 36, :end-line 4028, :column 32, :line 4028, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 4028, :column 23, :line 4028, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4028, :column 24, :line 4028, :file "cljs/core.cljs"} v ^{:end-column 32, :end-line 4028, :column 26, :line 4028, :file "cljs/core.cljs"} start ^{:end-column 36, :end-line 4028, :column 32, :line 4028, :file "cljs/core.cljs"} end]), :end-column 23, :end-line 4028, :column 7, :line 4028, :file "cljs/core.cljs"} ranged-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 31, :end-line 362, :column 14, :line 362, :file "cljs/core.cljs"} ITransientVector ^{:impls (cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 31, :end-line 362, :column 14, :line 362, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -assoc-n! [^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -pop! [^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 31, :end-line 362, :column 14, :line 362, :file "cljs/core.cljs"} ITransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 2103, :column 10, :line 2103, :file "cljs/core.cljs"} key ^{:arglists (^{:end-column 14, :end-line 6975, :column 3, :line 6975, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6975, :column 4, :line 6975, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6973, :column 7, :line 6973, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 6975, :column 4, :line 6975, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6975, :column 3, :line 6975, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 6975, :column 4, :line 6975, :file "cljs/core.cljs"} map-entry]), :doc "Returns the key of the map entry.", :end-column 11, :end-line 6973, :column 7, :line 6973, :file "cljs/core.cljs"} key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1926, :column 13, :line 1926, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1926, :column 14, :line 1926, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} longs ^{:arglists (^{:end-column 16, :end-line 1926, :column 13, :line 1926, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1926, :column 14, :line 1926, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1926, :column 14, :line 1926, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1926, :column 13, :line 1926, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1926, :column 14, :line 1926, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1926, :column 7, :line 1926, :file "cljs/core.cljs"} longs, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2895, :column 4, :line 2895, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2895, :column 5, :line 2895, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2896, :column 4, :line 2896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2896, :column 5, :line 2896, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2896, :column 7, :line 2896, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2897, :column 4, :line 2897, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2897, :column 5, :line 2897, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2897, :column 7, :line 2897, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2897, :column 9, :line 2897, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2897, :column 11, :line 2897, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2893, :column 8, :line 2893, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2893, :column 16, :line 2893, :file "cljs/core.cljs"} not= ^{:arglists (^{:end-column 7, :end-line 2895, :column 4, :line 2895, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2895, :column 5, :line 2895, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2896, :column 4, :line 2896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2896, :column 5, :line 2896, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2896, :column 7, :line 2896, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2897, :column 4, :line 2897, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2897, :column 5, :line 2897, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2897, :column 7, :line 2897, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2897, :column 9, :line 2897, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2897, :column 11, :line 2897, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2893, :column 8, :line 2893, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2893, :column 16, :line 2893, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 2895, :column 5, :line 2895, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 7, :end-line 2896, :column 5, :line 2896, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2896, :column 7, :line 2896, :file "cljs/core.cljs"} y] ^boolean [^{:end-column 7, :end-line 2897, :column 5, :line 2897, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2897, :column 7, :line 2897, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 2897, :column 11, :line 2897, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2895, :column 4, :line 2895, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2895, :column 5, :line 2895, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2896, :column 4, :line 2896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2896, :column 5, :line 2896, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2896, :column 7, :line 2896, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2897, :column 4, :line 2897, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2897, :column 5, :line 2897, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2897, :column 7, :line 2897, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2897, :column 9, :line 2897, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2897, :column 11, :line 2897, :file "cljs/core.cljs"} more]), :doc "Same as (not (= obj1 obj2))", :tag ^{:end-column 16, :end-line 2893, :column 8, :line 2893, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 2893, :column 16, :line 2893, :file "cljs/core.cljs"} not=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string? ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 107, :column 24, :line 107, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 107, :column 25, :line 107, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 107, :column 8, :line 107, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 107, :column 16, :line 107, :file "cljs/core.cljs"} string?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4920, :column 20, :line 4920, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4920, :column 21, :line 4920, :file "cljs/core.cljs"} coll]), :end-column 20, :end-line 4920, :column 7, :line 4920, :file "cljs/core.cljs"} es6-iterator ^{:arglists (^{:end-column 26, :end-line 4920, :column 20, :line 4920, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4920, :column 21, :line 4920, :file "cljs/core.cljs"} coll]), :end-column 20, :end-line 4920, :column 7, :line 4920, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6Iterator [^{:end-column 26, :end-line 4920, :column 21, :line 4920, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4920, :column 20, :line 4920, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 4920, :column 21, :line 4920, :file "cljs/core.cljs"} coll]), :end-column 20, :end-line 4920, :column 7, :line 4920, :file "cljs/core.cljs"} es6-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8222, :column 10, :line 8222, :file "cljs/core.cljs"} Delay {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8222, :column 10, :line 8222, :file "cljs/core.cljs"} Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 8222, :column 16, :line 8222, :file "cljs/core.cljs"} [^{:mutable true, :end-column 29, :end-line 8222, :column 27, :line 8222, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8222, :column 39, :line 8222, :file "cljs/core.cljs"} value], :protocols #{cljs.core/IPending cljs.core/IDeref}}, ^{:arglists (^{:end-column 14, :end-line 7960, :column 3, :line 7960, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7960, :column 4, :line 7960, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7960, :column 9, :line 7960, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7957, :column 7, :line 7957, :file "cljs/core.cljs"} pr-str-with-opts ^{:arglists (^{:end-column 14, :end-line 7960, :column 3, :line 7960, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7960, :column 4, :line 7960, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7960, :column 9, :line 7960, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7957, :column 7, :line 7957, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7960, :column 4, :line 7960, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7960, :column 9, :line 7960, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7960, :column 3, :line 7960, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7960, :column 4, :line 7960, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7960, :column 9, :line 7960, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects to a string, observing all the\n  options given in opts", :end-column 24, :end-line 7957, :column 7, :line 7957, :file "cljs/core.cljs"} pr-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 23, :end-line 439, :column 1, :line 439, :file "cljs/core.cljs"} m3-C2 ^{:end-column 23, :end-line 439, :column 1, :line 439, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 23, :end-line 439, :column 1, :line 439, :file "cljs/core.cljs"} m3-C2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 562, :column 18, :line 562, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 562, :column 21, :line 562, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 562, :column 26, :line 562, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 562, :column 40, :line 562, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 562, :column 46, :line 562, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 562, :column 10, :line 562, :file "cljs/core.cljs"} ->Symbol ^{:arglists ([^{:end-column 21, :end-line 562, :column 18, :line 562, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 562, :column 21, :line 562, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 562, :column 26, :line 562, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 562, :column 40, :line 562, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 562, :column 46, :line 562, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 562, :column 10, :line 562, :file "cljs/core.cljs"} {:arglists (^cljs.core/Symbol [^{:end-column 21, :end-line 562, :column 18, :line 562, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 562, :column 21, :line 562, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 562, :column 26, :line 562, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 562, :column 40, :line 562, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 562, :column 46, :line 562, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 562, :column 18, :line 562, :file "cljs/core.cljs"} ns ^{:end-column 26, :end-line 562, :column 21, :line 562, :file "cljs/core.cljs"} name ^{:end-column 30, :end-line 562, :column 26, :line 562, :file "cljs/core.cljs"} str ^{:mutable true, :end-column 46, :end-line 562, :column 40, :line 562, :file "cljs/core.cljs"} _hash ^{:end-column 52, :end-line 562, :column 46, :line 562, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IMeta cljs.core/IPrintWithWriter cljs.core/IWithMeta}, :end-column 17, :end-line 562, :column 10, :line 562, :file "cljs/core.cljs"} ->Symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline* ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 37, :end-line 33, :column 1, :line 33, :file "cljs/core.cljs"} *print-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} unchecked-multiply-int ^{:arglists (^{:end-column 6, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1864, :column 4, :line 1864, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1865, :column 4, :line 1865, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1865, :column 5, :line 1865, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1866, :column 4, :line 1866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1866, :column 5, :line 1866, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1866, :column 7, :line 1866, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1867, :column 4, :line 1867, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1867, :column 5, :line 1867, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1867, :column 7, :line 1867, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1867, :column 9, :line 1867, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1867, :column 11, :line 1867, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1862, :column 8, :line 1862, :file "cljs/core.cljs"} number, :end-column 38, :end-line 1862, :column 15, :line 1862, :file "cljs/core.cljs"} unchecked-multiply-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 38, :end-line 2124, :column 27, :line 2124, :file "cljs/core.cljs"} chunk-rest ^{:arglists (^{:end-column 21, :end-line 2592, :column 18, :line 2592, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2592, :column 19, :line 2592, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2592, :column 7, :line 2592, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2592, :column 19, :line 2592, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2592, :column 18, :line 2592, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2592, :column 19, :line 2592, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2592, :column 7, :line 2592, :file "cljs/core.cljs"} chunk-rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8808, :column 2, :line 8808, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8808, :column 3, :line 8808, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8806, :column 7, :line 8806, :file "cljs/core.cljs"} remove-all-methods ^{:arglists (^{:end-column 11, :end-line 8808, :column 2, :line 8808, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8808, :column 3, :line 8808, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8806, :column 7, :line 8806, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8808, :column 3, :line 8808, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8808, :column 2, :line 8808, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8808, :column 3, :line 8808, :file "cljs/core.cljs"} multifn]), :doc "Removes all of the methods of multimethod.", :end-column 26, :end-line 8806, :column 7, :line 8806, :file "cljs/core.cljs"} remove-all-methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8416, :column 4, :line 8416, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8416, :column 5, :line 8416, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8421, :column 4, :line 8421, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8421, :column 5, :line 8421, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8421, :column 7, :line 8421, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8421, :column 9, :line 8421, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8408, :column 7, :line 8408, :file "cljs/core.cljs"} trampoline ^{:arglists (^{:end-column 7, :end-line 8416, :column 4, :line 8416, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8416, :column 5, :line 8416, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8421, :column 4, :line 8421, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8421, :column 5, :line 8421, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8421, :column 7, :line 8421, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8421, :column 9, :line 8421, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8408, :column 7, :line 8408, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8416, :column 5, :line 8416, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 8421, :column 5, :line 8421, :file "cljs/core.cljs"} f & ^{:end-column 14, :end-line 8421, :column 9, :line 8421, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8416, :column 4, :line 8416, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8416, :column 5, :line 8416, :file "cljs/core.cljs"} f] ^{:end-column 14, :end-line 8421, :column 4, :line 8421, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8421, :column 5, :line 8421, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 8421, :column 7, :line 8421, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 8421, :column 9, :line 8421, :file "cljs/core.cljs"} args]), :doc "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.", :end-column 18, :end-line 8408, :column 7, :line 8408, :file "cljs/core.cljs"} trampoline, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 40, :column 16, :line 40, :file "cljs/core.cljs"} []), :private true, :end-column 16, :end-line 40, :column 8, :line 40, :file "cljs/core.cljs"} pr-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1 ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the most recent value printed", :end-column 6, :end-line 59, :column 1, :line 57, :file "cljs/core.cljs"} *1, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 14, :end-line 1613, :column 10, :line 1613, :file "cljs/core.cljs"} vec ^{:arglists (^{:end-column 17, :end-line 4238, :column 11, :line 4238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4238, :column 12, :line 4238, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 4238, :column 7, :line 4238, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 17, :end-line 4238, :column 12, :line 4238, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 4238, :column 11, :line 4238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4238, :column 12, :line 4238, :file "cljs/core.cljs"} coll]), :end-column 11, :end-line 4238, :column 7, :line 4238, :file "cljs/core.cljs"} vec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta* ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 35, :end-line 35, :column 1, :line 35, :file "cljs/core.cljs"} *print-meta*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -notify-watches ^{:arglists (^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]), :protocol cljs.core/IWatchable, :end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -notify-watches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8631, :column 10, :line 8631, :file "cljs/core.cljs"} MultiFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}, :end-column 18, :end-line 8631, :column 10, :line 8631, :file "cljs/core.cljs"} MultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 75, :end-line 8632, :column 18, :line 8631, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 8631, :column 19, :line 8631, :file "cljs/core.cljs"} name ^{:end-column 36, :end-line 8631, :column 24, :line 8631, :file "cljs/core.cljs"} dispatch-fn ^{:end-column 57, :end-line 8631, :column 36, :line 8631, :file "cljs/core.cljs"} default-dispatch-val ^{:end-column 67, :end-line 8631, :column 57, :line 8631, :file "cljs/core.cljs"} hierarchy ^{:end-column 32, :end-line 8632, :column 19, :line 8632, :file "cljs/core.cljs"} method-table ^{:end-column 45, :end-line 8632, :column 32, :line 8632, :file "cljs/core.cljs"} prefer-table ^{:end-column 58, :end-line 8632, :column 45, :line 8632, :file "cljs/core.cljs"} method-cache ^{:end-column 75, :end-line 8632, :column 58, :line 8632, :file "cljs/core.cljs"} cached-hierarchy], :protocols #{cljs.core/IHash cljs.core/IFn cljs.core/IMultiFn}}, ^{:arglists (^{:end-column 6, :end-line 1901, :column 3, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} int ^{:arglists (^{:end-column 6, :end-line 1901, :column 3, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1901, :column 3, :line 1901, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1901, :column 4, :line 1901, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 11, :end-line 1899, :column 7, :line 1899, :file "cljs/core.cljs"} int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6978, :column 19, :line 6978, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6978, :column 30, :line 6978, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6978, :column 35, :line 6978, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6978, :column 10, :line 6978, :file "cljs/core.cljs"} ->ValSeq ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6978, :column 19, :line 6978, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6978, :column 30, :line 6978, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6978, :column 35, :line 6978, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6978, :column 10, :line 6978, :file "cljs/core.cljs"} {:arglists (^cljs.core/ValSeq [^{:tag ^{:end-column 30, :end-line 6978, :column 19, :line 6978, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6978, :column 30, :line 6978, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6978, :column 35, :line 6978, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:tag ^{:end-column 30, :end-line 6978, :column 19, :line 6978, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6978, :column 30, :line 6978, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6978, :column 35, :line 6978, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6978, :column 10, :line 6978, :file "cljs/core.cljs"} ->ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1952, :column 4, :line 1952, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1953, :column 4, :line 1953, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1953, :column 5, :line 1953, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive).", :tag ^{:end-column 15, :end-line 1950, :column 8, :line 1950, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1950, :column 15, :line 1950, :file "cljs/core.cljs"} rand ^{:arglists (^{:end-column 6, :end-line 8427, :column 4, :line 8427, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8428, :column 4, :line 8428, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8428, :column 5, :line 8428, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 8424, :column 7, :line 8424, :file "cljs/core.cljs"} {:arglists ([] ^number [^{:end-column 7, :end-line 8428, :column 5, :line 8428, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8427, :column 4, :line 8427, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 8428, :column 4, :line 8428, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8428, :column 5, :line 8428, :file "cljs/core.cljs"} n]), :doc "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).", :end-column 12, :end-line 8424, :column 7, :line 8424, :file "cljs/core.cljs"} rand, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} second ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1012, :column 3, :line 1012, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1012, :column 4, :line 1012, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 14, :end-line 1010, :column 7, :line 1010, :file "cljs/core.cljs"} second, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 349, :column 14, :line 349, :file "cljs/core.cljs"} IEditableCollection ^{:impls (cljs.core/PersistentHashSet cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 349, :column 14, :line 349, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj, :end-column 23, :end-line 350, :column 9, :line 350, :file "cljs/core.cljs"} -as-transient [^{:end-column 29, :end-line 350, :column 23, :line 350, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 350, :column 24, :line 350, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 34, :end-line 349, :column 14, :line 349, :file "cljs/core.cljs"} IEditableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 532, :column 20, :line 532, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 532, :column 21, :line 532, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 532, :column 26, :line 532, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} hash-combine ^{:arglists (^{:end-column 31, :end-line 532, :column 20, :line 532, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 532, :column 21, :line 532, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 532, :column 26, :line 532, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 26, :end-line 532, :column 21, :line 532, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 532, :column 26, :line 532, :file "cljs/core.cljs"} hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 532, :column 20, :line 532, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 532, :column 21, :line 532, :file "cljs/core.cljs"} seed ^{:end-column 31, :end-line 532, :column 26, :line 532, :file "cljs/core.cljs"} hash]), :end-column 20, :end-line 532, :column 7, :line 532, :file "cljs/core.cljs"} hash-combine, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1764, :column 7, :line 1764, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1765, :column 9, :line 1765, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1765, :column 11, :line 1765, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1760, :column 8, :line 1760, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1760, :column 16, :line 1760, :file "cljs/core.cljs"} > ^{:arglists (^{:end-column 7, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1764, :column 7, :line 1764, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1765, :column 9, :line 1765, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1765, :column 11, :line 1765, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1760, :column 8, :line 1760, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1760, :column 16, :line 1760, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1764, :column 7, :line 1764, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1765, :column 11, :line 1765, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1763, :column 4, :line 1763, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1763, :column 5, :line 1763, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1764, :column 4, :line 1764, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1764, :column 5, :line 1764, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1764, :column 7, :line 1764, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1765, :column 4, :line 1765, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1765, :column 5, :line 1765, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1765, :column 7, :line 1765, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1765, :column 9, :line 1765, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1765, :column 11, :line 1765, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1760, :column 8, :line 1760, :file "cljs/core.cljs"} boolean, :end-column 18, :end-line 1760, :column 16, :line 1760, :file "cljs/core.cljs"} >, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -name ^{:arglists (^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 7351, :column 4, :line 7351, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7351, :column 5, :line 7351, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7353, :column 4, :line 7353, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7353, :column 5, :line 7353, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7353, :column 10, :line 7353, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7346, :column 7, :line 7346, :file "cljs/core.cljs"} replace ^{:arglists (^{:end-column 10, :end-line 7351, :column 4, :line 7351, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7351, :column 5, :line 7351, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7353, :column 4, :line 7353, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7353, :column 5, :line 7353, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7353, :column 10, :line 7353, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7346, :column 7, :line 7346, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 7351, :column 5, :line 7351, :file "cljs/core.cljs"} smap] [^{:end-column 10, :end-line 7353, :column 5, :line 7353, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7353, :column 10, :line 7353, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 7351, :column 4, :line 7351, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7351, :column 5, :line 7351, :file "cljs/core.cljs"} smap] ^{:end-column 15, :end-line 7353, :column 4, :line 7353, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 7353, :column 5, :line 7353, :file "cljs/core.cljs"} smap ^{:end-column 15, :end-line 7353, :column 10, :line 7353, :file "cljs/core.cljs"} coll]), :doc "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.", :end-column 15, :end-line 7346, :column 7, :line 7346, :file "cljs/core.cljs"} replace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 4333, :column 18, :line 4333, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4333, :column 23, :line 4333, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4333, :column 25, :line 4333, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4333, :column 31, :line 4333, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4333, :column 45, :line 4333, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4333, :column 10, :line 4333, :file "cljs/core.cljs"} ->Subvec ^{:arglists ([^{:end-column 23, :end-line 4333, :column 18, :line 4333, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4333, :column 23, :line 4333, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4333, :column 25, :line 4333, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4333, :column 31, :line 4333, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4333, :column 45, :line 4333, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4333, :column 10, :line 4333, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 23, :end-line 4333, :column 18, :line 4333, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4333, :column 23, :line 4333, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4333, :column 25, :line 4333, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4333, :column 31, :line 4333, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4333, :column 45, :line 4333, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 4333, :column 18, :line 4333, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4333, :column 23, :line 4333, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4333, :column 25, :line 4333, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4333, :column 31, :line 4333, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4333, :column 45, :line 4333, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4333, :column 10, :line 4333, :file "cljs/core.cljs"} ->Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1375, :column 3, :line 1375, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1373, :column 8, :line 1373, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1373, :column 16, :line 1373, :file "cljs/core.cljs"} associative? ^{:arglists (^{:end-column 6, :end-line 1375, :column 3, :line 1375, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1373, :column 8, :line 1373, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1373, :column 16, :line 1373, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1375, :column 3, :line 1375, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1375, :column 4, :line 1375, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements Associative", :tag ^{:end-column 16, :end-line 1373, :column 8, :line 1373, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1373, :column 16, :line 1373, :file "cljs/core.cljs"} associative?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1906, :column 3, :line 1906, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1906, :column 4, :line 1906, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1904, :column 7, :line 1904, :file "cljs/core.cljs"} unchecked-int ^{:arglists (^{:end-column 6, :end-line 1906, :column 3, :line 1906, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1906, :column 4, :line 1906, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1904, :column 7, :line 1904, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number [^{:end-column 6, :end-line 1906, :column 4, :line 1906, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1906, :column 3, :line 1906, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1906, :column 4, :line 1906, :file "cljs/core.cljs"} x]), :doc "Coerce to int by stripping decimal places.", :end-column 21, :end-line 1904, :column 7, :line 1904, :file "cljs/core.cljs"} unchecked-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 1412, :column 15, :line 1412, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1412, :column 16, :line 1412, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1412, :column 7, :line 1412, :file "cljs/core.cljs"} js-keys ^{:arglists (^{:end-column 20, :end-line 1412, :column 15, :line 1412, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1412, :column 16, :line 1412, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1412, :column 7, :line 1412, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 20, :end-line 1412, :column 16, :line 1412, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 1412, :column 15, :line 1412, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 1412, :column 16, :line 1412, :file "cljs/core.cljs"} obj]), :end-column 15, :end-line 1412, :column 7, :line 1412, :file "cljs/core.cljs"} js-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4924, :column 10, :line 4924, :file "cljs/core.cljs"} ES6EntriesIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 4924, :column 10, :line 4924, :file "cljs/core.cljs"} ES6EntriesIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 4924, :column 29, :line 4924, :file "cljs/core.cljs"} [^{:mutable true, :end-column 42, :end-line 4924, :column 40, :line 4924, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:arglists (^{:end-column 28, :end-line 2368, :column 25, :line 2368, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2368, :column 26, :line 2368, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2368, :column 8, :line 2368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2368, :column 16, :line 2368, :file "cljs/core.cljs"} keyword? ^{:arglists (^{:end-column 28, :end-line 2368, :column 25, :line 2368, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2368, :column 26, :line 2368, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2368, :column 8, :line 2368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2368, :column 16, :line 2368, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 28, :end-line 2368, :column 26, :line 2368, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 2368, :column 25, :line 2368, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 2368, :column 26, :line 2368, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2368, :column 8, :line 2368, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 2368, :column 16, :line 2368, :file "cljs/core.cljs"} keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2932, :column 18, :line 2932, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2932, :column 19, :line 2932, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2932, :column 7, :line 2932, :file "cljs/core.cljs"} array-iter ^{:arglists (^{:end-column 21, :end-line 2932, :column 18, :line 2932, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2932, :column 19, :line 2932, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2932, :column 7, :line 2932, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayIter [^{:end-column 21, :end-line 2932, :column 19, :line 2932, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2932, :column 18, :line 2932, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2932, :column 19, :line 2932, :file "cljs/core.cljs"} x]), :end-column 18, :end-line 2932, :column 7, :line 2932, :file "cljs/core.cljs"} array-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8240, :column 3, :line 8240, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8240, :column 4, :line 8240, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8238, :column 7, :line 8238, :file "cljs/core.cljs"} force ^{:arglists (^{:end-column 6, :end-line 8240, :column 3, :line 8240, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8240, :column 4, :line 8240, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8238, :column 7, :line 8238, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8240, :column 4, :line 8240, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8240, :column 3, :line 8240, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8240, :column 4, :line 8240, :file "cljs/core.cljs"} x]), :doc "If x is a Delay, returns the (possibly cached) value of its expression, else returns x", :end-column 13, :end-line 8238, :column 7, :line 8238, :file "cljs/core.cljs"} force, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8445, :column 3, :line 8445, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8445, :column 4, :line 8445, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8445, :column 6, :line 8445, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8441, :column 7, :line 8441, :file "cljs/core.cljs"} group-by ^{:arglists (^{:end-column 11, :end-line 8445, :column 3, :line 8445, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8445, :column 4, :line 8445, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8445, :column 6, :line 8445, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8441, :column 7, :line 8441, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 6, :end-line 8445, :column 4, :line 8445, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8445, :column 6, :line 8445, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8445, :column 3, :line 8445, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8445, :column 4, :line 8445, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 8445, :column 6, :line 8445, :file "cljs/core.cljs"} coll]), :doc "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.", :end-column 16, :end-line 8441, :column 7, :line 8441, :file "cljs/core.cljs"} group-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} -rseq ^{:arglists (^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 321, :column 15, :line 321, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 321, :column 16, :line 321, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IReversible, :tag ^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 321, :column 9, :line 321, :file "cljs/core.cljs"} -rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8029, :column 3, :line 8029, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8029, :column 4, :line 8029, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8029, :column 6, :line 8029, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 8027, :column 7, :line 8027, :file "cljs/core.cljs"} prn ^{:arglists (^{:end-column 11, :end-line 8029, :column 3, :line 8029, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8029, :column 4, :line 8029, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8029, :column 6, :line 8029, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 8027, :column 7, :line 8027, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 8029, :column 6, :line 8029, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8029, :column 3, :line 8029, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8029, :column 4, :line 8029, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8029, :column 6, :line 8029, :file "cljs/core.cljs"} objs]), :doc "Same as pr followed by (newline).", :end-column 11, :end-line 8027, :column 7, :line 8027, :file "cljs/core.cljs"} prn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 4474, :column 20, :line 4474, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4474, :column 21, :line 4474, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4474, :column 24, :line 4474, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4474, :column 30, :line 4474, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4474, :column 8, :line 4474, :file "cljs/core.cljs"} tv-pop-tail ^{:arglists (^{:end-column 35, :end-line 4474, :column 20, :line 4474, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4474, :column 21, :line 4474, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4474, :column 24, :line 4474, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4474, :column 30, :line 4474, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4474, :column 8, :line 4474, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 4474, :column 21, :line 4474, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4474, :column 24, :line 4474, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4474, :column 30, :line 4474, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 4474, :column 20, :line 4474, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 4474, :column 21, :line 4474, :file "cljs/core.cljs"} tv ^{:end-column 30, :end-line 4474, :column 24, :line 4474, :file "cljs/core.cljs"} level ^{:end-column 35, :end-line 4474, :column 30, :line 4474, :file "cljs/core.cljs"} node]), :private true, :end-column 20, :end-line 4474, :column 8, :line 4474, :file "cljs/core.cljs"} tv-pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 3306, :column 16, :line 3306, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3306, :column 27, :line 3306, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3306, :column 37, :line 3306, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3306, :column 10, :line 3306, :file "cljs/core.cljs"} ->Atom ^{:arglists ([^{:end-column 22, :end-line 3306, :column 16, :line 3306, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3306, :column 27, :line 3306, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3306, :column 37, :line 3306, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3306, :column 10, :line 3306, :file "cljs/core.cljs"} {:arglists (^cljs.core/Atom [^{:end-column 22, :end-line 3306, :column 16, :line 3306, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3306, :column 27, :line 3306, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3306, :column 37, :line 3306, :file "cljs/core.cljs"} watches]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 3306, :column 16, :line 3306, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3306, :column 27, :line 3306, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3306, :column 37, :line 3306, :file "cljs/core.cljs"} watches]), :factory :positional, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3306, :column 10, :line 3306, :file "cljs/core.cljs"} ->Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 1221, :column 10, :line 1221, :file "cljs/core.cljs"} PersistentHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5961, :column 10, :line 5961, :file "cljs/core.cljs"} PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 86, :end-line 5961, :column 28, :line 5961, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5961, :column 29, :line 5961, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5961, :column 34, :line 5961, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5961, :column 38, :line 5961, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5961, :column 44, :line 5961, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5961, :column 52, :line 5961, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5961, :column 61, :line 5961, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5961, :column 79, :line 5961, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists (^{:end-column 6, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} unchecked-multiply ^{:arglists (^{:end-column 6, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1857, :column 4, :line 1857, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1858, :column 4, :line 1858, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1858, :column 5, :line 1858, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1859, :column 4, :line 1859, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1859, :column 5, :line 1859, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1859, :column 7, :line 1859, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1860, :column 4, :line 1860, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1860, :column 5, :line 1860, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1860, :column 7, :line 1860, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1860, :column 9, :line 1860, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1860, :column 11, :line 1860, :file "cljs/core.cljs"} more]), :doc "Returns the product of nums. (*) returns 1.", :tag ^{:end-column 15, :end-line 1855, :column 8, :line 1855, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1855, :column 15, :line 1855, :file "cljs/core.cljs"} unchecked-multiply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} ArrayNodeSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 5908, :column 23, :line 5908, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 5908, :column 24, :line 5908, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5908, :column 35, :line 5908, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5908, :column 37, :line 5908, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5908, :column 49, :line 5908, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3163, :column 8, :line 3163, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3163, :column 16, :line 3163, :file "cljs/core.cljs"} even? ^{:arglists (^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3163, :column 8, :line 3163, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3163, :column 16, :line 3163, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3165, :column 4, :line 3165, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3165, :column 5, :line 3165, :file "cljs/core.cljs"} n]), :doc "Returns true if n is even, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3163, :column 8, :line 3163, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 3163, :column 16, :line 3163, :file "cljs/core.cljs"} even?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1836, :column 21, :line 1836, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1836, :column 22, :line 1836, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1836, :column 7, :line 1836, :file "cljs/core.cljs"} unchecked-dec ^{:arglists (^{:end-column 24, :end-line 1836, :column 21, :line 1836, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1836, :column 22, :line 1836, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1836, :column 7, :line 1836, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1836, :column 22, :line 1836, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1836, :column 21, :line 1836, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1836, :column 22, :line 1836, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1836, :column 7, :line 1836, :file "cljs/core.cljs"} unchecked-dec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 52, :end-line 5722, :column 39, :line 5722, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5722, :column 40, :line 5722, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5722, :column 44, :line 5722, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5722, :column 48, :line 5722, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5722, :column 8, :line 5722, :file "cljs/core.cljs"} hash-collision-node-find-index ^{:arglists (^{:end-column 52, :end-line 5722, :column 39, :line 5722, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5722, :column 40, :line 5722, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5722, :column 44, :line 5722, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5722, :column 48, :line 5722, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5722, :column 8, :line 5722, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 44, :end-line 5722, :column 40, :line 5722, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5722, :column 44, :line 5722, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5722, :column 48, :line 5722, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 52, :end-line 5722, :column 39, :line 5722, :file "cljs/core.cljs"} [^{:end-column 44, :end-line 5722, :column 40, :line 5722, :file "cljs/core.cljs"} arr ^{:end-column 48, :end-line 5722, :column 44, :line 5722, :file "cljs/core.cljs"} cnt ^{:end-column 52, :end-line 5722, :column 48, :line 5722, :file "cljs/core.cljs"} key]), :private true, :end-column 39, :end-line 5722, :column 8, :line 5722, :file "cljs/core.cljs"} hash-collision-node-find-index, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 5079, :column 32, :line 5079, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5079, :column 33, :line 5079, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5079, :column 37, :line 5079, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5079, :column 39, :line 5079, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 5079, :column 7, :line 5079, :file "cljs/core.cljs"} persistent-array-map-seq ^{:arglists (^{:end-column 45, :end-line 5079, :column 32, :line 5079, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5079, :column 33, :line 5079, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5079, :column 37, :line 5079, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5079, :column 39, :line 5079, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 5079, :column 7, :line 5079, :file "cljs/core.cljs"} {:arglists ([^{:end-column 37, :end-line 5079, :column 33, :line 5079, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5079, :column 37, :line 5079, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5079, :column 39, :line 5079, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 5079, :column 32, :line 5079, :file "cljs/core.cljs"} [^{:end-column 37, :end-line 5079, :column 33, :line 5079, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5079, :column 37, :line 5079, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5079, :column 39, :line 5079, :file "cljs/core.cljs"} _meta]), :end-column 32, :end-line 5079, :column 7, :line 5079, :file "cljs/core.cljs"} persistent-array-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 7515, :column 10, :line 7515, :file "cljs/core.cljs"} RangeIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 7515, :column 10, :line 7515, :file "cljs/core.cljs"} RangeIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 7515, :column 24, :line 7515, :file "cljs/core.cljs"} [^{:mutable true, :end-column 37, :end-line 7515, :column 35, :line 7515, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 7515, :column 37, :line 7515, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 7515, :column 41, :line 7515, :file "cljs/core.cljs"} step], :protocols #{Object}}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 3002, :column 10, :line 3002, :file "cljs/core.cljs"} MultiStepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 23, :end-line 3002, :column 10, :line 3002, :file "cljs/core.cljs"} MultiStepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 42, :end-line 3002, :column 23, :line 3002, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 3002, :column 24, :line 3002, :file "cljs/core.cljs"} xform ^{:end-column 36, :end-line 3002, :column 30, :line 3002, :file "cljs/core.cljs"} iters ^{:end-column 42, :end-line 3002, :column 36, :line 3002, :file "cljs/core.cljs"} nexts], :protocols #{Object}}, ^{:arglists (^{:end-column 17, :end-line 2664, :column 4, :line 2664, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2664, :column 5, :line 2664, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2668, :column 4, :line 2668, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2668, :column 5, :line 2668, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2668, :column 10, :line 2668, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} double-array ^{:arglists (^{:end-column 17, :end-line 2664, :column 4, :line 2664, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2664, :column 5, :line 2664, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2668, :column 4, :line 2668, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2668, :column 5, :line 2668, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2668, :column 10, :line 2668, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2664, :column 5, :line 2664, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 10, :end-line 2668, :column 5, :line 2668, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2668, :column 10, :line 2668, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2664, :column 4, :line 2664, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2664, :column 5, :line 2664, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2668, :column 4, :line 2668, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2668, :column 5, :line 2668, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2668, :column 10, :line 2668, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2663, :column 7, :line 2663, :file "cljs/core.cljs"} double-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 2197, :column 21, :line 2197, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} ->EmptyList ^{:arglists ([^{:end-column 26, :end-line 2197, :column 21, :line 2197, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} {:arglists (^cljs.core/EmptyList [^{:end-column 26, :end-line 2197, :column 21, :line 2197, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 2197, :column 21, :line 2197, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} ->EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 31, :end-line 955, :column 20, :line 955, :file "cljs/core.cljs"} seq-reduce ^{:arglists (^{:end-column 12, :end-line 1600, :column 4, :line 1600, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1600, :column 5, :line 1600, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1600, :column 7, :line 1600, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1604, :column 5, :line 1604, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1604, :column 7, :line 1604, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1604, :column 11, :line 1604, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1599, :column 8, :line 1599, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1600, :column 5, :line 1600, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1600, :column 7, :line 1600, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 1604, :column 5, :line 1604, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1604, :column 7, :line 1604, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1604, :column 11, :line 1604, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1600, :column 4, :line 1600, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1600, :column 5, :line 1600, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1600, :column 7, :line 1600, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 1604, :column 4, :line 1604, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1604, :column 5, :line 1604, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 1604, :column 7, :line 1604, :file "cljs/core.cljs"} val ^{:end-column 16, :end-line 1604, :column 11, :line 1604, :file "cljs/core.cljs"} coll]), :private true, :end-column 19, :end-line 1599, :column 8, :line 1599, :file "cljs/core.cljs"} seq-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 2712, :column 3, :line 2712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2712, :column 4, :line 2712, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2711, :column 7, :line 2711, :file "cljs/core.cljs"} spread ^{:arglists (^{:end-column 12, :end-line 2712, :column 3, :line 2712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2712, :column 4, :line 2712, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2711, :column 7, :line 2711, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 2712, :column 4, :line 2712, :file "cljs/core.cljs"} arglist]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2712, :column 3, :line 2712, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 2712, :column 4, :line 2712, :file "cljs/core.cljs"} arglist]), :end-column 14, :end-line 2711, :column 7, :line 2711, :file "cljs/core.cljs"} spread, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 6266, :column 21, :line 6266, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6266, :column 22, :line 6266, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6266, :column 26, :line 6266, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6266, :column 30, :line 6266, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6266, :column 34, :line 6266, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6266, :column 8, :line 6266, :file "cljs/core.cljs"} balance-left ^{:arglists (^{:end-column 40, :end-line 6266, :column 21, :line 6266, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6266, :column 22, :line 6266, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6266, :column 26, :line 6266, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6266, :column 30, :line 6266, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6266, :column 34, :line 6266, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6266, :column 8, :line 6266, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 6266, :column 22, :line 6266, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6266, :column 26, :line 6266, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6266, :column 30, :line 6266, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6266, :column 34, :line 6266, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6266, :column 21, :line 6266, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 6266, :column 22, :line 6266, :file "cljs/core.cljs"} key ^{:end-column 30, :end-line 6266, :column 26, :line 6266, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6266, :column 30, :line 6266, :file "cljs/core.cljs"} ins ^{:end-column 40, :end-line 6266, :column 34, :line 6266, :file "cljs/core.cljs"} right]), :private true, :end-column 21, :end-line 6266, :column 8, :line 6266, :file "cljs/core.cljs"} balance-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 2254, :column 17, :line 2254, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2254, :column 18, :line 2254, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2254, :column 8, :line 2254, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2254, :column 12, :line 2254, :file "cljs/core.cljs"} rseq ^{:arglists (^{:end-column 23, :end-line 2254, :column 17, :line 2254, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2254, :column 18, :line 2254, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2254, :column 8, :line 2254, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2254, :column 12, :line 2254, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 321, :column 5, :line 321, :file "cljs/core.cljs"} clj [^{:end-column 23, :end-line 2254, :column 18, :line 2254, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 2254, :column 17, :line 2254, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 2254, :column 18, :line 2254, :file "cljs/core.cljs"} coll]), :tag ^{:end-column 12, :end-line 2254, :column 8, :line 2254, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 2254, :column 12, :line 2254, :file "cljs/core.cljs"} rseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8893, :column 3, :line 8893, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8893, :column 4, :line 8893, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8888, :column 7, :line 8888, :file "cljs/core.cljs"} ex-cause ^{:arglists (^{:end-column 7, :end-line 8893, :column 3, :line 8893, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8893, :column 4, :line 8893, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8888, :column 7, :line 8888, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8893, :column 4, :line 8893, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8893, :column 3, :line 8893, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8893, :column 4, :line 8893, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.", :end-column 16, :end-line 8888, :column 7, :line 8888, :file "cljs/core.cljs"} ex-cause, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 21, :end-line 388, :column 14, :line 388, :file "cljs/core.cljs"} IReset ^{:protocol-info {:methods {^{:end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 21, :end-line 388, :column 14, :line 388, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} -reset! [^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]]}}, :protocol-symbol true, :end-column 21, :end-line 388, :column 14, :line 388, :file "cljs/core.cljs"} IReset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 35, :end-line 237, :column 14, :line 237, :file "cljs/core.cljs"} IEmptyableCollection ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 35, :end-line 237, :column 14, :line 237, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 238, :column 4, :line 238, :file "cljs/core.cljs"} -empty [^{:end-column 17, :end-line 238, :column 11, :line 238, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 238, :column 12, :line 238, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 35, :end-line 237, :column 14, :line 237, :file "cljs/core.cljs"} IEmptyableCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 4997, :column 27, :line 4997, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4997, :column 28, :line 4997, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4997, :column 30, :line 4997, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4997, :column 8, :line 4997, :file "cljs/core.cljs"} array-map-index-of ^{:arglists (^{:end-column 32, :end-line 4997, :column 27, :line 4997, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4997, :column 28, :line 4997, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4997, :column 30, :line 4997, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4997, :column 8, :line 4997, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 4997, :column 28, :line 4997, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4997, :column 30, :line 4997, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 4997, :column 27, :line 4997, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 4997, :column 28, :line 4997, :file "cljs/core.cljs"} m ^{:end-column 32, :end-line 4997, :column 30, :line 4997, :file "cljs/core.cljs"} k]), :private true, :end-column 27, :end-line 4997, :column 8, :line 4997, :file "cljs/core.cljs"} array-map-index-of, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8884, :column 3, :line 8884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8884, :column 4, :line 8884, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8880, :column 7, :line 8880, :file "cljs/core.cljs"} ex-message ^{:arglists (^{:end-column 7, :end-line 8884, :column 3, :line 8884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8884, :column 4, :line 8884, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8880, :column 7, :line 8880, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8884, :column 4, :line 8884, :file "cljs/core.cljs"} ex]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8884, :column 3, :line 8884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8884, :column 4, :line 8884, :file "cljs/core.cljs"} ex]), :doc "Alpha - subject to change.\n  Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil.", :end-column 18, :end-line 8880, :column 7, :line 8880, :file "cljs/core.cljs"} ex-message, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7847, :column 20, :line 7847, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7847, :column 21, :line 7847, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7847, :column 7, :line 7847, :file "cljs/core.cljs"} string-print ^{:arglists (^{:end-column 23, :end-line 7847, :column 20, :line 7847, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7847, :column 21, :line 7847, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7847, :column 7, :line 7847, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 23, :end-line 7847, :column 21, :line 7847, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7847, :column 20, :line 7847, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 7847, :column 21, :line 7847, :file "cljs/core.cljs"} x]), :end-column 20, :end-line 7847, :column 7, :line 7847, :file "cljs/core.cljs"} string-print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1813, :column 21, :line 1813, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1813, :column 22, :line 1813, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1813, :column 8, :line 1813, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1813, :column 15, :line 1813, :file "cljs/core.cljs"} float ^{:arglists (^{:end-column 24, :end-line 1813, :column 21, :line 1813, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1813, :column 22, :line 1813, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1813, :column 8, :line 1813, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1813, :column 15, :line 1813, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 1813, :column 22, :line 1813, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1813, :column 21, :line 1813, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1813, :column 22, :line 1813, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1813, :column 8, :line 1813, :file "cljs/core.cljs"} number, :end-column 21, :end-line 1813, :column 15, :line 1813, :file "cljs/core.cljs"} float, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 17, :end-line 8218, :column 1, :line 8218, :file "cljs/core.cljs"} fixture2 ^{:end-column 17, :end-line 8218, :column 1, :line 8218, :file "cljs/core.cljs"} {:tag number, :op :var, :name ^{:end-column 17, :end-line 8218, :column 1, :line 8218, :file "cljs/core.cljs"} fixture2, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 22, :end-line 317, :column 14, :line 317, :file "cljs/core.cljs"} IRecord ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 22, :end-line 317, :column 14, :line 317, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 22, :end-line 317, :column 14, :line 317, :file "cljs/core.cljs"} IRecord, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 3352, :column 10, :line 3352, :file "cljs/core.cljs"} pr-str ^{:arglists (^{:end-column 11, :end-line 7987, :column 3, :line 7987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7987, :column 4, :line 7987, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7987, :column 6, :line 7987, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7985, :column 7, :line 7985, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7987, :column 6, :line 7987, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7987, :column 3, :line 7987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7987, :column 4, :line 7987, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7987, :column 6, :line 7987, :file "cljs/core.cljs"} objs]), :doc "pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.", :end-column 14, :end-line 7985, :column 7, :line 7985, :file "cljs/core.cljs"} pr-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 3968, :column 32, :line 3968, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3968, :column 33, :line 3968, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3968, :column 8, :line 3968, :file "cljs/core.cljs"} first-array-for-longvec ^{:arglists (^{:end-column 36, :end-line 3968, :column 32, :line 3968, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3968, :column 33, :line 3968, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3968, :column 8, :line 3968, :file "cljs/core.cljs"} {:arglists ([^{:end-column 36, :end-line 3968, :column 33, :line 3968, :file "cljs/core.cljs"} pv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 3968, :column 32, :line 3968, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 3968, :column 33, :line 3968, :file "cljs/core.cljs"} pv]), :private true, :end-column 32, :end-line 3968, :column 8, :line 3968, :file "cljs/core.cljs"} first-array-for-longvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 4946, :column 32, :line 4946, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 4946, :column 33, :line 4946, :file "cljs/core.cljs"} coll]), :end-column 32, :end-line 4946, :column 7, :line 4946, :file "cljs/core.cljs"} es6-set-entries-iterator ^{:arglists (^{:end-column 38, :end-line 4946, :column 32, :line 4946, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 4946, :column 33, :line 4946, :file "cljs/core.cljs"} coll]), :end-column 32, :end-line 4946, :column 7, :line 4946, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6SetEntriesIterator [^{:end-column 38, :end-line 4946, :column 33, :line 4946, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 4946, :column 32, :line 4946, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 4946, :column 33, :line 4946, :file "cljs/core.cljs"} coll]), :end-column 32, :end-line 4946, :column 7, :line 4946, :file "cljs/core.cljs"} es6-set-entries-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2731, :column 5, :line 2731, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2731, :column 7, :line 2731, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2731, :column 9, :line 2731, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2731, :column 11, :line 2731, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2719, :column 7, :line 2719, :file "cljs/core.cljs"} concat ^{:arglists (^{:end-column 6, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2731, :column 5, :line 2731, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2731, :column 7, :line 2731, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2731, :column 9, :line 2731, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2731, :column 11, :line 2731, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2719, :column 7, :line 2719, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} y] ^cljs.core/LazySeq [^{:end-column 7, :end-line 2731, :column 5, :line 2731, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2731, :column 7, :line 2731, :file "cljs/core.cljs"} y & ^{:end-column 14, :end-line 2731, :column 11, :line 2731, :file "cljs/core.cljs"} zs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2721, :column 4, :line 2721, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2722, :column 4, :line 2722, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2722, :column 5, :line 2722, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2723, :column 4, :line 2723, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2723, :column 5, :line 2723, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2723, :column 7, :line 2723, :file "cljs/core.cljs"} y] ^{:end-column 14, :end-line 2731, :column 4, :line 2731, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2731, :column 5, :line 2731, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2731, :column 7, :line 2731, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2731, :column 9, :line 2731, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 2731, :column 11, :line 2731, :file "cljs/core.cljs"} zs]), :doc "Returns a lazy seq representing the concatenation of the elements in the supplied colls.", :end-column 14, :end-line 2719, :column 7, :line 2719, :file "cljs/core.cljs"} concat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} -methods ^{:arglists (^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} -methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 32, :end-line 287, :column 14, :line 287, :file "cljs/core.cljs"} IDerefWithTimeout ^{:protocol-info {:methods {^{:end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 32, :end-line 287, :column 14, :line 287, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 24, :end-line 288, :column 4, :line 288, :file "cljs/core.cljs"} -deref-with-timeout [^{:end-column 44, :end-line 288, :column 24, :line 288, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 288, :column 25, :line 288, :file "cljs/core.cljs"} o ^{:end-column 32, :end-line 288, :column 27, :line 288, :file "cljs/core.cljs"} msec ^{:end-column 44, :end-line 288, :column 32, :line 288, :file "cljs/core.cljs"} timeout-val]]}}, :protocol-symbol true, :end-column 32, :end-line 287, :column 14, :line 287, :file "cljs/core.cljs"} IDerefWithTimeout, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 601, :column 8, :line 601, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 596, :column 7, :line 596, :file "cljs/core.cljs"} symbol ^{:arglists (^{:end-column 10, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 601, :column 8, :line 601, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 596, :column 7, :line 596, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} name] ^cljs.core/Symbol [^{:end-column 8, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 601, :column 8, :line 601, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 597, :column 4, :line 597, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 597, :column 5, :line 597, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 601, :column 4, :line 601, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 601, :column 5, :line 601, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 601, :column 8, :line 601, :file "cljs/core.cljs"} name]), :end-column 14, :end-line 596, :column 7, :line 596, :file "cljs/core.cljs"} symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2615, :column 3, :line 2615, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2615, :column 4, :line 2615, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2612, :column 7, :line 2612, :file "cljs/core.cljs"} to-array-2d ^{:arglists (^{:end-column 9, :end-line 2615, :column 3, :line 2615, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2615, :column 4, :line 2615, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2612, :column 7, :line 2612, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 9, :end-line 2615, :column 4, :line 2615, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2615, :column 3, :line 2615, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2615, :column 4, :line 2615, :file "cljs/core.cljs"} coll]), :doc "Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.", :end-column 19, :end-line 2612, :column 7, :line 2612, :file "cljs/core.cljs"} to-array-2d, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4333, :column 10, :line 4333, :file "cljs/core.cljs"} Subvec {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 17, :end-line 4333, :column 10, :line 4333, :file "cljs/core.cljs"} Subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 4333, :column 17, :line 4333, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4333, :column 18, :line 4333, :file "cljs/core.cljs"} meta ^{:end-column 25, :end-line 4333, :column 23, :line 4333, :file "cljs/core.cljs"} v ^{:end-column 31, :end-line 4333, :column 25, :line 4333, :file "cljs/core.cljs"} start ^{:end-column 35, :end-line 4333, :column 31, :line 4333, :file "cljs/core.cljs"} end ^{:mutable true, :end-column 52, :end-line 4333, :column 45, :line 4333, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8857, :column 10, :line 8857, :file "cljs/core.cljs"} ExceptionInfo {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 24, :end-line 8857, :column 10, :line 8857, :file "cljs/core.cljs"} ExceptionInfo, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 44, :end-line 8857, :column 24, :line 8857, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 8857, :column 25, :line 8857, :file "cljs/core.cljs"} message ^{:end-column 38, :end-line 8857, :column 33, :line 8857, :file "cljs/core.cljs"} data ^{:end-column 44, :end-line 8857, :column 38, :line 8857, :file "cljs/core.cljs"} cause], :protocols #{}}, ^{:declared true, :end-column 14, :end-line 1875, :column 10, :line 1875, :file "cljs/core.cljs"} mod ^{:arglists (^{:end-column 8, :end-line 1935, :column 3, :line 1935, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1935, :column 4, :line 1935, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1935, :column 6, :line 1935, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1935, :column 4, :line 1935, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1935, :column 6, :line 1935, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1935, :column 3, :line 1935, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1935, :column 4, :line 1935, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1935, :column 6, :line 1935, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div. Truncates toward negative infinity.", :end-column 11, :end-line 1933, :column 7, :line 1933, :file "cljs/core.cljs"} mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 19, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} ISet ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentHashSet), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 19, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -disjoin [^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 19, :end-line 274, :column 14, :line 274, :file "cljs/core.cljs"} ISet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1335, :column 3, :line 1335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1335, :column 4, :line 1335, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1331, :column 7, :line 1331, :file "cljs/core.cljs"} pop ^{:arglists (^{:end-column 9, :end-line 1335, :column 3, :line 1335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1335, :column 4, :line 1335, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1331, :column 7, :line 1331, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1335, :column 4, :line 1335, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1335, :column 3, :line 1335, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1335, :column 4, :line 1335, :file "cljs/core.cljs"} coll]), :doc "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast.", :end-column 11, :end-line 1331, :column 7, :line 1331, :file "cljs/core.cljs"} pop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 23, :end-line 341, :column 14, :line 341, :file "cljs/core.cljs"} IPending ^{:impls (cljs.core/Delay), :protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 23, :end-line 341, :column 14, :line 341, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 342, :column 13, :line 342, :file "cljs/core.cljs"} -realized? [^{:end-column 27, :end-line 342, :column 24, :line 342, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 342, :column 25, :line 342, :file "cljs/core.cljs"} d]]}}, :protocol-symbol true, :end-column 23, :end-line 341, :column 14, :line 341, :file "cljs/core.cljs"} IPending, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -entry-key ^{:arglists (^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]), :protocol cljs.core/ISorted, :end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -entry-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 4002, :column 17, :line 4002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4002, :column 18, :line 4002, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4002, :column 21, :line 4002, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 4002, :column 27, :line 4002, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 4002, :column 8, :line 4002, :file "cljs/core.cljs"} pop-tail ^{:arglists (^{:end-column 32, :end-line 4002, :column 17, :line 4002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4002, :column 18, :line 4002, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4002, :column 21, :line 4002, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 4002, :column 27, :line 4002, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 4002, :column 8, :line 4002, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 4002, :column 18, :line 4002, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4002, :column 21, :line 4002, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 4002, :column 27, :line 4002, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 4002, :column 17, :line 4002, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 4002, :column 18, :line 4002, :file "cljs/core.cljs"} pv ^{:end-column 27, :end-line 4002, :column 21, :line 4002, :file "cljs/core.cljs"} level ^{:end-column 32, :end-line 4002, :column 27, :line 4002, :file "cljs/core.cljs"} node]), :private true, :end-column 17, :end-line 4002, :column 8, :line 4002, :file "cljs/core.cljs"} pop-tail, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 2796, :column 4, :line 2796, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2796, :column 5, :line 2796, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2796, :column 11, :line 2796, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2798, :column 11, :line 2798, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2798, :column 15, :line 2798, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2798, :column 17, :line 2798, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2794, :column 7, :line 2794, :file "cljs/core.cljs"} dissoc! ^{:arglists (^{:end-column 15, :end-line 2796, :column 4, :line 2796, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2796, :column 5, :line 2796, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2796, :column 11, :line 2796, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2798, :column 11, :line 2798, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2798, :column 15, :line 2798, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2798, :column 17, :line 2798, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2794, :column 7, :line 2794, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2796, :column 5, :line 2796, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2796, :column 11, :line 2796, :file "cljs/core.cljs"} key] ^^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2798, :column 11, :line 2798, :file "cljs/core.cljs"} key & ^{:end-column 20, :end-line 2798, :column 17, :line 2798, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 2796, :column 4, :line 2796, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2796, :column 5, :line 2796, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2796, :column 11, :line 2796, :file "cljs/core.cljs"} key] ^{:end-column 20, :end-line 2798, :column 4, :line 2798, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2798, :column 5, :line 2798, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2798, :column 11, :line 2798, :file "cljs/core.cljs"} key ^{:end-column 17, :end-line 2798, :column 15, :line 2798, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2798, :column 17, :line 2798, :file "cljs/core.cljs"} ks]), :doc "Returns a transient map that doesn't contain a mapping for key(s).", :end-column 15, :end-line 2794, :column 7, :line 2794, :file "cljs/core.cljs"} dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7700, :column 4, :line 7700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7700, :column 5, :line 7700, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7700, :column 7, :line 7700, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7705, :column 4, :line 7705, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7705, :column 5, :line 7705, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7705, :column 7, :line 7705, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7705, :column 12, :line 7705, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7697, :column 7, :line 7697, :file "cljs/core.cljs"} reductions ^{:arglists (^{:end-column 12, :end-line 7700, :column 4, :line 7700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7700, :column 5, :line 7700, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7700, :column 7, :line 7700, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7705, :column 4, :line 7705, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7705, :column 5, :line 7705, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7705, :column 7, :line 7705, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7705, :column 12, :line 7705, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7697, :column 7, :line 7697, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 7700, :column 5, :line 7700, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7700, :column 7, :line 7700, :file "cljs/core.cljs"} coll] ^cljs.core/Cons [^{:end-column 7, :end-line 7705, :column 5, :line 7705, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7705, :column 7, :line 7705, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7705, :column 12, :line 7705, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7700, :column 4, :line 7700, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7700, :column 5, :line 7700, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7700, :column 7, :line 7700, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7705, :column 4, :line 7705, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7705, :column 5, :line 7705, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7705, :column 7, :line 7705, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 7705, :column 12, :line 7705, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.", :end-column 18, :end-line 7697, :column 7, :line 7697, :file "cljs/core.cljs"} reductions, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 863, :column 3, :line 863, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 863, :column 4, :line 863, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 861, :column 8, :line 861, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 861, :column 16, :line 861, :file "cljs/core.cljs"} indexed? ^{:arglists (^{:end-column 6, :end-line 863, :column 3, :line 863, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 863, :column 4, :line 863, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 861, :column 8, :line 861, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 861, :column 16, :line 861, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 863, :column 4, :line 863, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 863, :column 3, :line 863, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 863, :column 4, :line 863, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements nth in constant time", :tag ^{:end-column 16, :end-line 861, :column 8, :line 861, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 861, :column 16, :line 861, :file "cljs/core.cljs"} indexed?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1717, :column 4, :line 1717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1717, :column 5, :line 1717, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1718, :column 4, :line 1718, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1718, :column 5, :line 1718, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1718, :column 9, :line 1718, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1718, :column 11, :line 1718, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1713, :column 8, :line 1713, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1713, :column 15, :line 1713, :file "cljs/core.cljs"} - ^{:arglists (^{:end-column 7, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1717, :column 4, :line 1717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1717, :column 5, :line 1717, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1718, :column 4, :line 1718, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1718, :column 5, :line 1718, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1718, :column 9, :line 1718, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1718, :column 11, :line 1718, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1713, :column 8, :line 1713, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1713, :column 15, :line 1713, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1717, :column 5, :line 1717, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1718, :column 5, :line 1718, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1718, :column 11, :line 1718, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1716, :column 4, :line 1716, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1716, :column 5, :line 1716, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1717, :column 4, :line 1717, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1717, :column 5, :line 1717, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1717, :column 7, :line 1717, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1718, :column 4, :line 1718, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1718, :column 5, :line 1718, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1718, :column 7, :line 1718, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1718, :column 9, :line 1718, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1718, :column 11, :line 1718, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1713, :column 8, :line 1713, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1713, :column 15, :line 1713, :file "cljs/core.cljs"} -, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} -equiv ^{:arglists (^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 303, :column 20, :line 303, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 303, :column 21, :line 303, :file "cljs/core.cljs"} o ^{:end-column 29, :end-line 303, :column 23, :line 303, :file "cljs/core.cljs"} other]), :protocol cljs.core/IEquiv, :tag ^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 303, :column 13, :line 303, :file "cljs/core.cljs"} -equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 37, :end-line 7515, :column 35, :line 7515, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 7515, :column 37, :line 7515, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 7515, :column 41, :line 7515, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 7515, :column 10, :line 7515, :file "cljs/core.cljs"} ->RangeIterator ^{:arglists ([^{:mutable true, :end-column 37, :end-line 7515, :column 35, :line 7515, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 7515, :column 37, :line 7515, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 7515, :column 41, :line 7515, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 7515, :column 10, :line 7515, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangeIterator [^{:mutable true, :end-column 37, :end-line 7515, :column 35, :line 7515, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 7515, :column 37, :line 7515, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 7515, :column 41, :line 7515, :file "cljs/core.cljs"} step]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 37, :end-line 7515, :column 35, :line 7515, :file "cljs/core.cljs"} i ^{:end-column 41, :end-line 7515, :column 37, :line 7515, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 7515, :column 41, :line 7515, :file "cljs/core.cljs"} step]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 24, :end-line 7515, :column 10, :line 7515, :file "cljs/core.cljs"} ->RangeIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 5625, :column 21, :line 5625, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5625, :column 36, :line 5625, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5625, :column 50, :line 5625, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 5625, :column 10, :line 5625, :file "cljs/core.cljs"} ->ArrayNode ^{:arglists ([^{:end-column 26, :end-line 5625, :column 21, :line 5625, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5625, :column 36, :line 5625, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5625, :column 50, :line 5625, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 5625, :column 10, :line 5625, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayNode [^{:end-column 26, :end-line 5625, :column 21, :line 5625, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5625, :column 36, :line 5625, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5625, :column 50, :line 5625, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 5625, :column 21, :line 5625, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5625, :column 36, :line 5625, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5625, :column 50, :line 5625, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 5625, :column 10, :line 5625, :file "cljs/core.cljs"} ->ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 2786, :column 4, :line 2786, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2786, :column 5, :line 2786, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2786, :column 11, :line 2786, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2786, :column 15, :line 2786, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2788, :column 4, :line 2788, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2788, :column 5, :line 2788, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2788, :column 11, :line 2788, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2788, :column 15, :line 2788, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2788, :column 19, :line 2788, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2788, :column 21, :line 2788, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} assoc! ^{:arglists (^{:end-column 19, :end-line 2786, :column 4, :line 2786, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2786, :column 5, :line 2786, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2786, :column 11, :line 2786, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2786, :column 15, :line 2786, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2788, :column 4, :line 2788, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2788, :column 5, :line 2788, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2788, :column 11, :line 2788, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2788, :column 15, :line 2788, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2788, :column 19, :line 2788, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2788, :column 21, :line 2788, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2786, :column 5, :line 2786, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2786, :column 11, :line 2786, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2786, :column 15, :line 2786, :file "cljs/core.cljs"} val] ^^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj [^{:end-column 11, :end-line 2788, :column 5, :line 2788, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2788, :column 11, :line 2788, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2788, :column 15, :line 2788, :file "cljs/core.cljs"} val & ^{:end-column 25, :end-line 2788, :column 21, :line 2788, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 2786, :column 4, :line 2786, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2786, :column 5, :line 2786, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2786, :column 11, :line 2786, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2786, :column 15, :line 2786, :file "cljs/core.cljs"} val] ^{:end-column 25, :end-line 2788, :column 4, :line 2788, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 2788, :column 5, :line 2788, :file "cljs/core.cljs"} tcoll ^{:end-column 15, :end-line 2788, :column 11, :line 2788, :file "cljs/core.cljs"} key ^{:end-column 19, :end-line 2788, :column 15, :line 2788, :file "cljs/core.cljs"} val ^{:end-column 21, :end-line 2788, :column 19, :line 2788, :file "cljs/core.cljs"} & ^{:end-column 25, :end-line 2788, :column 21, :line 2788, :file "cljs/core.cljs"} kvs]), :doc "When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.", :end-column 14, :end-line 2782, :column 7, :line 2782, :file "cljs/core.cljs"} assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7331, :column 4, :line 7331, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7332, :column 4, :line 7332, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7332, :column 5, :line 7332, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7330, :column 7, :line 7330, :file "cljs/core.cljs"} hash-set ^{:arglists (^{:end-column 6, :end-line 7331, :column 4, :line 7331, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7332, :column 4, :line 7332, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7332, :column 5, :line 7332, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7330, :column 7, :line 7330, :file "cljs/core.cljs"} {:arglists (^cljs.core/ISet [] [& ^{:end-column 12, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7331, :column 4, :line 7331, :file "cljs/core.cljs"} [] ^{:end-column 12, :end-line 7332, :column 4, :line 7332, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7332, :column 5, :line 7332, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7332, :column 7, :line 7332, :file "cljs/core.cljs"} keys]), :end-column 16, :end-line 7330, :column 7, :line 7330, :file "cljs/core.cljs"} hash-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1672, :column 4, :line 1672, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1672, :column 5, :line 1672, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1672, :column 7, :line 1672, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1672, :column 12, :line 1672, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} reduce-kv ^{:arglists (^{:end-column 17, :end-line 1672, :column 4, :line 1672, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1672, :column 5, :line 1672, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1672, :column 7, :line 1672, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1672, :column 12, :line 1672, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1672, :column 5, :line 1672, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1672, :column 7, :line 1672, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1672, :column 12, :line 1672, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1672, :column 4, :line 1672, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1672, :column 5, :line 1672, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 1672, :column 7, :line 1672, :file "cljs/core.cljs"} init ^{:end-column 17, :end-line 1672, :column 12, :line 1672, :file "cljs/core.cljs"} coll]), :doc "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.", :end-column 17, :end-line 1665, :column 7, :line 1665, :file "cljs/core.cljs"} reduce-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 3357, :column 3, :line 3357, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3357, :column 4, :line 3357, :file "cljs/core.cljs"} a ^{:end-column 16, :end-line 3357, :column 6, :line 3357, :file "cljs/core.cljs"} new-value]), :doc "Sets the value of atom to newval without regard for the\n  current value. Returns newval.", :end-column 14, :end-line 3354, :column 7, :line 3354, :file "cljs/core.cljs"} reset! ^{:declared true, :end-column 56, :end-line 5353, :column 49, :line 5353, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 56, :end-line 5353, :column 49, :line 5353, :file "cljs/core.cljs"} reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 2078, :column 14, :line 2078, :file "cljs/core.cljs"} name ^{:arglists (^{:end-column 6, :end-line 7385, :column 3, :line 7385, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7385, :column 4, :line 7385, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 7383, :column 7, :line 7383, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7385, :column 4, :line 7385, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7385, :column 3, :line 7385, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7385, :column 4, :line 7385, :file "cljs/core.cljs"} x]), :doc "Returns the name String of a string, symbol or keyword.", :end-column 12, :end-line 7383, :column 7, :line 7383, :file "cljs/core.cljs"} name, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 6469, :column 19, :line 6469, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6469, :column 23, :line 6469, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6469, :column 27, :line 6469, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6469, :column 32, :line 6469, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6469, :column 48, :line 6469, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 6469, :column 10, :line 6469, :file "cljs/core.cljs"} ->RedNode ^{:arglists ([^{:end-column 23, :end-line 6469, :column 19, :line 6469, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6469, :column 23, :line 6469, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6469, :column 27, :line 6469, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6469, :column 32, :line 6469, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6469, :column 48, :line 6469, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 6469, :column 10, :line 6469, :file "cljs/core.cljs"} {:arglists (^cljs.core/RedNode [^{:end-column 23, :end-line 6469, :column 19, :line 6469, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6469, :column 23, :line 6469, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6469, :column 27, :line 6469, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6469, :column 32, :line 6469, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6469, :column 48, :line 6469, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 6469, :column 19, :line 6469, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6469, :column 23, :line 6469, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6469, :column 27, :line 6469, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6469, :column 32, :line 6469, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6469, :column 48, :line 6469, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 6469, :column 10, :line 6469, :file "cljs/core.cljs"} ->RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 3976, :column 28, :line 3976, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3976, :column 29, :line 3976, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3976, :column 32, :line 3976, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3976, :column 8, :line 3976, :file "cljs/core.cljs"} unchecked-array-for ^{:arglists (^{:end-column 34, :end-line 3976, :column 28, :line 3976, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3976, :column 29, :line 3976, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3976, :column 32, :line 3976, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3976, :column 8, :line 3976, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 3976, :column 29, :line 3976, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3976, :column 32, :line 3976, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 3976, :column 28, :line 3976, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 3976, :column 29, :line 3976, :file "cljs/core.cljs"} pv ^{:end-column 34, :end-line 3976, :column 32, :line 3976, :file "cljs/core.cljs"} i]), :private true, :end-column 28, :end-line 3976, :column 8, :line 3976, :file "cljs/core.cljs"} unchecked-array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} Fn ^{:impls (cljs.core/MetaFn ^{:end-column 23, :end-line 754, :column 14, :line 754, :file "cljs/core.cljs"} function), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 17, :end-line 203, :column 14, :line 203, :file "cljs/core.cljs"} Fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} ffirst ^{:arglists (^{:end-column 9, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1017, :column 3, :line 1017, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1017, :column 4, :line 1017, :file "cljs/core.cljs"} coll]), :doc "Same as (first (first x))", :end-column 14, :end-line 1015, :column 7, :line 1015, :file "cljs/core.cljs"} ffirst, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7336, :column 7, :line 7336, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7334, :column 7, :line 7334, :file "cljs/core.cljs"} sorted-set ^{:arglists (^{:end-column 12, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7336, :column 7, :line 7336, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7334, :column 7, :line 7334, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 12, :end-line 7336, :column 7, :line 7336, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 7336, :column 4, :line 7336, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7336, :column 5, :line 7336, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 7336, :column 7, :line 7336, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys.", :end-column 18, :end-line 7334, :column 7, :line 7334, :file "cljs/core.cljs"} sorted-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7977, :column 3, :line 7977, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7977, :column 4, :line 7977, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7977, :column 9, :line 7977, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7974, :column 8, :line 7974, :file "cljs/core.cljs"} pr-with-opts ^{:arglists (^{:end-column 14, :end-line 7977, :column 3, :line 7977, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7977, :column 4, :line 7977, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7977, :column 9, :line 7977, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7974, :column 8, :line 7974, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 7977, :column 4, :line 7977, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7977, :column 9, :line 7977, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7977, :column 3, :line 7977, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7977, :column 4, :line 7977, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7977, :column 9, :line 7977, :file "cljs/core.cljs"} opts]), :doc "Prints a sequence of objects using string-print, observing all\n  the options given in opts", :private true, :end-column 21, :end-line 7974, :column 8, :line 7974, :file "cljs/core.cljs"} pr-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6717, :column 10, :line 6717, :file "cljs/core.cljs"} PersistentTreeMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6717, :column 10, :line 6717, :file "cljs/core.cljs"} PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 6717, :column 28, :line 6717, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6717, :column 29, :line 6717, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6717, :column 34, :line 6717, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6717, :column 39, :line 6717, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6717, :column 43, :line 6717, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6717, :column 58, :line 6717, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ^{:arglists ([^{:end-column 34, :end-line 6717, :column 29, :line 6717, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6717, :column 34, :line 6717, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6717, :column 39, :line 6717, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6717, :column 43, :line 6717, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6717, :column 58, :line 6717, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6717, :column 10, :line 6717, :file "cljs/core.cljs"} ->PersistentTreeMap ^{:arglists ([^{:end-column 34, :end-line 6717, :column 29, :line 6717, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6717, :column 34, :line 6717, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6717, :column 39, :line 6717, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6717, :column 43, :line 6717, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6717, :column 58, :line 6717, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6717, :column 10, :line 6717, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 34, :end-line 6717, :column 29, :line 6717, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6717, :column 34, :line 6717, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6717, :column 39, :line 6717, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6717, :column 43, :line 6717, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6717, :column 58, :line 6717, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 6717, :column 29, :line 6717, :file "cljs/core.cljs"} comp ^{:end-column 39, :end-line 6717, :column 34, :line 6717, :file "cljs/core.cljs"} tree ^{:end-column 43, :end-line 6717, :column 39, :line 6717, :file "cljs/core.cljs"} cnt ^{:end-column 48, :end-line 6717, :column 43, :line 6717, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 65, :end-line 6717, :column 58, :line 6717, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 6717, :column 10, :line 6717, :file "cljs/core.cljs"} ->PersistentTreeMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 825, :column 4, :line 825, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 825, :column 5, :line 825, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 825, :column 9, :line 825, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 836, :column 4, :line 836, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 836, :column 5, :line 836, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 836, :column 9, :line 836, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 836, :column 11, :line 836, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 845, :column 9, :line 845, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 845, :column 11, :line 845, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 845, :column 15, :line 845, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 824, :column 8, :line 824, :file "cljs/core.cljs"} array-reduce ^{:arglists (^{:end-column 11, :end-line 825, :column 4, :line 825, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 825, :column 5, :line 825, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 825, :column 9, :line 825, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 836, :column 4, :line 836, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 836, :column 5, :line 836, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 836, :column 9, :line 836, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 836, :column 11, :line 836, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 845, :column 9, :line 845, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 845, :column 11, :line 845, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 845, :column 15, :line 845, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 824, :column 8, :line 824, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 825, :column 5, :line 825, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 825, :column 9, :line 825, :file "cljs/core.cljs"} f] [^{:end-column 9, :end-line 836, :column 5, :line 836, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 836, :column 9, :line 836, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 836, :column 11, :line 836, :file "cljs/core.cljs"} val] [^{:end-column 9, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 845, :column 9, :line 845, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 845, :column 11, :line 845, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 845, :column 15, :line 845, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 825, :column 4, :line 825, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 825, :column 5, :line 825, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 825, :column 9, :line 825, :file "cljs/core.cljs"} f] ^{:end-column 15, :end-line 836, :column 4, :line 836, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 836, :column 5, :line 836, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 836, :column 9, :line 836, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 836, :column 11, :line 836, :file "cljs/core.cljs"} val] ^{:end-column 19, :end-line 845, :column 4, :line 845, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 845, :column 5, :line 845, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 845, :column 9, :line 845, :file "cljs/core.cljs"} f ^{:end-column 15, :end-line 845, :column 11, :line 845, :file "cljs/core.cljs"} val ^{:end-column 19, :end-line 845, :column 15, :line 845, :file "cljs/core.cljs"} idx]), :private true, :end-column 21, :end-line 824, :column 8, :line 824, :file "cljs/core.cljs"} array-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 859, :column 3, :line 859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 859, :column 4, :line 859, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 857, :column 8, :line 857, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 857, :column 16, :line 857, :file "cljs/core.cljs"} counted? ^{:arglists (^{:end-column 6, :end-line 859, :column 3, :line 859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 859, :column 4, :line 859, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 857, :column 8, :line 857, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 857, :column 16, :line 857, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 859, :column 4, :line 859, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 859, :column 3, :line 859, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 859, :column 4, :line 859, :file "cljs/core.cljs"} x]), :doc "Returns true if coll implements count in constant time", :tag ^{:end-column 16, :end-line 857, :column 8, :line 857, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 857, :column 16, :line 857, :file "cljs/core.cljs"} counted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 8017, :column 3, :line 8017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8017, :column 4, :line 8017, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8017, :column 6, :line 8017, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 8015, :column 7, :line 8015, :file "cljs/core.cljs"} println ^{:arglists (^{:end-column 11, :end-line 8017, :column 3, :line 8017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8017, :column 4, :line 8017, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8017, :column 6, :line 8017, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 8015, :column 7, :line 8015, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 11, :end-line 8017, :column 6, :line 8017, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8017, :column 3, :line 8017, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8017, :column 4, :line 8017, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8017, :column 6, :line 8017, :file "cljs/core.cljs"} objs]), :doc "Same as print followed by (newline)", :end-column 15, :end-line 8015, :column 7, :line 8015, :file "cljs/core.cljs"} println, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3885, :column 3, :line 3885, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3885, :column 4, :line 3885, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3885, :column 6, :line 3885, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3885, :column 7, :line 3885, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3885, :column 9, :line 3885, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3885, :column 11, :line 3885, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3885, :column 15, :line 3885, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3881, :column 7, :line 3881, :file "cljs/core.cljs"} assoc-in ^{:arglists (^{:end-column 17, :end-line 3885, :column 3, :line 3885, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3885, :column 4, :line 3885, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3885, :column 6, :line 3885, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3885, :column 7, :line 3885, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3885, :column 9, :line 3885, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3885, :column 11, :line 3885, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3885, :column 15, :line 3885, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3881, :column 7, :line 3881, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 3885, :column 4, :line 3885, :file "cljs/core.cljs"} m p__8775 ^{:end-column 17, :end-line 3885, :column 15, :line 3885, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3885, :column 3, :line 3885, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3885, :column 4, :line 3885, :file "cljs/core.cljs"} m ^{:end-column 14, :end-line 3885, :column 6, :line 3885, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3885, :column 7, :line 3885, :file "cljs/core.cljs"} k ^{:end-column 11, :end-line 3885, :column 9, :line 3885, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 3885, :column 11, :line 3885, :file "cljs/core.cljs"} ks] ^{:end-column 17, :end-line 3885, :column 15, :line 3885, :file "cljs/core.cljs"} v]), :doc "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.", :end-column 16, :end-line 3881, :column 7, :line 3881, :file "cljs/core.cljs"} assoc-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7086, :column 10, :line 7086, :file "cljs/core.cljs"} PersistentHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7086, :column 10, :line 7086, :file "cljs/core.cljs"} PersistentHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 7086, :column 28, :line 7086, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 7086, :column 29, :line 7086, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7086, :column 34, :line 7086, :file "cljs/core.cljs"} hash-map ^{:mutable true, :end-column 60, :end-line 7086, :column 53, :line 7086, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}}, ^{:arglists (^{:end-column 8, :end-line 1996, :column 3, :line 1996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1996, :column 4, :line 1996, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1996, :column 6, :line 1996, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1994, :column 7, :line 1994, :file "cljs/core.cljs"} bit-test ^{:arglists (^{:end-column 8, :end-line 1996, :column 3, :line 1996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1996, :column 4, :line 1996, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1996, :column 6, :line 1996, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1994, :column 7, :line 1994, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1996, :column 4, :line 1996, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1996, :column 6, :line 1996, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1996, :column 3, :line 1996, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1996, :column 4, :line 1996, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1996, :column 6, :line 1996, :file "cljs/core.cljs"} n]), :doc "Test bit at index n", :end-column 16, :end-line 1994, :column 7, :line 1994, :file "cljs/core.cljs"} bit-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 5340, :column 10, :line 5340, :file "cljs/core.cljs"} TransientHashMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 6098, :column 10, :line 6098, :file "cljs/core.cljs"} TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 6102, :column 27, :line 6098, :file "cljs/core.cljs"} [^{:mutable true, :tag ^{:end-column 47, :end-line 6098, :column 39, :line 6098, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6098, :column 47, :line 6098, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6099, :column 38, :line 6099, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6100, :column 38, :line 6100, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6101, :column 39, :line 6101, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6101, :column 47, :line 6101, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6102, :column 38, :line 6102, :file "cljs/core.cljs"} nil-val], :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists ([^{:end-column 34, :end-line 5961, :column 29, :line 5961, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5961, :column 34, :line 5961, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5961, :column 38, :line 5961, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5961, :column 44, :line 5961, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5961, :column 52, :line 5961, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5961, :column 61, :line 5961, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5961, :column 79, :line 5961, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5961, :column 10, :line 5961, :file "cljs/core.cljs"} ->PersistentHashMap ^{:arglists ([^{:end-column 34, :end-line 5961, :column 29, :line 5961, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5961, :column 34, :line 5961, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5961, :column 38, :line 5961, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5961, :column 44, :line 5961, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5961, :column 52, :line 5961, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5961, :column 61, :line 5961, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5961, :column 79, :line 5961, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5961, :column 10, :line 5961, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentHashMap [^{:end-column 34, :end-line 5961, :column 29, :line 5961, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5961, :column 34, :line 5961, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5961, :column 38, :line 5961, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5961, :column 44, :line 5961, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5961, :column 52, :line 5961, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5961, :column 61, :line 5961, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5961, :column 79, :line 5961, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 5961, :column 29, :line 5961, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 5961, :column 34, :line 5961, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5961, :column 38, :line 5961, :file "cljs/core.cljs"} root ^{:tag ^{:end-column 52, :end-line 5961, :column 44, :line 5961, :file "cljs/core.cljs"} boolean, :end-column 61, :end-line 5961, :column 52, :line 5961, :file "cljs/core.cljs"} has-nil? ^{:end-column 69, :end-line 5961, :column 61, :line 5961, :file "cljs/core.cljs"} nil-val ^{:mutable true, :end-column 86, :end-line 5961, :column 79, :line 5961, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 28, :end-line 5961, :column 10, :line 5961, :file "cljs/core.cljs"} ->PersistentHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 20, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} ISwap ^{:protocol-info {:methods {^{:end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 20, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 392, :column 4, :line 392, :file "cljs/core.cljs"} -swap! [^{:end-column 16, :end-line 392, :column 11, :line 392, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 392, :column 12, :line 392, :file "cljs/core.cljs"} o ^{:end-column 16, :end-line 392, :column 14, :line 392, :file "cljs/core.cljs"} f] ^{:end-column 24, :end-line 392, :column 17, :line 392, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 392, :column 18, :line 392, :file "cljs/core.cljs"} o ^{:end-column 22, :end-line 392, :column 20, :line 392, :file "cljs/core.cljs"} f ^{:end-column 24, :end-line 392, :column 22, :line 392, :file "cljs/core.cljs"} a] ^{:end-column 34, :end-line 392, :column 25, :line 392, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 392, :column 26, :line 392, :file "cljs/core.cljs"} o ^{:end-column 30, :end-line 392, :column 28, :line 392, :file "cljs/core.cljs"} f ^{:end-column 32, :end-line 392, :column 30, :line 392, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 392, :column 32, :line 392, :file "cljs/core.cljs"} b] ^{:end-column 47, :end-line 392, :column 35, :line 392, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 392, :column 36, :line 392, :file "cljs/core.cljs"} o ^{:end-column 40, :end-line 392, :column 38, :line 392, :file "cljs/core.cljs"} f ^{:end-column 42, :end-line 392, :column 40, :line 392, :file "cljs/core.cljs"} a ^{:end-column 44, :end-line 392, :column 42, :line 392, :file "cljs/core.cljs"} b ^{:end-column 47, :end-line 392, :column 44, :line 392, :file "cljs/core.cljs"} xs]]}}, :protocol-symbol true, :end-column 20, :end-line 391, :column 14, :line 391, :file "cljs/core.cljs"} ISwap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 22, :end-line 1400, :column 10, :line 1400, :file "cljs/core.cljs"} ChunkedCons {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}, :end-column 22, :end-line 2516, :column 10, :line 2516, :file "cljs/core.cljs"} ChunkedCons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 56, :end-line 2516, :column 22, :line 2516, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 2516, :column 23, :line 2516, :file "cljs/core.cljs"} chunk ^{:end-column 34, :end-line 2516, :column 29, :line 2516, :file "cljs/core.cljs"} more ^{:end-column 39, :end-line 2516, :column 34, :line 2516, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 56, :end-line 2516, :column 49, :line 2516, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8398, :column 3, :line 8398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8398, :column 4, :line 8398, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8393, :column 7, :line 8393, :file "cljs/core.cljs"} memoize ^{:arglists (^{:end-column 6, :end-line 8398, :column 3, :line 8398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8398, :column 4, :line 8398, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8393, :column 7, :line 8393, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 8398, :column 4, :line 8398, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8398, :column 3, :line 8398, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8398, :column 4, :line 8398, :file "cljs/core.cljs"} f]), :doc "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.", :end-column 15, :end-line 8393, :column 7, :line 8393, :file "cljs/core.cljs"} memoize, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 8162, :column 3, :line 8162, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8162, :column 4, :line 8162, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8162, :column 9, :line 8162, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8162, :column 11, :line 8162, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8162, :column 13, :line 8162, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8156, :column 7, :line 8156, :file "cljs/core.cljs"} alter-meta! ^{:arglists (^{:end-column 18, :end-line 8162, :column 3, :line 8162, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8162, :column 4, :line 8162, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8162, :column 9, :line 8162, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8162, :column 11, :line 8162, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8162, :column 13, :line 8162, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8156, :column 7, :line 8156, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8162, :column 4, :line 8162, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8162, :column 9, :line 8162, :file "cljs/core.cljs"} f & ^{:end-column 18, :end-line 8162, :column 13, :line 8162, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 8162, :column 3, :line 8162, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8162, :column 4, :line 8162, :file "cljs/core.cljs"} iref ^{:end-column 11, :end-line 8162, :column 9, :line 8162, :file "cljs/core.cljs"} f ^{:end-column 13, :end-line 8162, :column 11, :line 8162, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 8162, :column 13, :line 8162, :file "cljs/core.cljs"} args]), :doc "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects", :end-column 19, :end-line 8156, :column 7, :line 8156, :file "cljs/core.cljs"} alter-meta!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 399, :column 30, :line 399, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 399, :column 10, :line 399, :file "cljs/core.cljs"} ->StringBufferWriter ^{:arglists ([^{:end-column 33, :end-line 399, :column 30, :line 399, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 399, :column 10, :line 399, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringBufferWriter [^{:end-column 33, :end-line 399, :column 30, :line 399, :file "cljs/core.cljs"} sb]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 399, :column 30, :line 399, :file "cljs/core.cljs"} sb]), :factory :positional, :skip-protocol-flag #{cljs.core/IWriter}, :protocols #{cljs.core/IWriter}, :end-column 29, :end-line 399, :column 10, :line 399, :file "cljs/core.cljs"} ->StringBufferWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2039, :column 22, :line 2039, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2039, :column 23, :line 2039, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2039, :column 8, :line 2039, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2039, :column 16, :line 2039, :file "cljs/core.cljs"} zero? ^{:arglists (^{:end-column 25, :end-line 2039, :column 22, :line 2039, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2039, :column 23, :line 2039, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2039, :column 8, :line 2039, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2039, :column 16, :line 2039, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 2039, :column 23, :line 2039, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2039, :column 22, :line 2039, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2039, :column 23, :line 2039, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 2039, :column 8, :line 2039, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2039, :column 16, :line 2039, :file "cljs/core.cljs"} zero?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 38, :end-line 4449, :column 27, :line 4449, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4449, :column 28, :line 4449, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4449, :column 33, :line 4449, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4449, :column 8, :line 4449, :file "cljs/core.cljs"} tv-ensure-editable ^{:arglists (^{:end-column 38, :end-line 4449, :column 27, :line 4449, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4449, :column 28, :line 4449, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4449, :column 33, :line 4449, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4449, :column 8, :line 4449, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 4449, :column 28, :line 4449, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4449, :column 33, :line 4449, :file "cljs/core.cljs"} node]), :tag function, :op :var, :name ^{:arglists (^{:end-column 38, :end-line 4449, :column 27, :line 4449, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4449, :column 28, :line 4449, :file "cljs/core.cljs"} edit ^{:end-column 38, :end-line 4449, :column 33, :line 4449, :file "cljs/core.cljs"} node]), :private true, :end-column 27, :end-line 4449, :column 8, :line 4449, :file "cljs/core.cljs"} tv-ensure-editable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn* ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:doc "When compiled for a command-line target, whatever\n  function *main-fn* is set to will be called with the command-line\n  argv as arguments", :end-column 21, :end-line 129, :column 1, :line 125, :file "cljs/core.cljs"} *main-cli-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} -assoc-n ^{:arglists (^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 282, :column 18, :line 282, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 282, :column 19, :line 282, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 282, :column 24, :line 282, :file "cljs/core.cljs"} n ^{:end-column 30, :end-line 282, :column 26, :line 282, :file "cljs/core.cljs"} val]), :protocol cljs.core/IVector, :tag ^{:end-column 9, :end-line 282, :column 5, :line 282, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 282, :column 9, :line 282, :file "cljs/core.cljs"} -assoc-n, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 1839, :column 25, :line 1839, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1839, :column 26, :line 1839, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1839, :column 7, :line 1839, :file "cljs/core.cljs"} unchecked-dec-int ^{:arglists (^{:end-column 28, :end-line 1839, :column 25, :line 1839, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1839, :column 26, :line 1839, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1839, :column 7, :line 1839, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 28, :end-line 1839, :column 26, :line 1839, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 1839, :column 25, :line 1839, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 1839, :column 26, :line 1839, :file "cljs/core.cljs"} x]), :end-column 25, :end-line 1839, :column 7, :line 1839, :file "cljs/core.cljs"} unchecked-dec-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2105, :column 18, :line 2105, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2105, :column 19, :line 2105, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2105, :column 8, :line 2105, :file "cljs/core.cljs"} hash-imap ^{:arglists (^{:end-column 21, :end-line 2105, :column 18, :line 2105, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2105, :column 19, :line 2105, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2105, :column 8, :line 2105, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 2105, :column 19, :line 2105, :file "cljs/core.cljs"} m]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2105, :column 18, :line 2105, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2105, :column 19, :line 2105, :file "cljs/core.cljs"} m]), :private true, :end-column 18, :end-line 2105, :column 8, :line 2105, :file "cljs/core.cljs"} hash-imap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8591, :column 3, :line 8591, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8591, :column 4, :line 8591, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8591, :column 6, :line 8591, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8591, :column 8, :line 8591, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} dominates ^{:arglists (^{:end-column 21, :end-line 8591, :column 3, :line 8591, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8591, :column 4, :line 8591, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8591, :column 6, :line 8591, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8591, :column 8, :line 8591, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8591, :column 4, :line 8591, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8591, :column 6, :line 8591, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8591, :column 8, :line 8591, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8591, :column 3, :line 8591, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8591, :column 4, :line 8591, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8591, :column 6, :line 8591, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8591, :column 8, :line 8591, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 18, :end-line 8590, :column 8, :line 8590, :file "cljs/core.cljs"} dominates, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2766, :column 3, :line 2766, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2766, :column 4, :line 2766, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2762, :column 7, :line 2762, :file "cljs/core.cljs"} persistent! ^{:arglists (^{:end-column 10, :end-line 2766, :column 3, :line 2766, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2766, :column 4, :line 2766, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2762, :column 7, :line 2762, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 10, :end-line 2766, :column 4, :line 2766, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2766, :column 3, :line 2766, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2766, :column 4, :line 2766, :file "cljs/core.cljs"} tcoll]), :doc "Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.", :end-column 19, :end-line 2762, :column 7, :line 2762, :file "cljs/core.cljs"} persistent!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn! ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 30, :column 3, :line 30, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 30, :column 4, :line 30, :file "cljs/core.cljs"} f]), :doc "Set *print-fn* to f.", :end-column 21, :end-line 28, :column 7, :line 28, :file "cljs/core.cljs"} set-print-fn!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1032, :column 3, :line 1032, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1030, :column 7, :line 1030, :file "cljs/core.cljs"} nnext ^{:arglists (^{:end-column 9, :end-line 1032, :column 3, :line 1032, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1030, :column 7, :line 1030, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 667, :column 8, :line 667, :file "cljs/core.cljs"} seq [^{:end-column 9, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1032, :column 3, :line 1032, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1032, :column 4, :line 1032, :file "cljs/core.cljs"} coll]), :doc "Same as (next (next x))", :end-column 13, :end-line 1030, :column 7, :line 1030, :file "cljs/core.cljs"} nnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5351, :column 10, :line 5351, :file "cljs/core.cljs"} Box {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5351, :column 10, :line 5351, :file "cljs/core.cljs"} Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 29, :end-line 5351, :column 14, :line 5351, :file "cljs/core.cljs"} [^{:mutable true, :end-column 29, :end-line 5351, :column 25, :line 5351, :file "cljs/core.cljs"} val], :protocols #{}}, StringBuffer {:op :js-var, :ns goog.string, :name StringBuffer}, ^{:arglists (^{:end-column 40, :end-line 6291, :column 22, :line 6291, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6291, :column 23, :line 6291, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6291, :column 27, :line 6291, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6291, :column 31, :line 6291, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6291, :column 36, :line 6291, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6291, :column 8, :line 6291, :file "cljs/core.cljs"} balance-right ^{:arglists (^{:end-column 40, :end-line 6291, :column 22, :line 6291, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6291, :column 23, :line 6291, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6291, :column 27, :line 6291, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6291, :column 31, :line 6291, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6291, :column 36, :line 6291, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6291, :column 8, :line 6291, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 6291, :column 23, :line 6291, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6291, :column 27, :line 6291, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6291, :column 31, :line 6291, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6291, :column 36, :line 6291, :file "cljs/core.cljs"} ins]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 6291, :column 22, :line 6291, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 6291, :column 23, :line 6291, :file "cljs/core.cljs"} key ^{:end-column 31, :end-line 6291, :column 27, :line 6291, :file "cljs/core.cljs"} val ^{:end-column 36, :end-line 6291, :column 31, :line 6291, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6291, :column 36, :line 6291, :file "cljs/core.cljs"} ins]), :private true, :end-column 22, :end-line 6291, :column 8, :line 6291, :file "cljs/core.cljs"} balance-right, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 8628, :column 30, :line 8628, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8628, :column 31, :line 8628, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8628, :column 36, :line 8628, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8628, :column 8, :line 8628, :file "cljs/core.cljs"} throw-no-method-error ^{:arglists (^{:end-column 49, :end-line 8628, :column 30, :line 8628, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8628, :column 31, :line 8628, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8628, :column 36, :line 8628, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8628, :column 8, :line 8628, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 36, :end-line 8628, :column 31, :line 8628, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8628, :column 36, :line 8628, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 8628, :column 30, :line 8628, :file "cljs/core.cljs"} [^{:end-column 36, :end-line 8628, :column 31, :line 8628, :file "cljs/core.cljs"} name ^{:end-column 49, :end-line 8628, :column 36, :line 8628, :file "cljs/core.cljs"} dispatch-val]), :private true, :end-column 30, :end-line 8628, :column 8, :line 8628, :file "cljs/core.cljs"} throw-no-method-error, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8191, :column 9, :line 8191, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8191, :column 13, :line 8191, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8170, :column 7, :line 8170, :file "cljs/core.cljs"} add-watch ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8191, :column 9, :line 8191, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8191, :column 13, :line 8191, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8170, :column 7, :line 8170, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8191, :column 9, :line 8191, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8191, :column 13, :line 8191, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8191, :column 3, :line 8191, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8191, :column 4, :line 8191, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8191, :column 9, :line 8191, :file "cljs/core.cljs"} key ^{:end-column 15, :end-line 8191, :column 13, :line 8191, :file "cljs/core.cljs"} f]), :doc "Alpha - subject to change.\n\n  Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1", :end-column 17, :end-line 8170, :column 7, :line 8170, :file "cljs/core.cljs"} add-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3147, :column 3, :line 3147, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3147, :column 4, :line 3147, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3147, :column 9, :line 3147, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3144, :column 8, :line 3144, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3144, :column 16, :line 3144, :file "cljs/core.cljs"} not-every? ^{:arglists (^{:end-column 14, :end-line 3147, :column 3, :line 3147, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3147, :column 4, :line 3147, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3147, :column 9, :line 3147, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3144, :column 8, :line 3144, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3144, :column 16, :line 3144, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 3147, :column 4, :line 3147, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3147, :column 9, :line 3147, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3147, :column 3, :line 3147, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3147, :column 4, :line 3147, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3147, :column 9, :line 3147, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for every x in\n  coll, else true.", :tag ^{:end-column 16, :end-line 3144, :column 8, :line 3144, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3144, :column 16, :line 3144, :file "cljs/core.cljs"} not-every?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1946, :column 3, :line 1946, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1946, :column 4, :line 1946, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1946, :column 6, :line 1946, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} rem ^{:arglists (^{:end-column 8, :end-line 1946, :column 3, :line 1946, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1946, :column 4, :line 1946, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1946, :column 6, :line 1946, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1946, :column 4, :line 1946, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1946, :column 6, :line 1946, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1946, :column 3, :line 1946, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1946, :column 4, :line 1946, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1946, :column 6, :line 1946, :file "cljs/core.cljs"} d]), :doc "remainder of dividing numerator by denominator.", :end-column 11, :end-line 1944, :column 7, :line 1944, :file "cljs/core.cljs"} rem, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 7950, :column 24, :line 7950, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7950, :column 25, :line 7950, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7950, :column 30, :line 7950, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7950, :column 8, :line 7950, :file "cljs/core.cljs"} pr-sb-with-opts ^{:arglists (^{:end-column 35, :end-line 7950, :column 24, :line 7950, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7950, :column 25, :line 7950, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7950, :column 30, :line 7950, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7950, :column 8, :line 7950, :file "cljs/core.cljs"} {:arglists (^goog.string/StringBuffer [^{:end-column 30, :end-line 7950, :column 25, :line 7950, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7950, :column 30, :line 7950, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 7950, :column 24, :line 7950, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 7950, :column 25, :line 7950, :file "cljs/core.cljs"} objs ^{:end-column 35, :end-line 7950, :column 30, :line 7950, :file "cljs/core.cljs"} opts]), :private true, :end-column 24, :end-line 7950, :column 8, :line 7950, :file "cljs/core.cljs"} pr-sb-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5414, :column 10, :line 5414, :file "cljs/core.cljs"} BitmapIndexedNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5414, :column 10, :line 5414, :file "cljs/core.cljs"} BitmapIndexedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 65, :end-line 5414, :column 28, :line 5414, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5414, :column 29, :line 5414, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 51, :end-line 5414, :column 44, :line 5414, :file "cljs/core.cljs"} bitmap ^{:mutable true, :end-column 65, :end-line 5414, :column 61, :line 5414, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists ([^{:end-column 24, :end-line 5847, :column 19, :line 5847, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5847, :column 24, :line 5847, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5847, :column 30, :line 5847, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5847, :column 32, :line 5847, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5847, :column 44, :line 5847, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5847, :column 10, :line 5847, :file "cljs/core.cljs"} ->NodeSeq ^{:arglists ([^{:end-column 24, :end-line 5847, :column 19, :line 5847, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5847, :column 24, :line 5847, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5847, :column 30, :line 5847, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5847, :column 32, :line 5847, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5847, :column 44, :line 5847, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5847, :column 10, :line 5847, :file "cljs/core.cljs"} {:arglists (^cljs.core/NodeSeq [^{:end-column 24, :end-line 5847, :column 19, :line 5847, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5847, :column 24, :line 5847, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5847, :column 30, :line 5847, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5847, :column 32, :line 5847, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5847, :column 44, :line 5847, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 5847, :column 19, :line 5847, :file "cljs/core.cljs"} meta ^{:end-column 30, :end-line 5847, :column 24, :line 5847, :file "cljs/core.cljs"} nodes ^{:end-column 32, :end-line 5847, :column 30, :line 5847, :file "cljs/core.cljs"} i ^{:end-column 34, :end-line 5847, :column 32, :line 5847, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 51, :end-line 5847, :column 44, :line 5847, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 5847, :column 10, :line 5847, :file "cljs/core.cljs"} ->NodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3154, :column 3, :line 3154, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3154, :column 4, :line 3154, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3154, :column 9, :line 3154, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} some ^{:arglists (^{:end-column 14, :end-line 3154, :column 3, :line 3154, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3154, :column 4, :line 3154, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3154, :column 9, :line 3154, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3154, :column 4, :line 3154, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3154, :column 9, :line 3154, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3154, :column 3, :line 3154, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3154, :column 4, :line 3154, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3154, :column 9, :line 3154, :file "cljs/core.cljs"} coll]), :doc "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)", :end-column 12, :end-line 3149, :column 7, :line 3149, :file "cljs/core.cljs"} some, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 21, :end-line 382, :column 14, :line 382, :file "cljs/core.cljs"} INamed ^{:impls (cljs.core/Keyword cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 21, :end-line 382, :column 14, :line 382, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 383, :column 5, :line 383, :file "cljs/core.cljs"} string, :end-column 18, :end-line 383, :column 12, :line 383, :file "cljs/core.cljs"} -name [^{:end-column 21, :end-line 383, :column 18, :line 383, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 383, :column 19, :line 383, :file "cljs/core.cljs"} x]], ^{:tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} -namespace [^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]]}}, :protocol-symbol true, :end-column 21, :end-line 382, :column 14, :line 382, :file "cljs/core.cljs"} INamed, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 29, :end-line 5351, :column 25, :line 5351, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5351, :column 10, :line 5351, :file "cljs/core.cljs"} ->Box ^{:arglists ([^{:mutable true, :end-column 29, :end-line 5351, :column 25, :line 5351, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5351, :column 10, :line 5351, :file "cljs/core.cljs"} {:arglists (^cljs.core/Box [^{:mutable true, :end-column 29, :end-line 5351, :column 25, :line 5351, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 29, :end-line 5351, :column 25, :line 5351, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 14, :end-line 5351, :column 10, :line 5351, :file "cljs/core.cljs"} ->Box, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 22, :end-line 296, :column 14, :line 296, :file "cljs/core.cljs"} IReduce ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/ArrayChunk cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 22, :end-line 296, :column 14, :line 296, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 297, :column 4, :line 297, :file "cljs/core.cljs"} -reduce [^{:end-column 20, :end-line 297, :column 12, :line 297, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 297, :column 13, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 20, :end-line 297, :column 18, :line 297, :file "cljs/core.cljs"} f] ^{:end-column 35, :end-line 297, :column 21, :line 297, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 297, :column 22, :line 297, :file "cljs/core.cljs"} coll ^{:end-column 29, :end-line 297, :column 27, :line 297, :file "cljs/core.cljs"} f ^{:end-column 35, :end-line 297, :column 29, :line 297, :file "cljs/core.cljs"} start]]}}, :protocol-symbol true, :end-column 22, :end-line 296, :column 14, :line 296, :file "cljs/core.cljs"} IReduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3604, :column 5, :line 3604, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3616, :column 4, :line 3616, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3616, :column 5, :line 3616, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3616, :column 7, :line 3616, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} drop ^{:arglists (^{:end-column 7, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3604, :column 5, :line 3604, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3616, :column 4, :line 3616, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3616, :column 5, :line 3616, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3616, :column 7, :line 3616, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3604, :column 5, :line 3604, :file "cljs/core.cljs"} n] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3616, :column 5, :line 3616, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3616, :column 7, :line 3616, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3604, :column 4, :line 3604, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3604, :column 5, :line 3604, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 3616, :column 4, :line 3616, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3616, :column 5, :line 3616, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3616, :column 7, :line 3616, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.", :end-column 12, :end-line 3601, :column 7, :line 3601, :file "cljs/core.cljs"} drop, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1407, :column 4, :line 1407, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1409, :column 7, :line 1409, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} js-obj ^{:arglists (^{:end-column 6, :end-line 1407, :column 4, :line 1407, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1409, :column 7, :line 1409, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} {:arglists (^object [] [& ^{:end-column 15, :end-line 1409, :column 7, :line 1409, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1407, :column 4, :line 1407, :file "cljs/core.cljs"} [] ^{:end-column 15, :end-line 1409, :column 4, :line 1409, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1409, :column 5, :line 1409, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 1409, :column 7, :line 1409, :file "cljs/core.cljs"} keyvals]), :end-column 14, :end-line 1406, :column 7, :line 1406, :file "cljs/core.cljs"} js-obj, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 35, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} ITransientCollection ^{:impls (cljs.core/TransientHashSet cljs.core/TransientHashMap cljs.core/TransientArrayMap cljs.core/TransientVector), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 35, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -conj! [^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]], ^{:tag ^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj, :end-column 22, :end-line 354, :column 9, :line 354, :file "cljs/core.cljs"} -persistent! [^{:end-column 29, :end-line 354, :column 22, :line 354, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 354, :column 23, :line 354, :file "cljs/core.cljs"} tcoll]]}}, :protocol-symbol true, :end-column 35, :end-line 352, :column 14, :line 352, :file "cljs/core.cljs"} ITransientCollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3306, :column 10, :line 3306, :file "cljs/core.cljs"} Atom {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}, :end-column 15, :end-line 3306, :column 10, :line 3306, :file "cljs/core.cljs"} Atom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 45, :end-line 3306, :column 15, :line 3306, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3306, :column 16, :line 3306, :file "cljs/core.cljs"} state ^{:end-column 27, :end-line 3306, :column 22, :line 3306, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 3306, :column 27, :line 3306, :file "cljs/core.cljs"} validator ^{:end-column 45, :end-line 3306, :column 37, :line 3306, :file "cljs/core.cljs"} watches], :protocols #{Object cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref}}, ^{:arglists (^{:end-column 12, :end-line 1120, :column 4, :line 1120, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1120, :column 5, :line 1120, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1120, :column 10, :line 1120, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1148, :column 4, :line 1148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1148, :column 5, :line 1148, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1148, :column 10, :line 1148, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1148, :column 12, :line 1148, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} nth ^{:arglists (^{:end-column 12, :end-line 1120, :column 4, :line 1120, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1120, :column 5, :line 1120, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1120, :column 10, :line 1120, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1148, :column 4, :line 1148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1148, :column 5, :line 1148, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1148, :column 10, :line 1148, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1148, :column 12, :line 1148, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1120, :column 5, :line 1120, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1120, :column 10, :line 1120, :file "cljs/core.cljs"} n] [^{:end-column 10, :end-line 1148, :column 5, :line 1148, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1148, :column 10, :line 1148, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1148, :column 12, :line 1148, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 1120, :column 4, :line 1120, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1120, :column 5, :line 1120, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1120, :column 10, :line 1120, :file "cljs/core.cljs"} n] ^{:end-column 22, :end-line 1148, :column 4, :line 1148, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1148, :column 5, :line 1148, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1148, :column 10, :line 1148, :file "cljs/core.cljs"} n ^{:end-column 22, :end-line 1148, :column 12, :line 1148, :file "cljs/core.cljs"} not-found]), :doc "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.", :end-column 11, :end-line 1115, :column 7, :line 1115, :file "cljs/core.cljs"} nth, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1381, :column 8, :line 1381, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1381, :column 16, :line 1381, :file "cljs/core.cljs"} sorted? ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1381, :column 8, :line 1381, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1381, :column 16, :line 1381, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1383, :column 3, :line 1383, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1383, :column 4, :line 1383, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies ISorted", :tag ^{:end-column 16, :end-line 1381, :column 8, :line 1381, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 1381, :column 16, :line 1381, :file "cljs/core.cljs"} sorted?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil? ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 85, :column 3, :line 85, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 85, :column 4, :line 85, :file "cljs/core.cljs"} x]), :doc "Returns true if x is nil, false otherwise.", :tag ^{:end-column 16, :end-line 83, :column 8, :line 83, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 83, :column 16, :line 83, :file "cljs/core.cljs"} nil?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 3671, :column 3, :line 3671, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3671, :column 4, :line 3671, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3671, :column 6, :line 3671, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3669, :column 7, :line 3669, :file "cljs/core.cljs"} split-at ^{:arglists (^{:end-column 11, :end-line 3671, :column 3, :line 3671, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3671, :column 4, :line 3671, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3671, :column 6, :line 3671, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3669, :column 7, :line 3669, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 6, :end-line 3671, :column 4, :line 3671, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3671, :column 6, :line 3671, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 3671, :column 3, :line 3671, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3671, :column 4, :line 3671, :file "cljs/core.cljs"} n ^{:end-column 11, :end-line 3671, :column 6, :line 3671, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take n coll) (drop n coll)]", :end-column 16, :end-line 3669, :column 7, :line 3669, :file "cljs/core.cljs"} split-at, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 7084, :column 10, :line 7084, :file "cljs/core.cljs"} TransientHashSet {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 7179, :column 10, :line 7179, :file "cljs/core.cljs"} TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 52, :end-line 7179, :column 27, :line 7179, :file "cljs/core.cljs"} [^{:mutable true, :end-column 52, :end-line 7179, :column 38, :line 7179, :file "cljs/core.cljs"} transient-map], :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}}, ^{:arglists (^{:end-column 35, :end-line 5012, :column 28, :line 5012, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5012, :column 29, :line 5012, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 5012, :column 31, :line 5012, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 5012, :column 33, :line 5012, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 5012, :column 8, :line 5012, :file "cljs/core.cljs"} array-map-extend-kv ^{:arglists (^{:end-column 35, :end-line 5012, :column 28, :line 5012, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5012, :column 29, :line 5012, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 5012, :column 31, :line 5012, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 5012, :column 33, :line 5012, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 5012, :column 8, :line 5012, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 31, :end-line 5012, :column 29, :line 5012, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 5012, :column 31, :line 5012, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 5012, :column 33, :line 5012, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 5012, :column 28, :line 5012, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 5012, :column 29, :line 5012, :file "cljs/core.cljs"} m ^{:end-column 33, :end-line 5012, :column 31, :line 5012, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 5012, :column 33, :line 5012, :file "cljs/core.cljs"} v]), :private true, :end-column 28, :end-line 5012, :column 8, :line 5012, :file "cljs/core.cljs"} array-map-extend-kv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 7967, :column 3, :line 7967, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7967, :column 4, :line 7967, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7967, :column 9, :line 7967, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7965, :column 7, :line 7965, :file "cljs/core.cljs"} prn-str-with-opts ^{:arglists (^{:end-column 14, :end-line 7967, :column 3, :line 7967, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7967, :column 4, :line 7967, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7967, :column 9, :line 7967, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7965, :column 7, :line 7965, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 7967, :column 4, :line 7967, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7967, :column 9, :line 7967, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7967, :column 3, :line 7967, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7967, :column 4, :line 7967, :file "cljs/core.cljs"} objs ^{:end-column 14, :end-line 7967, :column 9, :line 7967, :file "cljs/core.cljs"} opts]), :doc "Same as pr-str-with-opts followed by (newline)", :end-column 25, :end-line 7965, :column 7, :line 7965, :file "cljs/core.cljs"} prn-str-with-opts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 21, :end-line 74, :column 1, :line 74, :file "cljs/core.cljs"} not-native, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 8289, :column 4, :line 8289, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8289, :column 5, :line 8289, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8291, :column 4, :line 8291, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8291, :column 5, :line 8291, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8291, :column 10, :line 8291, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8286, :column 7, :line 8286, :file "cljs/core.cljs"} random-sample ^{:arglists (^{:end-column 10, :end-line 8289, :column 4, :line 8289, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8289, :column 5, :line 8289, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8291, :column 4, :line 8291, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8291, :column 5, :line 8291, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8291, :column 10, :line 8291, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8286, :column 7, :line 8286, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 8289, :column 5, :line 8289, :file "cljs/core.cljs"} prob] ^cljs.core/LazySeq [^{:end-column 10, :end-line 8291, :column 5, :line 8291, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8291, :column 10, :line 8291, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 8289, :column 4, :line 8289, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8289, :column 5, :line 8289, :file "cljs/core.cljs"} prob] ^{:end-column 15, :end-line 8291, :column 4, :line 8291, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 8291, :column 5, :line 8291, :file "cljs/core.cljs"} prob ^{:end-column 15, :end-line 8291, :column 10, :line 8291, :file "cljs/core.cljs"} coll]), :doc "Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.", :end-column 21, :end-line 8286, :column 7, :line 8286, :file "cljs/core.cljs"} random-sample, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 7070, :column 3, :line 7070, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7070, :column 4, :line 7070, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 7070, :column 8, :line 7070, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 7068, :column 7, :line 7068, :file "cljs/core.cljs"} select-keys ^{:arglists (^{:end-column 15, :end-line 7070, :column 3, :line 7070, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7070, :column 4, :line 7070, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 7070, :column 8, :line 7070, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 7068, :column 7, :line 7068, :file "cljs/core.cljs"} {:arglists (^cljs.core/IMap [^{:end-column 8, :end-line 7070, :column 4, :line 7070, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 7070, :column 8, :line 7070, :file "cljs/core.cljs"} keyseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 7070, :column 3, :line 7070, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7070, :column 4, :line 7070, :file "cljs/core.cljs"} map ^{:end-column 15, :end-line 7070, :column 8, :line 7070, :file "cljs/core.cljs"} keyseq]), :doc "Returns a map containing only those entries in map whose key is in keys", :end-column 19, :end-line 7068, :column 7, :line 7068, :file "cljs/core.cljs"} select-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1965, :column 3, :line 1965, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1965, :column 4, :line 1965, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1965, :column 6, :line 1965, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1963, :column 7, :line 1963, :file "cljs/core.cljs"} bit-and ^{:arglists (^{:end-column 8, :end-line 1965, :column 3, :line 1965, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1965, :column 4, :line 1965, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1965, :column 6, :line 1965, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1963, :column 7, :line 1963, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1965, :column 4, :line 1965, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1965, :column 6, :line 1965, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1965, :column 3, :line 1965, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1965, :column 4, :line 1965, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1965, :column 6, :line 1965, :file "cljs/core.cljs"} y]), :doc "Bitwise and", :end-column 15, :end-line 1963, :column 7, :line 1963, :file "cljs/core.cljs"} bit-and, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 2703, :column 22, :line 2703, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2703, :column 23, :line 2703, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2703, :column 25, :line 2703, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2703, :column 8, :line 2703, :file "cljs/core.cljs"} bounded-count ^{:arglists (^{:end-column 27, :end-line 2703, :column 22, :line 2703, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2703, :column 23, :line 2703, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2703, :column 25, :line 2703, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2703, :column 8, :line 2703, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2703, :column 23, :line 2703, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2703, :column 25, :line 2703, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 2703, :column 22, :line 2703, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2703, :column 23, :line 2703, :file "cljs/core.cljs"} s ^{:end-column 27, :end-line 2703, :column 25, :line 2703, :file "cljs/core.cljs"} n]), :private true, :end-column 22, :end-line 2703, :column 8, :line 2703, :file "cljs/core.cljs"} bounded-count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 25, :end-line 8203, :column 1, :line 8203, :file "cljs/core.cljs"} gensym_counter ^{:end-column 25, :end-line 8203, :column 1, :line 8203, :file "cljs/core.cljs"} {:tag clj-nil, :op :var, :name ^{:end-column 25, :end-line 8203, :column 1, :line 8203, :file "cljs/core.cljs"} gensym_counter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2747, :column 5, :line 2747, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2748, :column 7, :line 2748, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2749, :column 4, :line 2749, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2749, :column 5, :line 2749, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2749, :column 9, :line 2749, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2750, :column 4, :line 2750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2750, :column 5, :line 2750, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2750, :column 7, :line 2750, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2750, :column 9, :line 2750, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2750, :column 11, :line 2750, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2751, :column 4, :line 2751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2751, :column 5, :line 2751, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2751, :column 7, :line 2751, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2751, :column 9, :line 2751, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2751, :column 11, :line 2751, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2751, :column 13, :line 2751, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2751, :column 15, :line 2751, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2744, :column 7, :line 2744, :file "cljs/core.cljs"} list* ^{:arglists (^{:end-column 10, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2747, :column 5, :line 2747, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2748, :column 7, :line 2748, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2749, :column 4, :line 2749, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2749, :column 5, :line 2749, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2749, :column 9, :line 2749, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2750, :column 4, :line 2750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2750, :column 5, :line 2750, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2750, :column 7, :line 2750, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2750, :column 9, :line 2750, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2750, :column 11, :line 2750, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2751, :column 4, :line 2751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2751, :column 5, :line 2751, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2751, :column 7, :line 2751, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2751, :column 9, :line 2751, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2751, :column 11, :line 2751, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2751, :column 13, :line 2751, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2751, :column 15, :line 2751, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2744, :column 7, :line 2744, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq [^{:end-column 10, :end-line 2747, :column 5, :line 2747, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2748, :column 7, :line 2748, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2749, :column 5, :line 2749, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2749, :column 9, :line 2749, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2750, :column 5, :line 2750, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2750, :column 7, :line 2750, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2750, :column 9, :line 2750, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2750, :column 11, :line 2750, :file "cljs/core.cljs"} args] ^cljs.core/Cons [^{:end-column 7, :end-line 2751, :column 5, :line 2751, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2751, :column 7, :line 2751, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2751, :column 9, :line 2751, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2751, :column 11, :line 2751, :file "cljs/core.cljs"} d & ^{:end-column 20, :end-line 2751, :column 15, :line 2751, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2747, :column 4, :line 2747, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2747, :column 5, :line 2747, :file "cljs/core.cljs"} args] ^{:end-column 12, :end-line 2748, :column 4, :line 2748, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2748, :column 5, :line 2748, :file "cljs/core.cljs"} a ^{:end-column 12, :end-line 2748, :column 7, :line 2748, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2749, :column 4, :line 2749, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2749, :column 5, :line 2749, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2749, :column 7, :line 2749, :file "cljs/core.cljs"} b ^{:end-column 14, :end-line 2749, :column 9, :line 2749, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2750, :column 4, :line 2750, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2750, :column 5, :line 2750, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2750, :column 7, :line 2750, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2750, :column 9, :line 2750, :file "cljs/core.cljs"} c ^{:end-column 16, :end-line 2750, :column 11, :line 2750, :file "cljs/core.cljs"} args] ^{:end-column 20, :end-line 2751, :column 4, :line 2751, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2751, :column 5, :line 2751, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 2751, :column 7, :line 2751, :file "cljs/core.cljs"} b ^{:end-column 11, :end-line 2751, :column 9, :line 2751, :file "cljs/core.cljs"} c ^{:end-column 13, :end-line 2751, :column 11, :line 2751, :file "cljs/core.cljs"} d ^{:end-column 15, :end-line 2751, :column 13, :line 2751, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 2751, :column 15, :line 2751, :file "cljs/core.cljs"} more]), :doc "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.", :end-column 13, :end-line 2744, :column 7, :line 2744, :file "cljs/core.cljs"} list*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 2340, :column 19, :line 2340, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2340, :column 22, :line 2340, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2340, :column 27, :line 2340, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2340, :column 41, :line 2340, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2340, :column 10, :line 2340, :file "cljs/core.cljs"} ->Keyword ^{:arglists ([^{:end-column 22, :end-line 2340, :column 19, :line 2340, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2340, :column 22, :line 2340, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2340, :column 27, :line 2340, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2340, :column 41, :line 2340, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2340, :column 10, :line 2340, :file "cljs/core.cljs"} {:arglists (^cljs.core/Keyword [^{:end-column 22, :end-line 2340, :column 19, :line 2340, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2340, :column 22, :line 2340, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2340, :column 27, :line 2340, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2340, :column 41, :line 2340, :file "cljs/core.cljs"} _hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 2340, :column 19, :line 2340, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2340, :column 22, :line 2340, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2340, :column 27, :line 2340, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2340, :column 41, :line 2340, :file "cljs/core.cljs"} _hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2340, :column 10, :line 2340, :file "cljs/core.cljs"} ->Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 3896, :column 4, :line 3896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3896, :column 5, :line 3896, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3896, :column 7, :line 3896, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3896, :column 8, :line 3896, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3896, :column 10, :line 3896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3896, :column 12, :line 3896, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3896, :column 16, :line 3896, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3900, :column 4, :line 3900, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3900, :column 5, :line 3900, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3900, :column 7, :line 3900, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3900, :column 8, :line 3900, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3900, :column 10, :line 3900, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3900, :column 12, :line 3900, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3900, :column 16, :line 3900, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3900, :column 18, :line 3900, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3904, :column 4, :line 3904, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3904, :column 5, :line 3904, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3904, :column 7, :line 3904, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3904, :column 8, :line 3904, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3904, :column 10, :line 3904, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3904, :column 12, :line 3904, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3904, :column 16, :line 3904, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3904, :column 18, :line 3904, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3904, :column 20, :line 3904, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3908, :column 4, :line 3908, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3908, :column 5, :line 3908, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3908, :column 8, :line 3908, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3908, :column 10, :line 3908, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3908, :column 12, :line 3908, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3908, :column 16, :line 3908, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3908, :column 18, :line 3908, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3908, :column 20, :line 3908, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3908, :column 22, :line 3908, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3912, :column 4, :line 3912, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3912, :column 5, :line 3912, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3912, :column 7, :line 3912, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3912, :column 8, :line 3912, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3912, :column 10, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3912, :column 12, :line 3912, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3912, :column 16, :line 3912, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3912, :column 18, :line 3912, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3912, :column 20, :line 3912, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3912, :column 22, :line 3912, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3912, :column 24, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3912, :column 26, :line 3912, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3890, :column 7, :line 3890, :file "cljs/core.cljs"} update-in ^{:arglists (^{:end-column 18, :end-line 3896, :column 4, :line 3896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3896, :column 5, :line 3896, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3896, :column 7, :line 3896, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3896, :column 8, :line 3896, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3896, :column 10, :line 3896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3896, :column 12, :line 3896, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3896, :column 16, :line 3896, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3900, :column 4, :line 3900, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3900, :column 5, :line 3900, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3900, :column 7, :line 3900, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3900, :column 8, :line 3900, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3900, :column 10, :line 3900, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3900, :column 12, :line 3900, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3900, :column 16, :line 3900, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3900, :column 18, :line 3900, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3904, :column 4, :line 3904, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3904, :column 5, :line 3904, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3904, :column 7, :line 3904, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3904, :column 8, :line 3904, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3904, :column 10, :line 3904, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3904, :column 12, :line 3904, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3904, :column 16, :line 3904, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3904, :column 18, :line 3904, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3904, :column 20, :line 3904, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3908, :column 4, :line 3908, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3908, :column 5, :line 3908, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3908, :column 8, :line 3908, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3908, :column 10, :line 3908, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3908, :column 12, :line 3908, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3908, :column 16, :line 3908, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3908, :column 18, :line 3908, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3908, :column 20, :line 3908, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3908, :column 22, :line 3908, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3912, :column 4, :line 3912, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3912, :column 5, :line 3912, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3912, :column 7, :line 3912, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3912, :column 8, :line 3912, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3912, :column 10, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3912, :column 12, :line 3912, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3912, :column 16, :line 3912, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3912, :column 18, :line 3912, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3912, :column 20, :line 3912, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3912, :column 22, :line 3912, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3912, :column 24, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3912, :column 26, :line 3912, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3890, :column 7, :line 3890, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3896, :column 5, :line 3896, :file "cljs/core.cljs"} m p__8778 ^{:end-column 18, :end-line 3896, :column 16, :line 3896, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3900, :column 5, :line 3900, :file "cljs/core.cljs"} m p__8781 ^{:end-column 18, :end-line 3900, :column 16, :line 3900, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3900, :column 18, :line 3900, :file "cljs/core.cljs"} a] [^{:end-column 7, :end-line 3904, :column 5, :line 3904, :file "cljs/core.cljs"} m p__8784 ^{:end-column 18, :end-line 3904, :column 16, :line 3904, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3904, :column 18, :line 3904, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3904, :column 20, :line 3904, :file "cljs/core.cljs"} b] [^{:end-column 7, :end-line 3908, :column 5, :line 3908, :file "cljs/core.cljs"} m p__8787 ^{:end-column 18, :end-line 3908, :column 16, :line 3908, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3908, :column 18, :line 3908, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3908, :column 20, :line 3908, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3908, :column 22, :line 3908, :file "cljs/core.cljs"} c] [^{:end-column 7, :end-line 3912, :column 5, :line 3912, :file "cljs/core.cljs"} m p__8790 ^{:end-column 18, :end-line 3912, :column 16, :line 3912, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3912, :column 18, :line 3912, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3912, :column 20, :line 3912, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3912, :column 22, :line 3912, :file "cljs/core.cljs"} c & ^{:end-column 31, :end-line 3912, :column 26, :line 3912, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 3896, :column 4, :line 3896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3896, :column 5, :line 3896, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3896, :column 7, :line 3896, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3896, :column 8, :line 3896, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3896, :column 10, :line 3896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3896, :column 12, :line 3896, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3896, :column 16, :line 3896, :file "cljs/core.cljs"} f] ^{:end-column 20, :end-line 3900, :column 4, :line 3900, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3900, :column 5, :line 3900, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3900, :column 7, :line 3900, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3900, :column 8, :line 3900, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3900, :column 10, :line 3900, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3900, :column 12, :line 3900, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3900, :column 16, :line 3900, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3900, :column 18, :line 3900, :file "cljs/core.cljs"} a] ^{:end-column 22, :end-line 3904, :column 4, :line 3904, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3904, :column 5, :line 3904, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3904, :column 7, :line 3904, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3904, :column 8, :line 3904, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3904, :column 10, :line 3904, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3904, :column 12, :line 3904, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3904, :column 16, :line 3904, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3904, :column 18, :line 3904, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3904, :column 20, :line 3904, :file "cljs/core.cljs"} b] ^{:end-column 24, :end-line 3908, :column 4, :line 3908, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3908, :column 5, :line 3908, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3908, :column 7, :line 3908, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3908, :column 8, :line 3908, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3908, :column 10, :line 3908, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3908, :column 12, :line 3908, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3908, :column 16, :line 3908, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3908, :column 18, :line 3908, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3908, :column 20, :line 3908, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3908, :column 22, :line 3908, :file "cljs/core.cljs"} c] ^{:end-column 31, :end-line 3912, :column 4, :line 3912, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3912, :column 5, :line 3912, :file "cljs/core.cljs"} m ^{:end-column 15, :end-line 3912, :column 7, :line 3912, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3912, :column 8, :line 3912, :file "cljs/core.cljs"} k ^{:end-column 12, :end-line 3912, :column 10, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 3912, :column 12, :line 3912, :file "cljs/core.cljs"} ks] ^{:end-column 18, :end-line 3912, :column 16, :line 3912, :file "cljs/core.cljs"} f ^{:end-column 20, :end-line 3912, :column 18, :line 3912, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 3912, :column 20, :line 3912, :file "cljs/core.cljs"} b ^{:end-column 24, :end-line 3912, :column 22, :line 3912, :file "cljs/core.cljs"} c ^{:end-column 26, :end-line 3912, :column 24, :line 3912, :file "cljs/core.cljs"} & ^{:end-column 31, :end-line 3912, :column 26, :line 3912, :file "cljs/core.cljs"} args]), :doc "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.", :end-column 17, :end-line 3890, :column 7, :line 3890, :file "cljs/core.cljs"} update-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 8819, :column 3, :line 8819, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8819, :column 4, :line 8819, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8819, :column 12, :line 8819, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8819, :column 27, :line 8819, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8816, :column 7, :line 8816, :file "cljs/core.cljs"} prefer-method ^{:arglists (^{:end-column 42, :end-line 8819, :column 3, :line 8819, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8819, :column 4, :line 8819, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8819, :column 12, :line 8819, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8819, :column 27, :line 8819, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8816, :column 7, :line 8816, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8819, :column 4, :line 8819, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8819, :column 12, :line 8819, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8819, :column 27, :line 8819, :file "cljs/core.cljs"} dispatch-val-y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 8819, :column 3, :line 8819, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8819, :column 4, :line 8819, :file "cljs/core.cljs"} multifn ^{:end-column 27, :end-line 8819, :column 12, :line 8819, :file "cljs/core.cljs"} dispatch-val-x ^{:end-column 42, :end-line 8819, :column 27, :line 8819, :file "cljs/core.cljs"} dispatch-val-y]), :doc "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict", :end-column 21, :end-line 8816, :column 7, :line 8816, :file "cljs/core.cljs"} prefer-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 545, :column 20, :line 545, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 545, :column 21, :line 545, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 545, :column 8, :line 545, :file "cljs/core.cljs"} hash-symbol ^{:arglists (^{:end-column 25, :end-line 545, :column 20, :line 545, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 545, :column 21, :line 545, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 545, :column 8, :line 545, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 545, :column 21, :line 545, :file "cljs/core.cljs"} sym]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 545, :column 20, :line 545, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 545, :column 21, :line 545, :file "cljs/core.cljs"} sym]), :private true, :end-column 20, :end-line 545, :column 8, :line 545, :file "cljs/core.cljs"} hash-symbol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 5386, :column 4, :line 5386, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5386, :column 5, :line 5386, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5386, :column 11, :line 5386, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5386, :column 16, :line 5386, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5386, :column 18, :line 5386, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5390, :column 4, :line 5390, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5390, :column 5, :line 5390, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5390, :column 11, :line 5390, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5390, :column 16, :line 5390, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5390, :column 18, :line 5390, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5390, :column 20, :line 5390, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5390, :column 22, :line 5390, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5385, :column 8, :line 5385, :file "cljs/core.cljs"} edit-and-set ^{:arglists (^{:end-column 20, :end-line 5386, :column 4, :line 5386, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5386, :column 5, :line 5386, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5386, :column 11, :line 5386, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5386, :column 16, :line 5386, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5386, :column 18, :line 5386, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5390, :column 4, :line 5390, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5390, :column 5, :line 5390, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5390, :column 11, :line 5390, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5390, :column 16, :line 5390, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5390, :column 18, :line 5390, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5390, :column 20, :line 5390, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5390, :column 22, :line 5390, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5385, :column 8, :line 5385, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5386, :column 5, :line 5386, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5386, :column 11, :line 5386, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5386, :column 16, :line 5386, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5386, :column 18, :line 5386, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 5390, :column 5, :line 5390, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5390, :column 11, :line 5390, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5390, :column 16, :line 5390, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5390, :column 18, :line 5390, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5390, :column 20, :line 5390, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5390, :column 22, :line 5390, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 5386, :column 4, :line 5386, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5386, :column 5, :line 5386, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5386, :column 11, :line 5386, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5386, :column 16, :line 5386, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5386, :column 18, :line 5386, :file "cljs/core.cljs"} a] ^{:end-column 24, :end-line 5390, :column 4, :line 5390, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5390, :column 5, :line 5390, :file "cljs/core.cljs"} inode ^{:end-column 16, :end-line 5390, :column 11, :line 5390, :file "cljs/core.cljs"} edit ^{:end-column 18, :end-line 5390, :column 16, :line 5390, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5390, :column 18, :line 5390, :file "cljs/core.cljs"} a ^{:end-column 22, :end-line 5390, :column 20, :line 5390, :file "cljs/core.cljs"} j ^{:end-column 24, :end-line 5390, :column 22, :line 5390, :file "cljs/core.cljs"} b]), :private true, :end-column 21, :end-line 5385, :column 8, :line 5385, :file "cljs/core.cljs"} edit-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 35, :end-line 5094, :column 30, :line 5094, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5094, :column 35, :line 5094, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5094, :column 39, :line 5094, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5094, :column 53, :line 5094, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5094, :column 10, :line 5094, :file "cljs/core.cljs"} ->PersistentArrayMap ^{:arglists ([^{:end-column 35, :end-line 5094, :column 30, :line 5094, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5094, :column 35, :line 5094, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5094, :column 39, :line 5094, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5094, :column 53, :line 5094, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5094, :column 10, :line 5094, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMap [^{:end-column 35, :end-line 5094, :column 30, :line 5094, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5094, :column 35, :line 5094, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5094, :column 39, :line 5094, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5094, :column 53, :line 5094, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 35, :end-line 5094, :column 30, :line 5094, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5094, :column 35, :line 5094, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5094, :column 39, :line 5094, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5094, :column 53, :line 5094, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5094, :column 10, :line 5094, :file "cljs/core.cljs"} ->PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 76, :column 10, :line 76, :file "cljs/core.cljs"} instance? ^{:arglists (^{:end-column 31, :end-line 539, :column 26, :line 539, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 539, :column 27, :line 539, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 539, :column 29, :line 539, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 539, :column 8, :line 539, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 539, :column 16, :line 539, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 29, :end-line 539, :column 27, :line 539, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 539, :column 29, :line 539, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 539, :column 26, :line 539, :file "cljs/core.cljs"} [^{:end-column 29, :end-line 539, :column 27, :line 539, :file "cljs/core.cljs"} t ^{:end-column 31, :end-line 539, :column 29, :line 539, :file "cljs/core.cljs"} o]), :tag ^{:end-column 16, :end-line 539, :column 8, :line 539, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 539, :column 16, :line 539, :file "cljs/core.cljs"} instance?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 702, :column 3, :line 702, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 702, :column 4, :line 702, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 702, :column 15, :line 702, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 696, :column 8, :line 696, :file "cljs/core.cljs"} number, :end-column 35, :end-line 696, :column 15, :line 696, :file "cljs/core.cljs"} mix-collection-hash ^{:arglists (^{:end-column 21, :end-line 702, :column 3, :line 702, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 702, :column 4, :line 702, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 702, :column 15, :line 702, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 696, :column 8, :line 696, :file "cljs/core.cljs"} number, :end-column 35, :end-line 696, :column 15, :line 696, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 15, :end-line 702, :column 4, :line 702, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 702, :column 15, :line 702, :file "cljs/core.cljs"} count]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 702, :column 3, :line 702, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 702, :column 4, :line 702, :file "cljs/core.cljs"} hash-basis ^{:end-column 21, :end-line 702, :column 15, :line 702, :file "cljs/core.cljs"} count]), :doc "Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 696, :column 8, :line 696, :file "cljs/core.cljs"} number, :end-column 35, :end-line 696, :column 15, :line 696, :file "cljs/core.cljs"} mix-collection-hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7796, :column 3, :line 7796, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7796, :column 4, :line 7796, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7796, :column 7, :line 7796, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7791, :column 7, :line 7791, :file "cljs/core.cljs"} re-find ^{:arglists (^{:end-column 9, :end-line 7796, :column 3, :line 7796, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7796, :column 4, :line 7796, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7796, :column 7, :line 7796, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7791, :column 7, :line 7791, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7796, :column 4, :line 7796, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7796, :column 7, :line 7796, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7796, :column 3, :line 7796, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7796, :column 4, :line 7796, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7796, :column 7, :line 7796, :file "cljs/core.cljs"} s]), :doc "Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.", :end-column 15, :end-line 7791, :column 7, :line 7791, :file "cljs/core.cljs"} re-find, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 8317, :column 3, :line 8317, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8317, :column 4, :line 8317, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8317, :column 9, :line 8317, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} run! ^{:arglists (^{:end-column 14, :end-line 8317, :column 3, :line 8317, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8317, :column 4, :line 8317, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8317, :column 9, :line 8317, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8317, :column 4, :line 8317, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8317, :column 9, :line 8317, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 8317, :column 3, :line 8317, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8317, :column 4, :line 8317, :file "cljs/core.cljs"} proc ^{:end-column 14, :end-line 8317, :column 9, :line 8317, :file "cljs/core.cljs"} coll]), :doc "Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil", :end-column 12, :end-line 8314, :column 7, :line 8314, :file "cljs/core.cljs"} run!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 17, :end-line 7862, :column 1, :line 7854, :file "cljs/core.cljs"} char-escapes ^{:private true, :end-column 17, :end-line 7862, :column 1, :line 7854, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 17, :end-line 7862, :column 1, :line 7854, :file "cljs/core.cljs"} char-escapes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 4911, :column 10, :line 4911, :file "cljs/core.cljs"} ES6Iterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 22, :end-line 4911, :column 10, :line 4911, :file "cljs/core.cljs"} ES6Iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 35, :end-line 4911, :column 22, :line 4911, :file "cljs/core.cljs"} [^{:mutable true, :end-column 35, :end-line 4911, :column 33, :line 4911, :file "cljs/core.cljs"} s], :protocols #{Object}}, ^{:declared true, :end-column 18, :end-line 2103, :column 14, :line 2103, :file "cljs/core.cljs"} val ^{:arglists (^{:end-column 14, :end-line 7041, :column 3, :line 7041, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 7041, :column 4, :line 7041, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 7039, :column 7, :line 7039, :file "cljs/core.cljs"} {:arglists ([^{:end-column 14, :end-line 7041, :column 4, :line 7041, :file "cljs/core.cljs"} map-entry]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7041, :column 3, :line 7041, :file "cljs/core.cljs"} [^{:end-column 14, :end-line 7041, :column 4, :line 7041, :file "cljs/core.cljs"} map-entry]), :doc "Returns the value in the map entry.", :end-column 11, :end-line 7039, :column 7, :line 7039, :file "cljs/core.cljs"} val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1827, :column 4, :line 1827, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1827, :column 5, :line 1827, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1827, :column 9, :line 1827, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1827, :column 11, :line 1827, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1822, :column 8, :line 1822, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1822, :column 15, :line 1822, :file "cljs/core.cljs"} unchecked-add ^{:arglists (^{:end-column 6, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1827, :column 4, :line 1827, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1827, :column 5, :line 1827, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1827, :column 9, :line 1827, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1827, :column 11, :line 1827, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1822, :column 8, :line 1822, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1822, :column 15, :line 1822, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1827, :column 5, :line 1827, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1827, :column 11, :line 1827, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1824, :column 4, :line 1824, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1825, :column 4, :line 1825, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1825, :column 5, :line 1825, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1826, :column 4, :line 1826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1826, :column 5, :line 1826, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1826, :column 7, :line 1826, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1827, :column 4, :line 1827, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1827, :column 5, :line 1827, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1827, :column 7, :line 1827, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1827, :column 9, :line 1827, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1827, :column 11, :line 1827, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1822, :column 8, :line 1822, :file "cljs/core.cljs"} number, :end-column 29, :end-line 1822, :column 15, :line 1822, :file "cljs/core.cljs"} unchecked-add, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 96, :column 3, :line 96, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 96, :column 4, :line 96, :file "cljs/core.cljs"} x]), :doc "Returns true if x is logical false, false otherwise.", :tag ^{:end-column 16, :end-line 94, :column 8, :line 94, :file "cljs/core.cljs"} boolean, :end-column 20, :end-line 94, :column 16, :line 94, :file "cljs/core.cljs"} not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1561, :column 3, :line 1561, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1558, :column 17, :line 1558, :file "cljs/core.cljs"} fn->comparator ^{:arglists (^{:end-column 6, :end-line 1561, :column 3, :line 1561, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1558, :column 17, :line 1558, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1561, :column 3, :line 1561, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1561, :column 4, :line 1561, :file "cljs/core.cljs"} f]), :doc "Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.", :private true, :end-column 32, :end-line 1558, :column 17, :line 1558, :file "cljs/core.cljs"} fn->comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 752, :column 10, :line 752, :file "cljs/core.cljs"} with-meta ^{:arglists (^{:end-column 11, :end-line 1311, :column 3, :line 1311, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1311, :column 4, :line 1311, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1311, :column 6, :line 1311, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1308, :column 7, :line 1308, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1311, :column 4, :line 1311, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1311, :column 6, :line 1311, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 1311, :column 3, :line 1311, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1311, :column 4, :line 1311, :file "cljs/core.cljs"} o ^{:end-column 11, :end-line 1311, :column 6, :line 1311, :file "cljs/core.cljs"} meta]), :doc "Returns an object of the same type and value as obj, with\n  map m as its metadata.", :end-column 17, :end-line 1308, :column 7, :line 1308, :file "cljs/core.cljs"} with-meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 131, :column 12, :line 131, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 131, :column 13, :line 131, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 131, :column 7, :line 131, :file "cljs/core.cljs"} type, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical? ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 80, :column 3, :line 80, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 80, :column 4, :line 80, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 80, :column 6, :line 80, :file "cljs/core.cljs"} y]), :doc "Tests if 2 arguments are the same object", :tag ^{:end-column 16, :end-line 78, :column 8, :line 78, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 78, :column 16, :line 78, :file "cljs/core.cljs"} identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} -namespace ^{:arglists (^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 384, :column 23, :line 384, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 384, :column 24, :line 384, :file "cljs/core.cljs"} x]), :protocol cljs.core/INamed, :tag ^{:end-column 12, :end-line 384, :column 5, :line 384, :file "cljs/core.cljs"} string, :end-column 23, :end-line 384, :column 12, :line 384, :file "cljs/core.cljs"} -namespace, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1845, :column 4, :line 1845, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1845, :column 5, :line 1845, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1846, :column 4, :line 1846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1846, :column 5, :line 1846, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1847, :column 4, :line 1847, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1847, :column 5, :line 1847, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1847, :column 9, :line 1847, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1847, :column 11, :line 1847, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1842, :column 8, :line 1842, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1842, :column 15, :line 1842, :file "cljs/core.cljs"} unchecked-divide-int ^{:arglists (^{:end-column 7, :end-line 1845, :column 4, :line 1845, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1845, :column 5, :line 1845, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1846, :column 4, :line 1846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1846, :column 5, :line 1846, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1847, :column 4, :line 1847, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1847, :column 5, :line 1847, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1847, :column 9, :line 1847, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1847, :column 11, :line 1847, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1842, :column 8, :line 1842, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1842, :column 15, :line 1842, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1845, :column 5, :line 1845, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1846, :column 5, :line 1846, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1847, :column 5, :line 1847, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1847, :column 11, :line 1847, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1845, :column 4, :line 1845, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1845, :column 5, :line 1845, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1846, :column 4, :line 1846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1846, :column 5, :line 1846, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1846, :column 7, :line 1846, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1847, :column 4, :line 1847, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1847, :column 5, :line 1847, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1847, :column 7, :line 1847, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1847, :column 9, :line 1847, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1847, :column 11, :line 1847, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1842, :column 8, :line 1842, :file "cljs/core.cljs"} number, :end-column 36, :end-line 1842, :column 15, :line 1842, :file "cljs/core.cljs"} unchecked-divide-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 41, :end-line 8464, :column 31, :line 8464, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8464, :column 32, :line 8464, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8464, :column 34, :line 8464, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8464, :column 36, :line 8464, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8464, :column 8, :line 8464, :file "cljs/core.cljs"} swap-global-hierarchy! ^{:arglists (^{:end-column 41, :end-line 8464, :column 31, :line 8464, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8464, :column 32, :line 8464, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8464, :column 34, :line 8464, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8464, :column 36, :line 8464, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8464, :column 8, :line 8464, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 8464, :column 32, :line 8464, :file "cljs/core.cljs"} f & ^{:end-column 41, :end-line 8464, :column 36, :line 8464, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 41, :end-line 8464, :column 31, :line 8464, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 8464, :column 32, :line 8464, :file "cljs/core.cljs"} f ^{:end-column 36, :end-line 8464, :column 34, :line 8464, :file "cljs/core.cljs"} & ^{:end-column 41, :end-line 8464, :column 36, :line 8464, :file "cljs/core.cljs"} args]), :private true, :end-column 31, :end-line 8464, :column 8, :line 8464, :file "cljs/core.cljs"} swap-global-hierarchy!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7406, :column 4, :line 7406, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7406, :column 5, :line 7406, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7406, :column 7, :line 7406, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7407, :column 4, :line 7407, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7407, :column 5, :line 7407, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7407, :column 7, :line 7407, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7407, :column 9, :line 7407, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7408, :column 7, :line 7408, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7408, :column 9, :line 7408, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7408, :column 11, :line 7408, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} max-key ^{:arglists (^{:end-column 9, :end-line 7406, :column 4, :line 7406, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7406, :column 5, :line 7406, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7406, :column 7, :line 7406, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7407, :column 4, :line 7407, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7407, :column 5, :line 7407, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7407, :column 7, :line 7407, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7407, :column 9, :line 7407, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7408, :column 7, :line 7408, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7408, :column 9, :line 7408, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7408, :column 11, :line 7408, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7406, :column 5, :line 7406, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7406, :column 7, :line 7406, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7407, :column 5, :line 7407, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7407, :column 7, :line 7407, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7407, :column 9, :line 7407, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7408, :column 7, :line 7408, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7408, :column 9, :line 7408, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7406, :column 4, :line 7406, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7406, :column 5, :line 7406, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7406, :column 7, :line 7406, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7407, :column 4, :line 7407, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7407, :column 5, :line 7407, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7407, :column 7, :line 7407, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7407, :column 9, :line 7407, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7408, :column 4, :line 7408, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7408, :column 5, :line 7408, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7408, :column 7, :line 7408, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7408, :column 9, :line 7408, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7408, :column 11, :line 7408, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7408, :column 13, :line 7408, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is greatest.", :end-column 15, :end-line 7404, :column 7, :line 7404, :file "cljs/core.cljs"} max-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 34, :end-line 7216, :column 29, :line 7216, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7216, :column 34, :line 7216, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7216, :column 53, :line 7216, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7216, :column 10, :line 7216, :file "cljs/core.cljs"} ->PersistentTreeSet ^{:arglists ([^{:end-column 34, :end-line 7216, :column 29, :line 7216, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7216, :column 34, :line 7216, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7216, :column 53, :line 7216, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7216, :column 10, :line 7216, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeSet [^{:end-column 34, :end-line 7216, :column 29, :line 7216, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7216, :column 34, :line 7216, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7216, :column 53, :line 7216, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 7216, :column 29, :line 7216, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 7216, :column 34, :line 7216, :file "cljs/core.cljs"} tree-map ^{:mutable true, :end-column 60, :end-line 7216, :column 53, :line 7216, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :protocols #{Object cljs.core/IReversible cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ISet cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISorted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/ILookup}, :end-column 28, :end-line 7216, :column 10, :line 7216, :file "cljs/core.cljs"} ->PersistentTreeSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 37, :end-line 2467, :column 33, :line 2467, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2467, :column 47, :line 2467, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2467, :column 10, :line 2467, :file "cljs/core.cljs"} ->ChunkBuffer ^{:arglists ([^{:mutable true, :end-column 37, :end-line 2467, :column 33, :line 2467, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2467, :column 47, :line 2467, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2467, :column 10, :line 2467, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:mutable true, :end-column 37, :end-line 2467, :column 33, :line 2467, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2467, :column 47, :line 2467, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 37, :end-line 2467, :column 33, :line 2467, :file "cljs/core.cljs"} buf ^{:mutable true, :end-column 51, :end-line 2467, :column 47, :line 2467, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/ICounted}, :protocols #{Object cljs.core/ICounted}, :end-column 22, :end-line 2467, :column 10, :line 2467, :file "cljs/core.cljs"} ->ChunkBuffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 503, :column 19, :line 503, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 503, :column 20, :line 503, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 503, :column 7, :line 503, :file "cljs/core.cljs"} hash-string ^{:arglists (^{:end-column 22, :end-line 503, :column 19, :line 503, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 503, :column 20, :line 503, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 503, :column 7, :line 503, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 503, :column 20, :line 503, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 503, :column 19, :line 503, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 503, :column 20, :line 503, :file "cljs/core.cljs"} k]), :end-column 19, :end-line 503, :column 7, :line 503, :file "cljs/core.cljs"} hash-string, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6978, :column 10, :line 6978, :file "cljs/core.cljs"} ValSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6978, :column 10, :line 6978, :file "cljs/core.cljs"} ValSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6978, :column 17, :line 6978, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6978, :column 19, :line 6978, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6978, :column 30, :line 6978, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6978, :column 35, :line 6978, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} -prefers ^{:arglists (^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} -prefers, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3407, :column 3, :line 3407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3407, :column 4, :line 3407, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3407, :column 9, :line 3407, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3400, :column 7, :line 3400, :file "cljs/core.cljs"} set-validator! ^{:arglists (^{:end-column 13, :end-line 3407, :column 3, :line 3407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3407, :column 4, :line 3407, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3407, :column 9, :line 3407, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3400, :column 7, :line 3400, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3407, :column 4, :line 3407, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3407, :column 9, :line 3407, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3407, :column 3, :line 3407, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3407, :column 4, :line 3407, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 3407, :column 9, :line 3407, :file "cljs/core.cljs"} val]), :doc "Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.", :end-column 22, :end-line 3400, :column 7, :line 3400, :file "cljs/core.cljs"} set-validator!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 4989, :column 34, :line 4989, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4989, :column 35, :line 4989, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4989, :column 39, :line 4989, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4989, :column 41, :line 4989, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4989, :column 8, :line 4989, :file "cljs/core.cljs"} array-map-index-of-equiv? ^{:arglists (^{:end-column 43, :end-line 4989, :column 34, :line 4989, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4989, :column 35, :line 4989, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4989, :column 39, :line 4989, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4989, :column 41, :line 4989, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4989, :column 8, :line 4989, :file "cljs/core.cljs"} {:arglists ([^{:end-column 39, :end-line 4989, :column 35, :line 4989, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4989, :column 39, :line 4989, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4989, :column 41, :line 4989, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 4989, :column 34, :line 4989, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 4989, :column 35, :line 4989, :file "cljs/core.cljs"} arr ^{:end-column 41, :end-line 4989, :column 39, :line 4989, :file "cljs/core.cljs"} m ^{:end-column 43, :end-line 4989, :column 41, :line 4989, :file "cljs/core.cljs"} k]), :private true, :end-column 34, :end-line 4989, :column 8, :line 4989, :file "cljs/core.cljs"} array-map-index-of-equiv?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} -meta ^{:arglists (^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 291, :column 22, :line 291, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 291, :column 23, :line 291, :file "cljs/core.cljs"} o]), :protocol cljs.core/IMeta, :tag ^{:end-column 16, :end-line 291, :column 5, :line 291, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 291, :column 16, :line 291, :file "cljs/core.cljs"} -meta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 6264, :column 10, :line 6264, :file "cljs/core.cljs"} RedNode {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 18, :end-line 6469, :column 10, :line 6469, :file "cljs/core.cljs"} RedNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 6469, :column 18, :line 6469, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 6469, :column 19, :line 6469, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 6469, :column 23, :line 6469, :file "cljs/core.cljs"} val ^{:end-column 32, :end-line 6469, :column 27, :line 6469, :file "cljs/core.cljs"} left ^{:end-column 38, :end-line 6469, :column 32, :line 6469, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 55, :end-line 6469, :column 48, :line 6469, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists ([^{:end-column 34, :end-line 865, :column 30, :line 865, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 46, :end-line 865, :column 44, :line 865, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 865, :column 10, :line 865, :file "cljs/core.cljs"} ->IndexedSeqIterator ^{:arglists ([^{:end-column 34, :end-line 865, :column 30, :line 865, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 46, :end-line 865, :column 44, :line 865, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 865, :column 10, :line 865, :file "cljs/core.cljs"} {:arglists (^cljs.core/IndexedSeqIterator [^{:end-column 34, :end-line 865, :column 30, :line 865, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 46, :end-line 865, :column 44, :line 865, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 865, :column 30, :line 865, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 46, :end-line 865, :column 44, :line 865, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 865, :column 10, :line 865, :file "cljs/core.cljs"} ->IndexedSeqIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} -add-method ^{:arglists (^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]), :tag function, :op :var, :name ^{:arglists (^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} -add-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 44, :end-line 6313, :column 25, :line 6313, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6313, :column 26, :line 6313, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6313, :column 30, :line 6313, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6313, :column 34, :line 6313, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6313, :column 38, :line 6313, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6313, :column 8, :line 6313, :file "cljs/core.cljs"} balance-left-del ^{:arglists (^{:end-column 44, :end-line 6313, :column 25, :line 6313, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6313, :column 26, :line 6313, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6313, :column 30, :line 6313, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6313, :column 34, :line 6313, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6313, :column 38, :line 6313, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6313, :column 8, :line 6313, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6313, :column 26, :line 6313, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6313, :column 30, :line 6313, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6313, :column 34, :line 6313, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6313, :column 38, :line 6313, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6313, :column 25, :line 6313, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6313, :column 26, :line 6313, :file "cljs/core.cljs"} key ^{:end-column 34, :end-line 6313, :column 30, :line 6313, :file "cljs/core.cljs"} val ^{:end-column 38, :end-line 6313, :column 34, :line 6313, :file "cljs/core.cljs"} del ^{:end-column 44, :end-line 6313, :column 38, :line 6313, :file "cljs/core.cljs"} right]), :private true, :end-column 25, :end-line 6313, :column 8, :line 6313, :file "cljs/core.cljs"} balance-left-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3374, :column 4, :line 3374, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3374, :column 5, :line 3374, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3374, :column 7, :line 3374, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3378, :column 4, :line 3378, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3378, :column 5, :line 3378, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3378, :column 7, :line 3378, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3378, :column 9, :line 3378, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3382, :column 4, :line 3382, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3382, :column 5, :line 3382, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3382, :column 9, :line 3382, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3382, :column 11, :line 3382, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3386, :column 4, :line 3386, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3386, :column 5, :line 3386, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3386, :column 7, :line 3386, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3386, :column 9, :line 3386, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3386, :column 11, :line 3386, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3386, :column 13, :line 3386, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3386, :column 15, :line 3386, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3369, :column 7, :line 3369, :file "cljs/core.cljs"} swap! ^{:arglists (^{:end-column 9, :end-line 3374, :column 4, :line 3374, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3374, :column 5, :line 3374, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3374, :column 7, :line 3374, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3378, :column 4, :line 3378, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3378, :column 5, :line 3378, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3378, :column 7, :line 3378, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3378, :column 9, :line 3378, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3382, :column 4, :line 3382, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3382, :column 5, :line 3382, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3382, :column 9, :line 3382, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3382, :column 11, :line 3382, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3386, :column 4, :line 3386, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3386, :column 5, :line 3386, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3386, :column 7, :line 3386, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3386, :column 9, :line 3386, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3386, :column 11, :line 3386, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3386, :column 13, :line 3386, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3386, :column 15, :line 3386, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3369, :column 7, :line 3369, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3374, :column 5, :line 3374, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3374, :column 7, :line 3374, :file "cljs/core.cljs"} f] [^{:end-column 7, :end-line 3378, :column 5, :line 3378, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3378, :column 7, :line 3378, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3378, :column 9, :line 3378, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 3382, :column 5, :line 3382, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3382, :column 9, :line 3382, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3382, :column 11, :line 3382, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 3386, :column 5, :line 3386, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3386, :column 7, :line 3386, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3386, :column 9, :line 3386, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3386, :column 11, :line 3386, :file "cljs/core.cljs"} y & ^{:end-column 20, :end-line 3386, :column 15, :line 3386, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3374, :column 4, :line 3374, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3374, :column 5, :line 3374, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3374, :column 7, :line 3374, :file "cljs/core.cljs"} f] ^{:end-column 11, :end-line 3378, :column 4, :line 3378, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3378, :column 5, :line 3378, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3378, :column 7, :line 3378, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3378, :column 9, :line 3378, :file "cljs/core.cljs"} x] ^{:end-column 13, :end-line 3382, :column 4, :line 3382, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3382, :column 5, :line 3382, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3382, :column 7, :line 3382, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3382, :column 9, :line 3382, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3382, :column 11, :line 3382, :file "cljs/core.cljs"} y] ^{:end-column 20, :end-line 3386, :column 4, :line 3386, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3386, :column 5, :line 3386, :file "cljs/core.cljs"} a ^{:end-column 9, :end-line 3386, :column 7, :line 3386, :file "cljs/core.cljs"} f ^{:end-column 11, :end-line 3386, :column 9, :line 3386, :file "cljs/core.cljs"} x ^{:end-column 13, :end-line 3386, :column 11, :line 3386, :file "cljs/core.cljs"} y ^{:end-column 15, :end-line 3386, :column 13, :line 3386, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 3386, :column 15, :line 3386, :file "cljs/core.cljs"} more]), :doc "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.", :end-column 13, :end-line 3369, :column 7, :line 3369, :file "cljs/core.cljs"} swap!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 5083, :column 15, :line 5083, :file "cljs/core.cljs"} vals ^{:arglists (^{:end-column 13, :end-line 7035, :column 3, :line 7035, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7035, :column 4, :line 7035, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 7033, :column 7, :line 7033, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 7035, :column 4, :line 7035, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 7035, :column 3, :line 7035, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 7035, :column 4, :line 7035, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's values.", :end-column 12, :end-line 7033, :column 7, :line 7033, :file "cljs/core.cljs"} vals, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} -chunked-next ^{:arglists (^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IChunkedNext, :end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} -chunked-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1883, :column 4, :line 1883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1883, :column 5, :line 1883, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1884, :column 4, :line 1884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1884, :column 5, :line 1884, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1885, :column 4, :line 1885, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1885, :column 5, :line 1885, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1885, :column 7, :line 1885, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1885, :column 9, :line 1885, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1885, :column 11, :line 1885, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} unchecked-subtract ^{:arglists (^{:end-column 7, :end-line 1883, :column 4, :line 1883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1883, :column 5, :line 1883, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1884, :column 4, :line 1884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1884, :column 5, :line 1884, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1885, :column 4, :line 1885, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1885, :column 5, :line 1885, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1885, :column 7, :line 1885, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1885, :column 9, :line 1885, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1885, :column 11, :line 1885, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 7, :end-line 1883, :column 5, :line 1883, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1884, :column 5, :line 1884, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1885, :column 5, :line 1885, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1885, :column 7, :line 1885, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1885, :column 11, :line 1885, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1883, :column 4, :line 1883, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1883, :column 5, :line 1883, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1884, :column 4, :line 1884, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1884, :column 5, :line 1884, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1884, :column 7, :line 1884, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1885, :column 4, :line 1885, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1885, :column 5, :line 1885, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1885, :column 7, :line 1885, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1885, :column 9, :line 1885, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1885, :column 11, :line 1885, :file "cljs/core.cljs"} more]), :doc "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.", :tag ^{:end-column 15, :end-line 1880, :column 8, :line 1880, :file "cljs/core.cljs"} number, :end-column 34, :end-line 1880, :column 15, :line 1880, :file "cljs/core.cljs"} unchecked-subtract, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5373, :column 20, :line 5373, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5373, :column 21, :line 5373, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5373, :column 25, :line 5373, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5373, :column 8, :line 5373, :file "cljs/core.cljs"} remove-pair ^{:arglists (^{:end-column 27, :end-line 5373, :column 20, :line 5373, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5373, :column 21, :line 5373, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5373, :column 25, :line 5373, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5373, :column 8, :line 5373, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 25, :end-line 5373, :column 21, :line 5373, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5373, :column 25, :line 5373, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5373, :column 20, :line 5373, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 5373, :column 21, :line 5373, :file "cljs/core.cljs"} arr ^{:end-column 27, :end-line 5373, :column 25, :line 5373, :file "cljs/core.cljs"} i]), :private true, :end-column 20, :end-line 5373, :column 8, :line 5373, :file "cljs/core.cljs"} remove-pair, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} IMap ^{:impls (cljs.core/PersistentTreeMap cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} -dissoc [^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]]}}, :protocol-symbol true, :end-column 19, :end-line 266, :column 14, :line 266, :file "cljs/core.cljs"} IMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 34, :end-line 2938, :column 29, :line 2938, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2938, :column 44, :line 2938, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} ->SeqIter ^{:arglists ([^{:mutable true, :end-column 34, :end-line 2938, :column 29, :line 2938, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2938, :column 44, :line 2938, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} {:arglists (^cljs.core/SeqIter [^{:mutable true, :end-column 34, :end-line 2938, :column 29, :line 2938, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2938, :column 44, :line 2938, :file "cljs/core.cljs"} _next]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 34, :end-line 2938, :column 29, :line 2938, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2938, :column 44, :line 2938, :file "cljs/core.cljs"} _next]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} ->SeqIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 7341, :column 4, :line 7341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7341, :column 5, :line 7341, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7341, :column 16, :line 7341, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7341, :column 18, :line 7341, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7339, :column 7, :line 7339, :file "cljs/core.cljs"} sorted-set-by ^{:arglists (^{:end-column 23, :end-line 7341, :column 4, :line 7341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7341, :column 5, :line 7341, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7341, :column 16, :line 7341, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7341, :column 18, :line 7341, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7339, :column 7, :line 7339, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 7341, :column 5, :line 7341, :file "cljs/core.cljs"} comparator & ^{:end-column 23, :end-line 7341, :column 18, :line 7341, :file "cljs/core.cljs"} keys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 7341, :column 4, :line 7341, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 7341, :column 5, :line 7341, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 7341, :column 16, :line 7341, :file "cljs/core.cljs"} & ^{:end-column 23, :end-line 7341, :column 18, :line 7341, :file "cljs/core.cljs"} keys]), :doc "Returns a new sorted set with supplied keys, using the supplied comparator.", :end-column 21, :end-line 7339, :column 7, :line 7339, :file "cljs/core.cljs"} sorted-set-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 4038, :column 10, :line 4038, :file "cljs/core.cljs"} PersistentVector {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 4038, :column 10, :line 4038, :file "cljs/core.cljs"} PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 70, :end-line 4038, :column 27, :line 4038, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 4038, :column 28, :line 4038, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4038, :column 33, :line 4038, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4038, :column 37, :line 4038, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 4038, :column 43, :line 4038, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 4038, :column 48, :line 4038, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 4038, :column 63, :line 4038, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 25, :end-line 617, :column 18, :line 617, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 617, :column 19, :line 617, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 617, :column 7, :line 617, :file "cljs/core.cljs"} cloneable? ^{:arglists (^{:end-column 25, :end-line 617, :column 18, :line 617, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 617, :column 19, :line 617, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 617, :column 7, :line 617, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 25, :end-line 617, :column 19, :line 617, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 617, :column 18, :line 617, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 617, :column 19, :line 617, :file "cljs/core.cljs"} value]), :end-column 18, :end-line 617, :column 7, :line 617, :file "cljs/core.cljs"} cloneable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 486, :column 20, :line 486, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 486, :column 21, :line 486, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 486, :column 7, :line 486, :file "cljs/core.cljs"} hash-string* ^{:arglists (^{:end-column 23, :end-line 486, :column 20, :line 486, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 486, :column 21, :line 486, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 486, :column 7, :line 486, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 23, :end-line 486, :column 21, :line 486, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 486, :column 20, :line 486, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 486, :column 21, :line 486, :file "cljs/core.cljs"} s]), :end-column 20, :end-line 486, :column 7, :line 486, :file "cljs/core.cljs"} hash-string*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 5355, :column 25, :line 5355, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5355, :column 26, :line 5355, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5355, :column 30, :line 5355, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5355, :column 8, :line 5355, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5355, :column 16, :line 5355, :file "cljs/core.cljs"} key-test ^{:arglists (^{:end-column 36, :end-line 5355, :column 25, :line 5355, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5355, :column 26, :line 5355, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5355, :column 30, :line 5355, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5355, :column 8, :line 5355, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5355, :column 16, :line 5355, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 5355, :column 26, :line 5355, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5355, :column 30, :line 5355, :file "cljs/core.cljs"} other]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 5355, :column 25, :line 5355, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 5355, :column 26, :line 5355, :file "cljs/core.cljs"} key ^{:end-column 36, :end-line 5355, :column 30, :line 5355, :file "cljs/core.cljs"} other]), :tag ^{:end-column 16, :end-line 5355, :column 8, :line 5355, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 5355, :column 16, :line 5355, :file "cljs/core.cljs"} key-test, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 45, :end-line 3047, :column 37, :line 3047, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3047, :column 55, :line 3047, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3047, :column 71, :line 3047, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3047, :column 76, :line 3047, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3047, :column 10, :line 3047, :file "cljs/core.cljs"} ->LazyTransformer ^{:arglists ([^{:mutable true, :end-column 45, :end-line 3047, :column 37, :line 3047, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3047, :column 55, :line 3047, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3047, :column 71, :line 3047, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3047, :column 76, :line 3047, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3047, :column 10, :line 3047, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazyTransformer [^{:mutable true, :end-column 45, :end-line 3047, :column 37, :line 3047, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3047, :column 55, :line 3047, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3047, :column 71, :line 3047, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3047, :column 76, :line 3047, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 45, :end-line 3047, :column 37, :line 3047, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3047, :column 55, :line 3047, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3047, :column 71, :line 3047, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3047, :column 76, :line 3047, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3047, :column 10, :line 3047, :file "cljs/core.cljs"} ->LazyTransformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} -reset ^{:arglists (^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]), :protocol cljs.core/IMultiFn, :end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} -reset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} true? ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1446, :column 3, :line 1446, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1446, :column 4, :line 1446, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value true, false otherwise.", :tag ^{:end-column 16, :end-line 1444, :column 8, :line 1444, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1444, :column 16, :line 1444, :file "cljs/core.cljs"} true?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} array ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 169, :column 3, :line 169, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 169, :column 4, :line 169, :file "cljs/core.cljs"} var-args]), :doc "Creates a new javascript array.\n@param {...*} var_args", :tag ^{:end-column 14, :end-line 166, :column 8, :line 166, :file "cljs/core.cljs"} array, :end-column 20, :end-line 166, :column 14, :line 166, :file "cljs/core.cljs"} array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8008, :column 1, :line 8003, :file "cljs/core.cljs"} print ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8008, :column 1, :line 8003, :file "cljs/core.cljs"} {:arglists (^clj-nil [& ^{:end-column 31, :end-line 8007, :column 26, :line 8007, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:doc "Prints the object(s) using string-print.\n  print and println produce output for human consumption.", :end-column 60, :end-line 8008, :column 1, :line 8003, :file "cljs/core.cljs"} print, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} -peek ^{:arglists (^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 278, :column 10, :line 278, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 278, :column 11, :line 278, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IStack, :end-column 10, :end-line 278, :column 4, :line 278, :file "cljs/core.cljs"} -peek, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} ISeq ^{:impls (cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/ChunkedSeq cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 252, :column 4, :line 252, :file "cljs/core.cljs"} -first [^{:end-column 17, :end-line 252, :column 11, :line 252, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 252, :column 12, :line 252, :file "cljs/core.cljs"} coll]], ^{:tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} -rest [^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 19, :end-line 251, :column 14, :line 251, :file "cljs/core.cljs"} ISeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1064, :column 3, :line 1064, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1064, :column 4, :line 1064, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1062, :column 7, :line 1062, :file "cljs/core.cljs"} empty ^{:arglists (^{:end-column 9, :end-line 1064, :column 3, :line 1064, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1064, :column 4, :line 1064, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1062, :column 7, :line 1062, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1064, :column 4, :line 1064, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1064, :column 3, :line 1064, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1064, :column 4, :line 1064, :file "cljs/core.cljs"} coll]), :doc "Returns an empty collection of the same category as coll, or nil", :end-column 13, :end-line 1062, :column 7, :line 1062, :file "cljs/core.cljs"} empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 8813, :column 2, :line 8813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8813, :column 3, :line 8813, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8813, :column 11, :line 8813, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8811, :column 7, :line 8811, :file "cljs/core.cljs"} remove-method ^{:arglists (^{:end-column 24, :end-line 8813, :column 2, :line 8813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8813, :column 3, :line 8813, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8813, :column 11, :line 8813, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8811, :column 7, :line 8811, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 8813, :column 3, :line 8813, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8813, :column 11, :line 8813, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 8813, :column 2, :line 8813, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 8813, :column 3, :line 8813, :file "cljs/core.cljs"} multifn ^{:end-column 24, :end-line 8813, :column 11, :line 8813, :file "cljs/core.cljs"} dispatch-val]), :doc "Removes the method of multimethod associated with dispatch-value.", :end-column 21, :end-line 8811, :column 7, :line 8811, :file "cljs/core.cljs"} remove-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4637, :column 10, :line 4637, :file "cljs/core.cljs"} PersistentQueueSeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}, :end-column 29, :end-line 4637, :column 10, :line 4637, :file "cljs/core.cljs"} PersistentQueueSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 63, :end-line 4637, :column 29, :line 4637, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 4637, :column 30, :line 4637, :file "cljs/core.cljs"} meta ^{:end-column 41, :end-line 4637, :column 35, :line 4637, :file "cljs/core.cljs"} front ^{:end-column 46, :end-line 4637, :column 41, :line 4637, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 63, :end-line 4637, :column 56, :line 4637, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 44, :end-line 6332, :column 26, :line 6332, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6332, :column 27, :line 6332, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6332, :column 31, :line 6332, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6332, :column 35, :line 6332, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6332, :column 40, :line 6332, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6332, :column 8, :line 6332, :file "cljs/core.cljs"} balance-right-del ^{:arglists (^{:end-column 44, :end-line 6332, :column 26, :line 6332, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6332, :column 27, :line 6332, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6332, :column 31, :line 6332, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6332, :column 35, :line 6332, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6332, :column 40, :line 6332, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6332, :column 8, :line 6332, :file "cljs/core.cljs"} {:arglists ([^{:end-column 31, :end-line 6332, :column 27, :line 6332, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6332, :column 31, :line 6332, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6332, :column 35, :line 6332, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6332, :column 40, :line 6332, :file "cljs/core.cljs"} del]), :tag function, :op :var, :name ^{:arglists (^{:end-column 44, :end-line 6332, :column 26, :line 6332, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 6332, :column 27, :line 6332, :file "cljs/core.cljs"} key ^{:end-column 35, :end-line 6332, :column 31, :line 6332, :file "cljs/core.cljs"} val ^{:end-column 40, :end-line 6332, :column 35, :line 6332, :file "cljs/core.cljs"} left ^{:end-column 44, :end-line 6332, :column 40, :line 6332, :file "cljs/core.cljs"} del]), :private true, :end-column 26, :end-line 6332, :column 8, :line 6332, :file "cljs/core.cljs"} balance-right-del, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1732, :column 4, :line 1732, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1732, :column 5, :line 1732, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1733, :column 5, :line 1733, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1733, :column 7, :line 1733, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1734, :column 4, :line 1734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1734, :column 5, :line 1734, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1734, :column 7, :line 1734, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1734, :column 9, :line 1734, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1734, :column 11, :line 1734, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1729, :column 8, :line 1729, :file "cljs/core.cljs"} number} / ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1732, :column 4, :line 1732, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1732, :column 5, :line 1732, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1733, :column 5, :line 1733, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1733, :column 7, :line 1733, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1734, :column 4, :line 1734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1734, :column 5, :line 1734, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1734, :column 7, :line 1734, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1734, :column 9, :line 1734, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1734, :column 11, :line 1734, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1729, :column 8, :line 1729, :file "cljs/core.cljs"} number} {:arglists (^number [^{:end-column 7, :end-line 1732, :column 5, :line 1732, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1733, :column 5, :line 1733, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1733, :column 7, :line 1733, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1734, :column 5, :line 1734, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1734, :column 7, :line 1734, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1734, :column 11, :line 1734, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:file "cljs/core.cljs", :arglists (^{:end-column 7, :end-line 1732, :column 4, :line 1732, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1732, :column 5, :line 1732, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1733, :column 4, :line 1733, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1733, :column 5, :line 1733, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1733, :column 7, :line 1733, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1734, :column 4, :line 1734, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1734, :column 5, :line 1734, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1734, :column 7, :line 1734, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1734, :column 9, :line 1734, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1734, :column 11, :line 1734, :file "cljs/core.cljs"} more]), :doc "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.", :tag ^{:end-column 15, :end-line 1729, :column 8, :line 1729, :file "cljs/core.cljs"} number} /, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 5382, :column 15, :line 5382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5382, :column 16, :line 5382, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5382, :column 21, :line 5382, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5382, :column 8, :line 5382, :file "cljs/core.cljs"} bitpos ^{:arglists (^{:end-column 27, :end-line 5382, :column 15, :line 5382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5382, :column 16, :line 5382, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5382, :column 21, :line 5382, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5382, :column 8, :line 5382, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 5382, :column 16, :line 5382, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5382, :column 21, :line 5382, :file "cljs/core.cljs"} shift]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 5382, :column 15, :line 5382, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 5382, :column 16, :line 5382, :file "cljs/core.cljs"} hash ^{:end-column 27, :end-line 5382, :column 21, :line 5382, :file "cljs/core.cljs"} shift]), :private true, :end-column 15, :end-line 5382, :column 8, :line 5382, :file "cljs/core.cljs"} bitpos, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1969, :column 3, :line 1969, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1969, :column 4, :line 1969, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1969, :column 6, :line 1969, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1967, :column 7, :line 1967, :file "cljs/core.cljs"} bit-or ^{:arglists (^{:end-column 8, :end-line 1969, :column 3, :line 1969, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1969, :column 4, :line 1969, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1969, :column 6, :line 1969, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1967, :column 7, :line 1967, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1969, :column 4, :line 1969, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1969, :column 6, :line 1969, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1969, :column 3, :line 1969, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1969, :column 4, :line 1969, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1969, :column 6, :line 1969, :file "cljs/core.cljs"} y]), :doc "Bitwise or", :end-column 14, :end-line 1967, :column 7, :line 1967, :file "cljs/core.cljs"} bit-or, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 447, :column 23, :line 447, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 447, :column 24, :line 447, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 447, :column 27, :line 447, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 447, :column 8, :line 447, :file "cljs/core.cljs"} number, :end-column 23, :end-line 447, :column 15, :line 447, :file "cljs/core.cljs"} m3-fmix ^{:arglists (^{:end-column 31, :end-line 447, :column 23, :line 447, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 447, :column 24, :line 447, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 447, :column 27, :line 447, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 447, :column 8, :line 447, :file "cljs/core.cljs"} number, :end-column 23, :end-line 447, :column 15, :line 447, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 27, :end-line 447, :column 24, :line 447, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 447, :column 27, :line 447, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 447, :column 23, :line 447, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 447, :column 24, :line 447, :file "cljs/core.cljs"} h1 ^{:end-column 31, :end-line 447, :column 27, :line 447, :file "cljs/core.cljs"} len]), :tag ^{:end-column 15, :end-line 447, :column 8, :line 447, :file "cljs/core.cljs"} number, :end-column 23, :end-line 447, :column 15, :line 447, :file "cljs/core.cljs"} m3-fmix, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 4244, :column 14, :line 4244, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4244, :column 15, :line 4244, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4244, :column 17, :line 4244, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4244, :column 7, :line 4244, :file "cljs/core.cljs"} vector ^{:arglists (^{:end-column 22, :end-line 4244, :column 14, :line 4244, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4244, :column 15, :line 4244, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4244, :column 17, :line 4244, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4244, :column 7, :line 4244, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 22, :end-line 4244, :column 17, :line 4244, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 4244, :column 14, :line 4244, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 4244, :column 15, :line 4244, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 4244, :column 17, :line 4244, :file "cljs/core.cljs"} args]), :end-column 14, :end-line 4244, :column 7, :line 4244, :file "cljs/core.cljs"} vector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 855, :column 10, :line 855, :file "cljs/core.cljs"} hash-coll ^{:arglists (^{:end-column 24, :end-line 2095, :column 18, :line 2095, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2095, :column 19, :line 2095, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 2095, :column 8, :line 2095, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 2095, :column 19, :line 2095, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 2095, :column 18, :line 2095, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2095, :column 19, :line 2095, :file "cljs/core.cljs"} coll]), :private true, :end-column 18, :end-line 2095, :column 8, :line 2095, :file "cljs/core.cljs"} hash-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 5365, :column 4, :line 5365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5365, :column 5, :line 5365, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5365, :column 9, :line 5365, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5365, :column 11, :line 5365, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5368, :column 4, :line 5368, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5368, :column 5, :line 5368, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5368, :column 9, :line 5368, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5368, :column 11, :line 5368, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5368, :column 13, :line 5368, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5368, :column 15, :line 5368, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5364, :column 8, :line 5364, :file "cljs/core.cljs"} clone-and-set ^{:arglists (^{:end-column 13, :end-line 5365, :column 4, :line 5365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5365, :column 5, :line 5365, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5365, :column 9, :line 5365, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5365, :column 11, :line 5365, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5368, :column 4, :line 5368, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5368, :column 5, :line 5368, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5368, :column 9, :line 5368, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5368, :column 11, :line 5368, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5368, :column 13, :line 5368, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5368, :column 15, :line 5368, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5364, :column 8, :line 5364, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 9, :end-line 5365, :column 5, :line 5365, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5365, :column 9, :line 5365, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5365, :column 11, :line 5365, :file "cljs/core.cljs"} a] ^array [^{:end-column 9, :end-line 5368, :column 5, :line 5368, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5368, :column 9, :line 5368, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5368, :column 11, :line 5368, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5368, :column 13, :line 5368, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5368, :column 15, :line 5368, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 5365, :column 4, :line 5365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5365, :column 5, :line 5365, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5365, :column 9, :line 5365, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5365, :column 11, :line 5365, :file "cljs/core.cljs"} a] ^{:end-column 17, :end-line 5368, :column 4, :line 5368, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 5368, :column 5, :line 5368, :file "cljs/core.cljs"} arr ^{:end-column 11, :end-line 5368, :column 9, :line 5368, :file "cljs/core.cljs"} i ^{:end-column 13, :end-line 5368, :column 11, :line 5368, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 5368, :column 13, :line 5368, :file "cljs/core.cljs"} j ^{:end-column 17, :end-line 5368, :column 15, :line 5368, :file "cljs/core.cljs"} b]), :private true, :end-column 22, :end-line 5364, :column 8, :line 5364, :file "cljs/core.cljs"} clone-and-set, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 36, :end-line 5270, :column 10, :line 5270, :file "cljs/core.cljs"} array->transient-hash-map ^{:arglists (^{:end-column 43, :end-line 5342, :column 34, :line 5342, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5342, :column 35, :line 5342, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5342, :column 39, :line 5342, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 5342, :column 8, :line 5342, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj [^{:end-column 39, :end-line 5342, :column 35, :line 5342, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5342, :column 39, :line 5342, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 5342, :column 34, :line 5342, :file "cljs/core.cljs"} [^{:end-column 39, :end-line 5342, :column 35, :line 5342, :file "cljs/core.cljs"} len ^{:end-column 43, :end-line 5342, :column 39, :line 5342, :file "cljs/core.cljs"} arr]), :private true, :end-column 34, :end-line 5342, :column 8, :line 5342, :file "cljs/core.cljs"} array->transient-hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1772, :column 16, :line 1772, :file "cljs/core.cljs"} >= ^{:arglists (^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1772, :column 16, :line 1772, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1775, :column 4, :line 1775, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1775, :column 5, :line 1775, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1776, :column 4, :line 1776, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1776, :column 5, :line 1776, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1776, :column 7, :line 1776, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1777, :column 4, :line 1777, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1777, :column 5, :line 1777, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1777, :column 7, :line 1777, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1777, :column 9, :line 1777, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1777, :column 11, :line 1777, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.", :tag ^{:end-column 16, :end-line 1772, :column 8, :line 1772, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 1772, :column 16, :line 1772, :file "cljs/core.cljs"} >=, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 52, :end-line 7179, :column 38, :line 7179, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 7179, :column 10, :line 7179, :file "cljs/core.cljs"} ->TransientHashSet ^{:arglists ([^{:mutable true, :end-column 52, :end-line 7179, :column 38, :line 7179, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 7179, :column 10, :line 7179, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientHashSet [^{:mutable true, :end-column 52, :end-line 7179, :column 38, :line 7179, :file "cljs/core.cljs"} transient-map]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 52, :end-line 7179, :column 38, :line 7179, :file "cljs/core.cljs"} transient-map]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :protocols #{cljs.core/ITransientSet cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ILookup}, :end-column 27, :end-line 7179, :column 10, :line 7179, :file "cljs/core.cljs"} ->TransientHashSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3626, :column 4, :line 3626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3626, :column 5, :line 3626, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3627, :column 7, :line 3627, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} drop-last ^{:arglists (^{:end-column 7, :end-line 3626, :column 4, :line 3626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3626, :column 5, :line 3626, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3627, :column 7, :line 3627, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3626, :column 5, :line 3626, :file "cljs/core.cljs"} s] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3627, :column 7, :line 3627, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3626, :column 4, :line 3626, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3626, :column 5, :line 3626, :file "cljs/core.cljs"} s] ^{:end-column 9, :end-line 3627, :column 4, :line 3627, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3627, :column 5, :line 3627, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3627, :column 7, :line 3627, :file "cljs/core.cljs"} s]), :doc "Return a lazy sequence of all but the last n (default 1) items in coll", :end-column 17, :end-line 3624, :column 7, :line 3624, :file "cljs/core.cljs"} drop-last, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 2923, :column 21, :line 2923, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2923, :column 35, :line 2923, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2923, :column 10, :line 2923, :file "cljs/core.cljs"} ->ArrayIter ^{:arglists ([^{:end-column 25, :end-line 2923, :column 21, :line 2923, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2923, :column 35, :line 2923, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2923, :column 10, :line 2923, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayIter [^{:end-column 25, :end-line 2923, :column 21, :line 2923, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2923, :column 35, :line 2923, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 2923, :column 21, :line 2923, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2923, :column 35, :line 2923, :file "cljs/core.cljs"} i]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2923, :column 10, :line 2923, :file "cljs/core.cljs"} ->ArrayIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object? ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 102, :column 24, :line 102, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 102, :column 25, :line 102, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 102, :column 8, :line 102, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 102, :column 16, :line 102, :file "cljs/core.cljs"} object?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 29, :end-line 5908, :column 24, :line 5908, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5908, :column 35, :line 5908, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5908, :column 37, :line 5908, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5908, :column 49, :line 5908, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} ->ArrayNodeSeq ^{:arglists ([^{:end-column 29, :end-line 5908, :column 24, :line 5908, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5908, :column 35, :line 5908, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5908, :column 37, :line 5908, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5908, :column 49, :line 5908, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayNodeSeq [^{:end-column 29, :end-line 5908, :column 24, :line 5908, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5908, :column 35, :line 5908, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5908, :column 37, :line 5908, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5908, :column 49, :line 5908, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 29, :end-line 5908, :column 24, :line 5908, :file "cljs/core.cljs"} meta ^{:end-column 35, :end-line 5908, :column 29, :line 5908, :file "cljs/core.cljs"} nodes ^{:end-column 37, :end-line 5908, :column 35, :line 5908, :file "cljs/core.cljs"} i ^{:end-column 39, :end-line 5908, :column 37, :line 5908, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 56, :end-line 5908, :column 49, :line 5908, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 23, :end-line 5908, :column 10, :line 5908, :file "cljs/core.cljs"} ->ArrayNodeSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 6629, :column 24, :line 6629, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6629, :column 25, :line 6629, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6629, :column 30, :line 6629, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6629, :column 8, :line 6629, :file "cljs/core.cljs"} tree-map-append ^{:arglists (^{:end-column 36, :end-line 6629, :column 24, :line 6629, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6629, :column 25, :line 6629, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6629, :column 30, :line 6629, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6629, :column 8, :line 6629, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6629, :column 25, :line 6629, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6629, :column 30, :line 6629, :file "cljs/core.cljs"} right]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 6629, :column 24, :line 6629, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6629, :column 25, :line 6629, :file "cljs/core.cljs"} left ^{:end-column 36, :end-line 6629, :column 30, :line 6629, :file "cljs/core.cljs"} right]), :private true, :end-column 24, :end-line 6629, :column 8, :line 6629, :file "cljs/core.cljs"} tree-map-append, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2902, :column 3, :line 2902, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2902, :column 4, :line 2902, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2900, :column 7, :line 2900, :file "cljs/core.cljs"} not-empty ^{:arglists (^{:end-column 9, :end-line 2902, :column 3, :line 2902, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2902, :column 4, :line 2902, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2900, :column 7, :line 2900, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 2902, :column 4, :line 2902, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2902, :column 3, :line 2902, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2902, :column 4, :line 2902, :file "cljs/core.cljs"} coll]), :doc "If coll is empty, returns nil, else coll", :end-column 17, :end-line 2900, :column 7, :line 2900, :file "cljs/core.cljs"} not-empty, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7365, :column 3, :line 7365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7365, :column 4, :line 7365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7363, :column 7, :line 7363, :file "cljs/core.cljs"} distinct ^{:arglists (^{:end-column 9, :end-line 7365, :column 3, :line 7365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7365, :column 4, :line 7365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7363, :column 7, :line 7363, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 9, :end-line 7365, :column 4, :line 7365, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7365, :column 3, :line 7365, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7365, :column 4, :line 7365, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the elements of coll with duplicates removed", :end-column 16, :end-line 7363, :column 7, :line 7363, :file "cljs/core.cljs"} distinct, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 3844, :column 4, :line 3844, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3844, :column 5, :line 3844, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3844, :column 7, :line 3844, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3846, :column 4, :line 3846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3846, :column 5, :line 3846, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3846, :column 7, :line 3846, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3846, :column 12, :line 3846, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3852, :column 7, :line 3852, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3852, :column 12, :line 3852, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3852, :column 16, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3838, :column 7, :line 3838, :file "cljs/core.cljs"} partition ^{:arglists (^{:end-column 12, :end-line 3844, :column 4, :line 3844, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3844, :column 5, :line 3844, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3844, :column 7, :line 3844, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3846, :column 4, :line 3846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3846, :column 5, :line 3846, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3846, :column 7, :line 3846, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3846, :column 12, :line 3846, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3852, :column 7, :line 3852, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3852, :column 12, :line 3852, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3852, :column 16, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3838, :column 7, :line 3838, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3844, :column 5, :line 3844, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3844, :column 7, :line 3844, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3846, :column 5, :line 3846, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3846, :column 7, :line 3846, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3846, :column 12, :line 3846, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3852, :column 7, :line 3852, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3852, :column 12, :line 3852, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3852, :column 16, :line 3852, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3844, :column 4, :line 3844, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3844, :column 5, :line 3844, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3844, :column 7, :line 3844, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 3846, :column 4, :line 3846, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3846, :column 5, :line 3846, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3846, :column 7, :line 3846, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 3846, :column 12, :line 3846, :file "cljs/core.cljs"} coll] ^{:end-column 21, :end-line 3852, :column 4, :line 3852, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3852, :column 5, :line 3852, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 3852, :column 7, :line 3852, :file "cljs/core.cljs"} step ^{:end-column 16, :end-line 3852, :column 12, :line 3852, :file "cljs/core.cljs"} pad ^{:end-column 21, :end-line 3852, :column 16, :line 3852, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.", :end-column 17, :end-line 3838, :column 7, :line 3838, :file "cljs/core.cljs"} partition, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]], ^{:end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]], ^{:end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]], ^{:end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 23, :end-line 8619, :column 14, :line 8619, :file "cljs/core.cljs"} IMultiFn ^{:impls (cljs.core/MultiFn), :protocol-info {:methods {^{:end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]], ^{:end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]], ^{:end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]], ^{:end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 23, :end-line 8619, :column 14, :line 8619, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 8620, :column 4, :line 8620, :file "cljs/core.cljs"} -reset [^{:end-column 15, :end-line 8620, :column 11, :line 8620, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 8620, :column 12, :line 8620, :file "cljs/core.cljs"} mf]], ^{:end-column 16, :end-line 8621, :column 4, :line 8621, :file "cljs/core.cljs"} -add-method [^{:end-column 40, :end-line 8621, :column 16, :line 8621, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8621, :column 17, :line 8621, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8621, :column 20, :line 8621, :file "cljs/core.cljs"} dispatch-val ^{:end-column 40, :end-line 8621, :column 33, :line 8621, :file "cljs/core.cljs"} method]], ^{:end-column 19, :end-line 8622, :column 4, :line 8622, :file "cljs/core.cljs"} -remove-method [^{:end-column 36, :end-line 8622, :column 19, :line 8622, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8622, :column 20, :line 8622, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8622, :column 23, :line 8622, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 19, :end-line 8623, :column 4, :line 8623, :file "cljs/core.cljs"} -prefer-method [^{:end-column 51, :end-line 8623, :column 19, :line 8623, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 8623, :column 20, :line 8623, :file "cljs/core.cljs"} mf ^{:end-column 36, :end-line 8623, :column 23, :line 8623, :file "cljs/core.cljs"} dispatch-val ^{:end-column 51, :end-line 8623, :column 36, :line 8623, :file "cljs/core.cljs"} dispatch-val-y]], ^{:end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} -get-method [^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]], ^{:end-column 13, :end-line 8625, :column 4, :line 8625, :file "cljs/core.cljs"} -methods [^{:end-column 17, :end-line 8625, :column 13, :line 8625, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8625, :column 14, :line 8625, :file "cljs/core.cljs"} mf]], ^{:end-column 13, :end-line 8626, :column 4, :line 8626, :file "cljs/core.cljs"} -prefers [^{:end-column 17, :end-line 8626, :column 13, :line 8626, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 8626, :column 14, :line 8626, :file "cljs/core.cljs"} mf]]}}, :protocol-symbol true, :end-column 23, :end-line 8619, :column 14, :line 8619, :file "cljs/core.cljs"} IMultiFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1894, :column 20, :line 1894, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1894, :column 21, :line 1894, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} fix ^{:arglists (^{:end-column 23, :end-line 1894, :column 20, :line 1894, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1894, :column 21, :line 1894, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1894, :column 21, :line 1894, :file "cljs/core.cljs"} q]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1894, :column 20, :line 1894, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1894, :column 21, :line 1894, :file "cljs/core.cljs"} q]), :private true, :tag ^{:end-column 16, :end-line 1894, :column 9, :line 1894, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1894, :column 16, :line 1894, :file "cljs/core.cljs"} fix, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} EmptyList {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 20, :end-line 2197, :column 10, :line 2197, :file "cljs/core.cljs"} EmptyList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 26, :end-line 2197, :column 20, :line 2197, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 2197, :column 21, :line 2197, :file "cljs/core.cljs"} meta], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} IAssociative ^{:impls (cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} -contains-key? [^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]], ^{:tag ^{:end-column 9, :end-line 264, :column 5, :line 264, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 264, :column 9, :line 264, :file "cljs/core.cljs"} -assoc [^{:end-column 26, :end-line 264, :column 16, :line 264, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 264, :column 17, :line 264, :file "cljs/core.cljs"} coll ^{:end-column 24, :end-line 264, :column 22, :line 264, :file "cljs/core.cljs"} k ^{:end-column 26, :end-line 264, :column 24, :line 264, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 27, :end-line 261, :column 14, :line 261, :file "cljs/core.cljs"} IAssociative, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1982, :column 3, :line 1982, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1982, :column 4, :line 1982, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1982, :column 6, :line 1982, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1980, :column 7, :line 1980, :file "cljs/core.cljs"} bit-flip ^{:arglists (^{:end-column 8, :end-line 1982, :column 3, :line 1982, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1982, :column 4, :line 1982, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1982, :column 6, :line 1982, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1980, :column 7, :line 1980, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1982, :column 4, :line 1982, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1982, :column 6, :line 1982, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1982, :column 3, :line 1982, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1982, :column 4, :line 1982, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1982, :column 6, :line 1982, :file "cljs/core.cljs"} n]), :doc "Flip bit at index n", :end-column 16, :end-line 1980, :column 7, :line 1980, :file "cljs/core.cljs"} bit-flip, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2644, :column 4, :line 2644, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2644, :column 5, :line 2644, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2648, :column 4, :line 2648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2648, :column 10, :line 2648, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2643, :column 7, :line 2643, :file "cljs/core.cljs"} long-array ^{:arglists (^{:end-column 17, :end-line 2644, :column 4, :line 2644, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2644, :column 5, :line 2644, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2648, :column 4, :line 2648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2648, :column 10, :line 2648, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2643, :column 7, :line 2643, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2644, :column 5, :line 2644, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 10, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2648, :column 10, :line 2648, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2644, :column 4, :line 2644, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2644, :column 5, :line 2644, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2648, :column 4, :line 2648, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2648, :column 5, :line 2648, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2648, :column 10, :line 2648, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 18, :end-line 2643, :column 7, :line 2643, :file "cljs/core.cljs"} long-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8509, :column 4, :line 8509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8509, :column 5, :line 8509, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8510, :column 4, :line 8510, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8510, :column 5, :line 8510, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8510, :column 7, :line 8510, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8503, :column 7, :line 8503, :file "cljs/core.cljs"} descendants ^{:arglists (^{:end-column 9, :end-line 8509, :column 4, :line 8509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8509, :column 5, :line 8509, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8510, :column 4, :line 8510, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8510, :column 5, :line 8510, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8510, :column 7, :line 8510, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8503, :column 7, :line 8503, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8509, :column 5, :line 8509, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8510, :column 5, :line 8510, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8510, :column 7, :line 8510, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8509, :column 4, :line 8509, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8509, :column 5, :line 8509, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8510, :column 4, :line 8510, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8510, :column 5, :line 8510, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8510, :column 7, :line 8510, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.", :end-column 19, :end-line 8503, :column 7, :line 8503, :file "cljs/core.cljs"} descendants, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 425, :column 22, :line 425, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 425, :column 23, :line 425, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 425, :column 25, :line 425, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 425, :column 10, :line 425, :file "cljs/core.cljs"} number, :end-column 22, :end-line 425, :column 17, :line 425, :file "cljs/core.cljs"} imul ^{:arglists (^{:end-column 27, :end-line 426, :column 22, :line 426, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 426, :column 23, :line 426, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 426, :column 25, :line 426, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 426, :column 10, :line 426, :file "cljs/core.cljs"} number, :end-column 22, :end-line 426, :column 17, :line 426, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 25, :end-line 426, :column 23, :line 426, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 426, :column 25, :line 426, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 426, :column 22, :line 426, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 426, :column 23, :line 426, :file "cljs/core.cljs"} a ^{:end-column 27, :end-line 426, :column 25, :line 426, :file "cljs/core.cljs"} b]), :tag ^{:end-column 17, :end-line 426, :column 10, :line 426, :file "cljs/core.cljs"} number, :end-column 22, :end-line 426, :column 17, :line 426, :file "cljs/core.cljs"} imul, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 29, :end-line 8222, :column 27, :line 8222, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8222, :column 39, :line 8222, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8222, :column 10, :line 8222, :file "cljs/core.cljs"} ->Delay ^{:arglists ([^{:mutable true, :end-column 29, :end-line 8222, :column 27, :line 8222, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8222, :column 39, :line 8222, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8222, :column 10, :line 8222, :file "cljs/core.cljs"} {:arglists (^cljs.core/Delay [^{:mutable true, :end-column 29, :end-line 8222, :column 27, :line 8222, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8222, :column 39, :line 8222, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 29, :end-line 8222, :column 27, :line 8222, :file "cljs/core.cljs"} f ^{:mutable true, :end-column 45, :end-line 8222, :column 39, :line 8222, :file "cljs/core.cljs"} value]), :factory :positional, :skip-protocol-flag #{cljs.core/IPending cljs.core/IDeref}, :protocols #{cljs.core/IPending cljs.core/IDeref}, :end-column 16, :end-line 8222, :column 10, :line 8222, :file "cljs/core.cljs"} ->Delay, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3987, :column 19, :line 3987, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} array-for ^{:arglists (^{:end-column 24, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3987, :column 19, :line 3987, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3987, :column 19, :line 3987, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} i]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 3987, :column 18, :line 3987, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3987, :column 19, :line 3987, :file "cljs/core.cljs"} pv ^{:end-column 24, :end-line 3987, :column 22, :line 3987, :file "cljs/core.cljs"} i]), :private true, :end-column 18, :end-line 3987, :column 8, :line 3987, :file "cljs/core.cljs"} array-for, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 7048, :column 3, :line 7048, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7048, :column 4, :line 7048, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7048, :column 6, :line 7048, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} merge ^{:arglists (^{:end-column 11, :end-line 7048, :column 3, :line 7048, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7048, :column 4, :line 7048, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7048, :column 6, :line 7048, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 7048, :column 6, :line 7048, :file "cljs/core.cljs"} maps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 7048, :column 3, :line 7048, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7048, :column 4, :line 7048, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 7048, :column 6, :line 7048, :file "cljs/core.cljs"} maps]), :doc "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.", :end-column 13, :end-line 7044, :column 7, :line 7044, :file "cljs/core.cljs"} merge, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 23, :end-line 308, :column 14, :line 308, :file "cljs/core.cljs"} ISeqable ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 23, :end-line 308, :column 14, :line 308, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} -seq [^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 23, :end-line 308, :column 14, :line 308, :file "cljs/core.cljs"} ISeqable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1930, :column 3, :line 1930, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1930, :column 4, :line 1930, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1930, :column 6, :line 1930, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1928, :column 7, :line 1928, :file "cljs/core.cljs"} js-mod ^{:arglists (^{:end-column 8, :end-line 1930, :column 3, :line 1930, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1930, :column 4, :line 1930, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1930, :column 6, :line 1930, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1928, :column 7, :line 1928, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1930, :column 4, :line 1930, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1930, :column 6, :line 1930, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1930, :column 3, :line 1930, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1930, :column 4, :line 1930, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 1930, :column 6, :line 1930, :file "cljs/core.cljs"} d]), :doc "Modulus of num and div with original javascript behavior. i.e. bug for negative numbers", :end-column 14, :end-line 1928, :column 7, :line 1928, :file "cljs/core.cljs"} js-mod, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1471, :column 3, :line 1471, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} integer? ^{:arglists (^{:end-column 6, :end-line 1471, :column 3, :line 1471, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1471, :column 3, :line 1471, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1471, :column 4, :line 1471, :file "cljs/core.cljs"} n]), :doc "Returns true if n is an integer.", :tag ^{:end-column 16, :end-line 1469, :column 8, :line 1469, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1469, :column 16, :line 1469, :file "cljs/core.cljs"} integer?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1255, :column 10, :line 1255, :file "cljs/core.cljs"} MetaFn {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}, :end-column 17, :end-line 1255, :column 10, :line 1255, :file "cljs/core.cljs"} MetaFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 27, :end-line 1255, :column 17, :line 1255, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 1255, :column 18, :line 1255, :file "cljs/core.cljs"} afn ^{:end-column 27, :end-line 1255, :column 22, :line 1255, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IFn cljs.core/IMeta cljs.core/Fn cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 12, :end-line 3819, :column 4, :line 3819, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3819, :column 5, :line 3819, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3819, :column 7, :line 3819, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3822, :column 7, :line 3822, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3822, :column 10, :line 3822, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3824, :column 4, :line 3824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3824, :column 5, :line 3824, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3824, :column 7, :line 3824, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3824, :column 10, :line 3824, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3824, :column 13, :line 3824, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3826, :column 4, :line 3826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3826, :column 5, :line 3826, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3826, :column 7, :line 3826, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3826, :column 10, :line 3826, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3826, :column 13, :line 3826, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3826, :column 16, :line 3826, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3826, :column 18, :line 3826, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3813, :column 7, :line 3813, :file "cljs/core.cljs"} mapv ^{:arglists (^{:end-column 12, :end-line 3819, :column 4, :line 3819, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3819, :column 5, :line 3819, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3819, :column 7, :line 3819, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3822, :column 7, :line 3822, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3822, :column 10, :line 3822, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3824, :column 4, :line 3824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3824, :column 5, :line 3824, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3824, :column 7, :line 3824, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3824, :column 10, :line 3824, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3824, :column 13, :line 3824, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3826, :column 4, :line 3826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3826, :column 5, :line 3826, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3826, :column 7, :line 3826, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3826, :column 10, :line 3826, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3826, :column 13, :line 3826, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3826, :column 16, :line 3826, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3826, :column 18, :line 3826, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3813, :column 7, :line 3813, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 7, :end-line 3819, :column 5, :line 3819, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3819, :column 7, :line 3819, :file "cljs/core.cljs"} coll] [^{:end-column 7, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3822, :column 7, :line 3822, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3822, :column 10, :line 3822, :file "cljs/core.cljs"} c2] [^{:end-column 7, :end-line 3824, :column 5, :line 3824, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3824, :column 7, :line 3824, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3824, :column 10, :line 3824, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3824, :column 13, :line 3824, :file "cljs/core.cljs"} c3] [^{:end-column 7, :end-line 3826, :column 5, :line 3826, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3826, :column 7, :line 3826, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3826, :column 10, :line 3826, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3826, :column 13, :line 3826, :file "cljs/core.cljs"} c3 & ^{:end-column 24, :end-line 3826, :column 18, :line 3826, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 3819, :column 4, :line 3819, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3819, :column 5, :line 3819, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3819, :column 7, :line 3819, :file "cljs/core.cljs"} coll] ^{:end-column 13, :end-line 3822, :column 4, :line 3822, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3822, :column 5, :line 3822, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3822, :column 7, :line 3822, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3822, :column 10, :line 3822, :file "cljs/core.cljs"} c2] ^{:end-column 16, :end-line 3824, :column 4, :line 3824, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3824, :column 5, :line 3824, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3824, :column 7, :line 3824, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3824, :column 10, :line 3824, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3824, :column 13, :line 3824, :file "cljs/core.cljs"} c3] ^{:end-column 24, :end-line 3826, :column 4, :line 3826, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3826, :column 5, :line 3826, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 3826, :column 7, :line 3826, :file "cljs/core.cljs"} c1 ^{:end-column 13, :end-line 3826, :column 10, :line 3826, :file "cljs/core.cljs"} c2 ^{:end-column 16, :end-line 3826, :column 13, :line 3826, :file "cljs/core.cljs"} c3 ^{:end-column 18, :end-line 3826, :column 16, :line 3826, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3826, :column 18, :line 3826, :file "cljs/core.cljs"} colls]), :doc "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.", :end-column 12, :end-line 3813, :column 7, :line 3813, :file "cljs/core.cljs"} mapv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7453, :column 4, :line 7453, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7453, :column 5, :line 7453, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7453, :column 7, :line 7453, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7455, :column 4, :line 7455, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7455, :column 5, :line 7455, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7455, :column 7, :line 7455, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7455, :column 12, :line 7455, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7429, :column 7, :line 7429, :file "cljs/core.cljs"} partition-all ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7453, :column 4, :line 7453, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7453, :column 5, :line 7453, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7453, :column 7, :line 7453, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7455, :column 4, :line 7455, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7455, :column 5, :line 7455, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7455, :column 7, :line 7455, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7455, :column 12, :line 7455, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7429, :column 7, :line 7429, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} n] [^{:end-column 7, :end-line 7453, :column 5, :line 7453, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7453, :column 7, :line 7453, :file "cljs/core.cljs"} coll] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7455, :column 5, :line 7455, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7455, :column 7, :line 7455, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7455, :column 12, :line 7455, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7433, :column 4, :line 7433, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7433, :column 5, :line 7433, :file "cljs/core.cljs"} n] ^{:end-column 12, :end-line 7453, :column 4, :line 7453, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7453, :column 5, :line 7453, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7453, :column 7, :line 7453, :file "cljs/core.cljs"} coll] ^{:end-column 17, :end-line 7455, :column 4, :line 7455, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7455, :column 5, :line 7455, :file "cljs/core.cljs"} n ^{:end-column 12, :end-line 7455, :column 7, :line 7455, :file "cljs/core.cljs"} step ^{:end-column 17, :end-line 7455, :column 12, :line 7455, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.", :end-column 21, :end-line 7429, :column 7, :line 7429, :file "cljs/core.cljs"} partition-all, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7680, :column 4, :line 7680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7680, :column 5, :line 7680, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7680, :column 7, :line 7680, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7647, :column 7, :line 7647, :file "cljs/core.cljs"} partition-by ^{:arglists (^{:end-column 7, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7680, :column 4, :line 7680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7680, :column 5, :line 7680, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7680, :column 7, :line 7680, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7647, :column 7, :line 7647, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} f] ^cljs.core/LazySeq [^{:end-column 7, :end-line 7680, :column 5, :line 7680, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7680, :column 7, :line 7680, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 7651, :column 4, :line 7651, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7651, :column 5, :line 7651, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 7680, :column 4, :line 7680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7680, :column 5, :line 7680, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 7680, :column 7, :line 7680, :file "cljs/core.cljs"} coll]), :doc "Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.", :end-column 20, :end-line 7647, :column 7, :line 7647, :file "cljs/core.cljs"} partition-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 47, :end-line 4981, :column 38, :line 4981, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4981, :column 39, :line 4981, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4981, :column 43, :line 4981, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4981, :column 45, :line 4981, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4981, :column 8, :line 4981, :file "cljs/core.cljs"} array-map-index-of-identical? ^{:arglists (^{:end-column 47, :end-line 4981, :column 38, :line 4981, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4981, :column 39, :line 4981, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4981, :column 43, :line 4981, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4981, :column 45, :line 4981, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4981, :column 8, :line 4981, :file "cljs/core.cljs"} {:arglists ([^{:end-column 43, :end-line 4981, :column 39, :line 4981, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4981, :column 43, :line 4981, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4981, :column 45, :line 4981, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 47, :end-line 4981, :column 38, :line 4981, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 4981, :column 39, :line 4981, :file "cljs/core.cljs"} arr ^{:end-column 45, :end-line 4981, :column 43, :line 4981, :file "cljs/core.cljs"} m ^{:end-column 47, :end-line 4981, :column 45, :line 4981, :file "cljs/core.cljs"} k]), :private true, :end-column 38, :end-line 4981, :column 8, :line 4981, :file "cljs/core.cljs"} array-map-index-of-identical?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 26, :end-line 311, :column 14, :line 311, :file "cljs/core.cljs"} ISequential ^{:impls (cljs.core/Eduction cljs.core/Range cljs.core/ValSeq cljs.core/KeySeq cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMapSeq cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 26, :end-line 311, :column 14, :line 311, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 26, :end-line 311, :column 14, :line 311, :file "cljs/core.cljs"} ISequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 24, :end-line 2401, :column 19, :line 2401, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2401, :column 34, :line 2401, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2401, :column 47, :line 2401, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2401, :column 59, :line 2401, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2401, :column 10, :line 2401, :file "cljs/core.cljs"} ->LazySeq ^{:arglists ([^{:end-column 24, :end-line 2401, :column 19, :line 2401, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2401, :column 34, :line 2401, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2401, :column 47, :line 2401, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2401, :column 59, :line 2401, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2401, :column 10, :line 2401, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 24, :end-line 2401, :column 19, :line 2401, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2401, :column 34, :line 2401, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2401, :column 47, :line 2401, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2401, :column 59, :line 2401, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 24, :end-line 2401, :column 19, :line 2401, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 37, :end-line 2401, :column 34, :line 2401, :file "cljs/core.cljs"} fn ^{:mutable true, :end-column 49, :end-line 2401, :column 47, :line 2401, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 66, :end-line 2401, :column 59, :line 2401, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 18, :end-line 2401, :column 10, :line 2401, :file "cljs/core.cljs"} ->LazySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 4743, :column 3, :line 4743, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4743, :column 4, :line 4743, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4743, :column 6, :line 4743, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4740, :column 8, :line 4740, :file "cljs/core.cljs"} equiv-map ^{:arglists (^{:end-column 8, :end-line 4743, :column 3, :line 4743, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4743, :column 4, :line 4743, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4743, :column 6, :line 4743, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4740, :column 8, :line 4740, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 4743, :column 4, :line 4743, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4743, :column 6, :line 4743, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 4743, :column 3, :line 4743, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 4743, :column 4, :line 4743, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 4743, :column 6, :line 4743, :file "cljs/core.cljs"} y]), :doc "Assumes y is a map. Returns true if x equals y, otherwise returns\n  false.", :private true, :end-column 18, :end-line 4740, :column 8, :line 4740, :file "cljs/core.cljs"} equiv-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2684, :column 5, :line 2684, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2688, :column 10, :line 2688, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} object-array ^{:arglists (^{:end-column 17, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2684, :column 5, :line 2684, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2688, :column 10, :line 2688, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 2684, :column 5, :line 2684, :file "cljs/core.cljs"} size-or-seq] ^array [^{:end-column 10, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2688, :column 10, :line 2688, :file "cljs/core.cljs"} init-val-or-seq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 2684, :column 4, :line 2684, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 2684, :column 5, :line 2684, :file "cljs/core.cljs"} size-or-seq] ^{:end-column 26, :end-line 2688, :column 4, :line 2688, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2688, :column 5, :line 2688, :file "cljs/core.cljs"} size ^{:end-column 26, :end-line 2688, :column 10, :line 2688, :file "cljs/core.cljs"} init-val-or-seq]), :end-column 20, :end-line 2683, :column 7, :line 2683, :file "cljs/core.cljs"} object-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 76, :column 20, :line 76, :file "cljs/core.cljs"} Keyword {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}, :end-column 18, :end-line 2340, :column 10, :line 2340, :file "cljs/core.cljs"} Keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 47, :end-line 2340, :column 18, :line 2340, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2340, :column 19, :line 2340, :file "cljs/core.cljs"} ns ^{:end-column 27, :end-line 2340, :column 22, :line 2340, :file "cljs/core.cljs"} name ^{:end-column 31, :end-line 2340, :column 27, :line 2340, :file "cljs/core.cljs"} fqn ^{:mutable true, :end-column 47, :end-line 2340, :column 41, :line 2340, :file "cljs/core.cljs"} _hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/INamed cljs.core/IPrintWithWriter}}, ^{:arglists (^{:end-column 16, :end-line 8518, :column 4, :line 8518, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8518, :column 5, :line 8518, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8518, :column 9, :line 8518, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8522, :column 4, :line 8522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8522, :column 5, :line 8522, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8522, :column 7, :line 8522, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8522, :column 11, :line 8522, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8512, :column 7, :line 8512, :file "cljs/core.cljs"} derive ^{:arglists (^{:end-column 16, :end-line 8518, :column 4, :line 8518, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8518, :column 5, :line 8518, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8518, :column 9, :line 8518, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8522, :column 4, :line 8522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8522, :column 5, :line 8522, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8522, :column 7, :line 8522, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8522, :column 11, :line 8522, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8512, :column 7, :line 8512, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 8518, :column 5, :line 8518, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8518, :column 9, :line 8518, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8522, :column 5, :line 8522, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8522, :column 7, :line 8522, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8522, :column 11, :line 8522, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8518, :column 4, :line 8518, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8518, :column 5, :line 8518, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8518, :column 9, :line 8518, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8522, :column 4, :line 8522, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8522, :column 5, :line 8522, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8522, :column 7, :line 8522, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8522, :column 11, :line 8522, :file "cljs/core.cljs"} parent]), :doc "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 14, :end-line 8512, :column 7, :line 8512, :file "cljs/core.cljs"} derive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 17, :line 2956, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} seq-iter ^{:arglists (^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 17, :line 2956, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} {:arglists (^cljs.core/SeqIter [^{:end-column 22, :end-line 2956, :column 17, :line 2956, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2956, :column 16, :line 2956, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2956, :column 17, :line 2956, :file "cljs/core.cljs"} coll]), :end-column 16, :end-line 2956, :column 7, :line 2956, :file "cljs/core.cljs"} seq-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]], ^{:end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 375, :column 14, :line 375, :file "cljs/core.cljs"} IChunkedSeq ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons), :protocol-info {:methods {^{:end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]], ^{:end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 375, :column 14, :line 375, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 19, :end-line 376, :column 4, :line 376, :file "cljs/core.cljs"} -chunked-first [^{:end-column 25, :end-line 376, :column 19, :line 376, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 376, :column 20, :line 376, :file "cljs/core.cljs"} coll]], ^{:end-column 18, :end-line 377, :column 4, :line 377, :file "cljs/core.cljs"} -chunked-rest [^{:end-column 24, :end-line 377, :column 18, :line 377, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 377, :column 19, :line 377, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 26, :end-line 375, :column 14, :line 375, :file "cljs/core.cljs"} IChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 8903, :column 32, :line 8903, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8903, :column 33, :line 8903, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8903, :column 8, :line 8903, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8903, :column 16, :line 8903, :file "cljs/core.cljs"} special-symbol? ^{:arglists (^{:end-column 35, :end-line 8903, :column 32, :line 8903, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8903, :column 33, :line 8903, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8903, :column 8, :line 8903, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8903, :column 16, :line 8903, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 35, :end-line 8903, :column 33, :line 8903, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 8903, :column 32, :line 8903, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 8903, :column 33, :line 8903, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 8903, :column 8, :line 8903, :file "cljs/core.cljs"} boolean, :end-column 32, :end-line 8903, :column 16, :line 8903, :file "cljs/core.cljs"} special-symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8500, :column 5, :line 8500, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8501, :column 5, :line 8501, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8501, :column 7, :line 8501, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8495, :column 7, :line 8495, :file "cljs/core.cljs"} ancestors ^{:arglists (^{:end-column 9, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8500, :column 5, :line 8500, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8501, :column 5, :line 8501, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8501, :column 7, :line 8501, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8495, :column 7, :line 8495, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8500, :column 5, :line 8500, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8501, :column 5, :line 8501, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8501, :column 7, :line 8501, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8500, :column 4, :line 8500, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8500, :column 5, :line 8500, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8501, :column 4, :line 8501, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8501, :column 5, :line 8501, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8501, :column 7, :line 8501, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 17, :end-line 8495, :column 7, :line 8495, :file "cljs/core.cljs"} ancestors, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7489, :column 4, :line 7489, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7489, :column 5, :line 7489, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7489, :column 8, :line 7489, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7489, :column 13, :line 7489, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7495, :column 4, :line 7495, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7495, :column 8, :line 7495, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7495, :column 19, :line 7495, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7495, :column 29, :line 7495, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7495, :column 38, :line 7495, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7485, :column 7, :line 7485, :file "cljs/core.cljs"} subseq ^{:arglists (^{:end-column 17, :end-line 7489, :column 4, :line 7489, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7489, :column 5, :line 7489, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7489, :column 8, :line 7489, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7489, :column 13, :line 7489, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7495, :column 4, :line 7495, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7495, :column 8, :line 7495, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7495, :column 19, :line 7495, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7495, :column 29, :line 7495, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7495, :column 38, :line 7495, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7485, :column 7, :line 7485, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7489, :column 5, :line 7489, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7489, :column 8, :line 7489, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7489, :column 13, :line 7489, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7495, :column 8, :line 7495, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7495, :column 19, :line 7495, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7495, :column 29, :line 7495, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7495, :column 38, :line 7495, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7489, :column 4, :line 7489, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7489, :column 5, :line 7489, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7489, :column 8, :line 7489, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7489, :column 13, :line 7489, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7495, :column 4, :line 7495, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7495, :column 5, :line 7495, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7495, :column 8, :line 7495, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7495, :column 19, :line 7495, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7495, :column 29, :line 7495, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7495, :column 38, :line 7495, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 14, :end-line 7485, :column 7, :line 7485, :file "cljs/core.cljs"} subseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 26, :end-line 2968, :column 10, :line 2968, :file "cljs/core.cljs"} LazyTransformer {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 3047, :column 10, :line 3047, :file "cljs/core.cljs"} LazyTransformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 81, :end-line 3047, :column 26, :line 3047, :file "cljs/core.cljs"} [^{:mutable true, :end-column 45, :end-line 3047, :column 37, :line 3047, :file "cljs/core.cljs"} stepper ^{:mutable true, :end-column 61, :end-line 3047, :column 55, :line 3047, :file "cljs/core.cljs"} first ^{:mutable true, :end-column 76, :end-line 3047, :column 71, :line 3047, :file "cljs/core.cljs"} rest ^{:end-column 81, :end-line 3047, :column 76, :line 3047, :file "cljs/core.cljs"} meta], :protocols #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 6, :end-line 8209, :column 4, :line 8209, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8210, :column 4, :line 8210, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8210, :column 5, :line 8210, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8205, :column 7, :line 8205, :file "cljs/core.cljs"} gensym ^{:arglists (^{:end-column 6, :end-line 8209, :column 4, :line 8209, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8210, :column 4, :line 8210, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8210, :column 5, :line 8210, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8205, :column 7, :line 8205, :file "cljs/core.cljs"} {:arglists ([] [^{:end-column 19, :end-line 8210, :column 5, :line 8210, :file "cljs/core.cljs"} prefix-string]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8209, :column 4, :line 8209, :file "cljs/core.cljs"} [] ^{:end-column 19, :end-line 8210, :column 4, :line 8210, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 8210, :column 5, :line 8210, :file "cljs/core.cljs"} prefix-string]), :doc "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.", :end-column 14, :end-line 8205, :column 7, :line 8205, :file "cljs/core.cljs"} gensym, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} -next ^{:arglists (^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} {:arglists ([^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 256, :column 22, :line 256, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 256, :column 23, :line 256, :file "cljs/core.cljs"} coll]), :protocol cljs.core/INext, :tag ^{:end-column 16, :end-line 256, :column 5, :line 256, :file "cljs/core.cljs"} clj-or-nil, :end-column 22, :end-line 256, :column 16, :line 256, :file "cljs/core.cljs"} -next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 34, :end-line 5731, :column 29, :line 5731, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5732, :column 39, :line 5732, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5733, :column 39, :line 5733, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5734, :column 39, :line 5734, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5731, :column 10, :line 5731, :file "cljs/core.cljs"} ->HashCollisionNode ^{:arglists ([^{:end-column 34, :end-line 5731, :column 29, :line 5731, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5732, :column 39, :line 5732, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5733, :column 39, :line 5733, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5734, :column 39, :line 5734, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5731, :column 10, :line 5731, :file "cljs/core.cljs"} {:arglists (^cljs.core/HashCollisionNode [^{:end-column 34, :end-line 5731, :column 29, :line 5731, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5732, :column 39, :line 5732, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5733, :column 39, :line 5733, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5734, :column 39, :line 5734, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 34, :end-line 5731, :column 29, :line 5731, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5732, :column 39, :line 5732, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5733, :column 39, :line 5733, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5734, :column 39, :line 5734, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5731, :column 10, :line 5731, :file "cljs/core.cljs"} ->HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 8236, :column 3, :line 8236, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8236, :column 4, :line 8236, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8234, :column 8, :line 8234, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8234, :column 16, :line 8234, :file "cljs/core.cljs"} delay? ^{:arglists (^{:end-column 6, :end-line 8236, :column 3, :line 8236, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8236, :column 4, :line 8236, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8234, :column 8, :line 8234, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8234, :column 16, :line 8234, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 8236, :column 4, :line 8236, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8236, :column 3, :line 8236, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8236, :column 4, :line 8236, :file "cljs/core.cljs"} x]), :doc "returns true if x is a Delay created with delay", :tag ^{:end-column 16, :end-line 8234, :column 8, :line 8234, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 8234, :column 16, :line 8234, :file "cljs/core.cljs"} delay?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 27, :end-line 5353, :column 10, :line 5353, :file "cljs/core.cljs"} create-inode-seq ^{:arglists (^{:end-column 11, :end-line 5892, :column 4, :line 5892, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5892, :column 5, :line 5892, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5894, :column 4, :line 5894, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5894, :column 5, :line 5894, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5894, :column 11, :line 5894, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5894, :column 13, :line 5894, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5891, :column 8, :line 5891, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5892, :column 5, :line 5892, :file "cljs/core.cljs"} nodes] [^{:end-column 11, :end-line 5894, :column 5, :line 5894, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5894, :column 11, :line 5894, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5894, :column 13, :line 5894, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5892, :column 4, :line 5892, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5892, :column 5, :line 5892, :file "cljs/core.cljs"} nodes] ^{:end-column 15, :end-line 5894, :column 4, :line 5894, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5894, :column 5, :line 5894, :file "cljs/core.cljs"} nodes ^{:end-column 13, :end-line 5894, :column 11, :line 5894, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 5894, :column 13, :line 5894, :file "cljs/core.cljs"} s]), :private true, :end-column 25, :end-line 5891, :column 8, :line 5891, :file "cljs/core.cljs"} create-inode-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3795, :column 3, :line 3795, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3795, :column 4, :line 3795, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3791, :column 7, :line 3791, :file "cljs/core.cljs"} flatten ^{:arglists (^{:end-column 6, :end-line 3795, :column 3, :line 3795, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3795, :column 4, :line 3795, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3791, :column 7, :line 3791, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3795, :column 4, :line 3795, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3795, :column 3, :line 3795, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3795, :column 4, :line 3795, :file "cljs/core.cljs"} x]), :doc "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.", :end-column 15, :end-line 3791, :column 7, :line 3791, :file "cljs/core.cljs"} flatten, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} -dissoc ^{:arglists (^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 268, :column 17, :line 268, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 268, :column 18, :line 268, :file "cljs/core.cljs"} coll ^{:end-column 25, :end-line 268, :column 23, :line 268, :file "cljs/core.cljs"} k]), :protocol cljs.core/IMap, :tag ^{:end-column 9, :end-line 268, :column 5, :line 268, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 268, :column 9, :line 268, :file "cljs/core.cljs"} -dissoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 1925, :column 15, :line 1925, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1925, :column 16, :line 1925, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1925, :column 7, :line 1925, :file "cljs/core.cljs"} doubles ^{:arglists (^{:end-column 18, :end-line 1925, :column 15, :line 1925, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1925, :column 16, :line 1925, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1925, :column 7, :line 1925, :file "cljs/core.cljs"} {:arglists ([^{:end-column 18, :end-line 1925, :column 16, :line 1925, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 1925, :column 15, :line 1925, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 1925, :column 16, :line 1925, :file "cljs/core.cljs"} x]), :end-column 15, :end-line 1925, :column 7, :line 1925, :file "cljs/core.cljs"} doubles, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} -contains-key? ^{:arglists (^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 262, :column 28, :line 262, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 262, :column 29, :line 262, :file "cljs/core.cljs"} coll ^{:end-column 36, :end-line 262, :column 34, :line 262, :file "cljs/core.cljs"} k]), :protocol cljs.core/IAssociative, :tag ^{:end-column 13, :end-line 262, :column 5, :line 262, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 262, :column 13, :line 262, :file "cljs/core.cljs"} -contains-key?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 8198, :column 3, :line 8198, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8198, :column 4, :line 8198, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8198, :column 9, :line 8198, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} remove-watch ^{:arglists (^{:end-column 13, :end-line 8198, :column 3, :line 8198, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8198, :column 4, :line 8198, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8198, :column 9, :line 8198, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8198, :column 4, :line 8198, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8198, :column 9, :line 8198, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 8198, :column 3, :line 8198, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8198, :column 4, :line 8198, :file "cljs/core.cljs"} iref ^{:end-column 13, :end-line 8198, :column 9, :line 8198, :file "cljs/core.cljs"} key]), :doc "Alpha - subject to change.\n\n  Removes a watch (set by add-watch) from a reference", :end-column 20, :end-line 8194, :column 7, :line 8194, :file "cljs/core.cljs"} remove-watch, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 8867, :column 4, :line 8867, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8867, :column 5, :line 8867, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8867, :column 9, :line 8867, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8869, :column 4, :line 8869, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8869, :column 5, :line 8869, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8869, :column 9, :line 8869, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8869, :column 13, :line 8869, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8863, :column 7, :line 8863, :file "cljs/core.cljs"} ex-info ^{:arglists (^{:end-column 13, :end-line 8867, :column 4, :line 8867, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8867, :column 5, :line 8867, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8867, :column 9, :line 8867, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8869, :column 4, :line 8869, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8869, :column 5, :line 8869, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8869, :column 9, :line 8869, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8869, :column 13, :line 8869, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8863, :column 7, :line 8863, :file "cljs/core.cljs"} {:arglists (^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 8867, :column 5, :line 8867, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8867, :column 9, :line 8867, :file "cljs/core.cljs"} map] ^cljs.core/ExceptionInfo [^{:end-column 9, :end-line 8869, :column 5, :line 8869, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8869, :column 9, :line 8869, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8869, :column 13, :line 8869, :file "cljs/core.cljs"} cause]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 8867, :column 4, :line 8867, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8867, :column 5, :line 8867, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8867, :column 9, :line 8867, :file "cljs/core.cljs"} map] ^{:end-column 19, :end-line 8869, :column 4, :line 8869, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8869, :column 5, :line 8869, :file "cljs/core.cljs"} msg ^{:end-column 13, :end-line 8869, :column 9, :line 8869, :file "cljs/core.cljs"} map ^{:end-column 19, :end-line 8869, :column 13, :line 8869, :file "cljs/core.cljs"} cause]), :doc "Alpha - subject to change.\n  Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.", :end-column 15, :end-line 8863, :column 7, :line 8863, :file "cljs/core.cljs"} ex-info, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1466, :column 21, :line 1466, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1466, :column 22, :line 1466, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1466, :column 8, :line 1466, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1466, :column 16, :line 1466, :file "cljs/core.cljs"} ifn? ^{:arglists (^{:end-column 24, :end-line 1466, :column 21, :line 1466, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1466, :column 22, :line 1466, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1466, :column 8, :line 1466, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1466, :column 16, :line 1466, :file "cljs/core.cljs"} {:arglists (^^{:end-column 16, :end-line 1253, :column 8, :line 1253, :file "cljs/core.cljs"} boolean [^{:end-column 24, :end-line 1466, :column 22, :line 1466, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1466, :column 21, :line 1466, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1466, :column 22, :line 1466, :file "cljs/core.cljs"} f]), :tag ^{:end-column 16, :end-line 1466, :column 8, :line 1466, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 1466, :column 16, :line 1466, :file "cljs/core.cljs"} ifn?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} IAtom ^{:impls (cljs.core/Atom), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 386, :column 14, :line 386, :file "cljs/core.cljs"} IAtom, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 32, :end-line 4675, :column 27, :line 4675, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4675, :column 32, :line 4675, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4675, :column 38, :line 4675, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4675, :column 44, :line 4675, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4675, :column 59, :line 4675, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4675, :column 10, :line 4675, :file "cljs/core.cljs"} ->PersistentQueue ^{:arglists ([^{:end-column 32, :end-line 4675, :column 27, :line 4675, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4675, :column 32, :line 4675, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4675, :column 38, :line 4675, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4675, :column 44, :line 4675, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4675, :column 59, :line 4675, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4675, :column 10, :line 4675, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentQueue [^{:end-column 32, :end-line 4675, :column 27, :line 4675, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4675, :column 32, :line 4675, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4675, :column 38, :line 4675, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4675, :column 44, :line 4675, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4675, :column 59, :line 4675, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 32, :end-line 4675, :column 27, :line 4675, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4675, :column 32, :line 4675, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4675, :column 38, :line 4675, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4675, :column 44, :line 4675, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4675, :column 59, :line 4675, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4675, :column 10, :line 4675, :file "cljs/core.cljs"} ->PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]], ^{:end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]], ^{:end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 25, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IWatchable ^{:impls (cljs.core/Atom), :protocol-info {:methods {^{:end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]], ^{:end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]], ^{:end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 25, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 20, :end-line 345, :column 4, :line 345, :file "cljs/core.cljs"} -notify-watches [^{:end-column 40, :end-line 345, :column 20, :line 345, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 345, :column 21, :line 345, :file "cljs/core.cljs"} this ^{:end-column 33, :end-line 345, :column 26, :line 345, :file "cljs/core.cljs"} oldval ^{:end-column 40, :end-line 345, :column 33, :line 345, :file "cljs/core.cljs"} newval]], ^{:end-column 15, :end-line 346, :column 4, :line 346, :file "cljs/core.cljs"} -add-watch [^{:end-column 27, :end-line 346, :column 15, :line 346, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 346, :column 16, :line 346, :file "cljs/core.cljs"} this ^{:end-column 25, :end-line 346, :column 21, :line 346, :file "cljs/core.cljs"} key ^{:end-column 27, :end-line 346, :column 25, :line 346, :file "cljs/core.cljs"} f]], ^{:end-column 18, :end-line 347, :column 4, :line 347, :file "cljs/core.cljs"} -remove-watch [^{:end-column 28, :end-line 347, :column 18, :line 347, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 347, :column 19, :line 347, :file "cljs/core.cljs"} this ^{:end-column 28, :end-line 347, :column 24, :line 347, :file "cljs/core.cljs"} key]]}}, :protocol-symbol true, :end-column 25, :end-line 344, :column 14, :line 344, :file "cljs/core.cljs"} IWatchable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 2973, :column 19, :line 2973, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2973, :column 25, :line 2973, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} ->Stepper ^{:arglists ([^{:end-column 25, :end-line 2973, :column 19, :line 2973, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2973, :column 25, :line 2973, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} {:arglists (^cljs.core/Stepper [^{:end-column 25, :end-line 2973, :column 19, :line 2973, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2973, :column 25, :line 2973, :file "cljs/core.cljs"} iter]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 2973, :column 19, :line 2973, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2973, :column 25, :line 2973, :file "cljs/core.cljs"} iter]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} ->Stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 3921, :column 22, :line 3921, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3921, :column 23, :line 3921, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3921, :column 8, :line 3921, :file "cljs/core.cljs"} pv-fresh-node ^{:arglists (^{:end-column 28, :end-line 3921, :column 22, :line 3921, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3921, :column 23, :line 3921, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3921, :column 8, :line 3921, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 28, :end-line 3921, :column 23, :line 3921, :file "cljs/core.cljs"} edit]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 3921, :column 22, :line 3921, :file "cljs/core.cljs"} [^{:end-column 28, :end-line 3921, :column 23, :line 3921, :file "cljs/core.cljs"} edit]), :private true, :end-column 22, :end-line 3921, :column 8, :line 3921, :file "cljs/core.cljs"} pv-fresh-node, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 17, :end-line 4249, :column 10, :line 4249, :file "cljs/core.cljs"} subvec ^{:arglists (^{:end-column 13, :end-line 4444, :column 4, :line 4444, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4444, :column 5, :line 4444, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4444, :column 7, :line 4444, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4446, :column 4, :line 4446, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4446, :column 5, :line 4446, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4446, :column 7, :line 4446, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4446, :column 13, :line 4446, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 4438, :column 7, :line 4438, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 4444, :column 5, :line 4444, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4444, :column 7, :line 4444, :file "cljs/core.cljs"} start] ^cljs.core/Subvec [^{:end-column 7, :end-line 4446, :column 5, :line 4446, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4446, :column 7, :line 4446, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4446, :column 13, :line 4446, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 4444, :column 4, :line 4444, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4444, :column 5, :line 4444, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4444, :column 7, :line 4444, :file "cljs/core.cljs"} start] ^{:end-column 17, :end-line 4446, :column 4, :line 4446, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 4446, :column 5, :line 4446, :file "cljs/core.cljs"} v ^{:end-column 13, :end-line 4446, :column 7, :line 4446, :file "cljs/core.cljs"} start ^{:end-column 17, :end-line 4446, :column 13, :line 4446, :file "cljs/core.cljs"} end]), :doc "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.", :end-column 14, :end-line 4438, :column 7, :line 4438, :file "cljs/core.cljs"} subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -pop! ^{:arglists (^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 364, :column 15, :line 364, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 364, :column 16, :line 364, :file "cljs/core.cljs"} tcoll]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 364, :column 5, :line 364, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 364, :column 9, :line 364, :file "cljs/core.cljs"} -pop!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3221, :column 4, :line 3221, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3221, :column 5, :line 3221, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3221, :column 7, :line 3221, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3223, :column 4, :line 3223, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3223, :column 5, :line 3223, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3223, :column 7, :line 3223, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3223, :column 12, :line 3223, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3225, :column 4, :line 3225, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3225, :column 5, :line 3225, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3225, :column 12, :line 3225, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3225, :column 17, :line 3225, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3227, :column 4, :line 3227, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3227, :column 5, :line 3227, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3227, :column 7, :line 3227, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3227, :column 12, :line 3227, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3227, :column 17, :line 3227, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3227, :column 22, :line 3227, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3227, :column 24, :line 3227, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3216, :column 7, :line 3216, :file "cljs/core.cljs"} partial ^{:arglists (^{:end-column 7, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3221, :column 4, :line 3221, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3221, :column 5, :line 3221, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3221, :column 7, :line 3221, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3223, :column 4, :line 3223, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3223, :column 5, :line 3223, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3223, :column 7, :line 3223, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3223, :column 12, :line 3223, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3225, :column 4, :line 3225, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3225, :column 5, :line 3225, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3225, :column 12, :line 3225, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3225, :column 17, :line 3225, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3227, :column 4, :line 3227, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3227, :column 5, :line 3227, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3227, :column 7, :line 3227, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3227, :column 12, :line 3227, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3227, :column 17, :line 3227, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3227, :column 22, :line 3227, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3227, :column 24, :line 3227, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3216, :column 7, :line 3216, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 3221, :column 5, :line 3221, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3221, :column 7, :line 3221, :file "cljs/core.cljs"} arg1] ^function [^{:end-column 7, :end-line 3223, :column 5, :line 3223, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3223, :column 7, :line 3223, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3223, :column 12, :line 3223, :file "cljs/core.cljs"} arg2] ^function [^{:end-column 7, :end-line 3225, :column 5, :line 3225, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3225, :column 12, :line 3225, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3225, :column 17, :line 3225, :file "cljs/core.cljs"} arg3] ^function [^{:end-column 7, :end-line 3227, :column 5, :line 3227, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3227, :column 7, :line 3227, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3227, :column 12, :line 3227, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3227, :column 17, :line 3227, :file "cljs/core.cljs"} arg3 & ^{:end-column 29, :end-line 3227, :column 24, :line 3227, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3220, :column 4, :line 3220, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3220, :column 5, :line 3220, :file "cljs/core.cljs"} f] ^{:end-column 12, :end-line 3221, :column 4, :line 3221, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3221, :column 5, :line 3221, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3221, :column 7, :line 3221, :file "cljs/core.cljs"} arg1] ^{:end-column 17, :end-line 3223, :column 4, :line 3223, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3223, :column 5, :line 3223, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3223, :column 7, :line 3223, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3223, :column 12, :line 3223, :file "cljs/core.cljs"} arg2] ^{:end-column 22, :end-line 3225, :column 4, :line 3225, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3225, :column 5, :line 3225, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3225, :column 7, :line 3225, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3225, :column 12, :line 3225, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3225, :column 17, :line 3225, :file "cljs/core.cljs"} arg3] ^{:end-column 29, :end-line 3227, :column 4, :line 3227, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3227, :column 5, :line 3227, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 3227, :column 7, :line 3227, :file "cljs/core.cljs"} arg1 ^{:end-column 17, :end-line 3227, :column 12, :line 3227, :file "cljs/core.cljs"} arg2 ^{:end-column 22, :end-line 3227, :column 17, :line 3227, :file "cljs/core.cljs"} arg3 ^{:end-column 24, :end-line 3227, :column 22, :line 3227, :file "cljs/core.cljs"} & ^{:end-column 29, :end-line 3227, :column 24, :line 3227, :file "cljs/core.cljs"} more]), :doc "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.", :end-column 15, :end-line 3216, :column 7, :line 3216, :file "cljs/core.cljs"} partial, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1403, :column 3, :line 1403, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1402, :column 8, :line 1402, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1402, :column 16, :line 1402, :file "cljs/core.cljs"} chunked-seq? ^{:arglists (^{:end-column 6, :end-line 1403, :column 3, :line 1403, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1402, :column 8, :line 1402, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1402, :column 16, :line 1402, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1403, :column 3, :line 1403, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1403, :column 4, :line 1403, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 1402, :column 8, :line 1402, :file "cljs/core.cljs"} boolean, :end-column 29, :end-line 1402, :column 16, :line 1402, :file "cljs/core.cljs"} chunked-seq?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 3681, :column 3, :line 3681, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3681, :column 4, :line 3681, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3681, :column 6, :line 3681, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3679, :column 7, :line 3679, :file "cljs/core.cljs"} replicate ^{:arglists (^{:end-column 8, :end-line 3681, :column 3, :line 3681, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3681, :column 4, :line 3681, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3681, :column 6, :line 3681, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3679, :column 7, :line 3679, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 6, :end-line 3681, :column 4, :line 3681, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3681, :column 6, :line 3681, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 3681, :column 3, :line 3681, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3681, :column 4, :line 3681, :file "cljs/core.cljs"} n ^{:end-column 8, :end-line 3681, :column 6, :line 3681, :file "cljs/core.cljs"} x]), :doc "Returns a lazy seq of n xs.", :end-column 17, :end-line 3679, :column 7, :line 3679, :file "cljs/core.cljs"} replicate, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4675, :column 10, :line 4675, :file "cljs/core.cljs"} PersistentQueue {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}, :end-column 26, :end-line 4675, :column 10, :line 4675, :file "cljs/core.cljs"} PersistentQueue, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 66, :end-line 4675, :column 26, :line 4675, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4675, :column 27, :line 4675, :file "cljs/core.cljs"} meta ^{:end-column 38, :end-line 4675, :column 32, :line 4675, :file "cljs/core.cljs"} count ^{:end-column 44, :end-line 4675, :column 38, :line 4675, :file "cljs/core.cljs"} front ^{:end-column 49, :end-line 4675, :column 44, :line 4675, :file "cljs/core.cljs"} rear ^{:mutable true, :end-column 66, :end-line 4675, :column 59, :line 4675, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta}}, ^{:arglists (^{:end-column 9, :end-line 7413, :column 4, :line 7413, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7413, :column 5, :line 7413, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7413, :column 7, :line 7413, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7414, :column 7, :line 7414, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7414, :column 9, :line 7414, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7415, :column 4, :line 7415, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7415, :column 5, :line 7415, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7415, :column 7, :line 7415, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7415, :column 9, :line 7415, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7415, :column 11, :line 7415, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7415, :column 13, :line 7415, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7411, :column 7, :line 7411, :file "cljs/core.cljs"} min-key ^{:arglists (^{:end-column 9, :end-line 7413, :column 4, :line 7413, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7413, :column 5, :line 7413, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7413, :column 7, :line 7413, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7414, :column 7, :line 7414, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7414, :column 9, :line 7414, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7415, :column 4, :line 7415, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7415, :column 5, :line 7415, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7415, :column 7, :line 7415, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7415, :column 9, :line 7415, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7415, :column 11, :line 7415, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7415, :column 13, :line 7415, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7411, :column 7, :line 7411, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7413, :column 5, :line 7413, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7413, :column 7, :line 7413, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7414, :column 7, :line 7414, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7414, :column 9, :line 7414, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 7415, :column 5, :line 7415, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7415, :column 7, :line 7415, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7415, :column 9, :line 7415, :file "cljs/core.cljs"} y & ^{:end-column 18, :end-line 7415, :column 13, :line 7415, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7413, :column 4, :line 7413, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7413, :column 5, :line 7413, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7413, :column 7, :line 7413, :file "cljs/core.cljs"} x] ^{:end-column 11, :end-line 7414, :column 4, :line 7414, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7414, :column 5, :line 7414, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7414, :column 7, :line 7414, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7414, :column 9, :line 7414, :file "cljs/core.cljs"} y] ^{:end-column 18, :end-line 7415, :column 4, :line 7415, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7415, :column 5, :line 7415, :file "cljs/core.cljs"} k ^{:end-column 9, :end-line 7415, :column 7, :line 7415, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 7415, :column 9, :line 7415, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 7415, :column 11, :line 7415, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 7415, :column 13, :line 7415, :file "cljs/core.cljs"} more]), :doc "Returns the x for which (k x), a number, is least.", :end-column 15, :end-line 7411, :column 7, :line 7411, :file "cljs/core.cljs"} min-key, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2115, :column 18, :line 2115, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2115, :column 19, :line 2115, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2115, :column 8, :line 2115, :file "cljs/core.cljs"} hash-iset ^{:arglists (^{:end-column 21, :end-line 2115, :column 18, :line 2115, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2115, :column 19, :line 2115, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2115, :column 8, :line 2115, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 21, :end-line 2115, :column 19, :line 2115, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2115, :column 18, :line 2115, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2115, :column 19, :line 2115, :file "cljs/core.cljs"} s]), :private true, :end-column 18, :end-line 2115, :column 8, :line 2115, :file "cljs/core.cljs"} hash-iset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 777, :column 3, :line 777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 777, :column 4, :line 777, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 775, :column 7, :line 775, :file "cljs/core.cljs"} reduced ^{:arglists (^{:end-column 6, :end-line 777, :column 3, :line 777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 777, :column 4, :line 777, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 775, :column 7, :line 775, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 6, :end-line 777, :column 4, :line 777, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 777, :column 3, :line 777, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 777, :column 4, :line 777, :file "cljs/core.cljs"} x]), :doc "Wraps x in a way such that a reduce will terminate with the value x", :end-column 15, :end-line 775, :column 7, :line 775, :file "cljs/core.cljs"} reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7781, :column 3, :line 7781, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7781, :column 4, :line 7781, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7781, :column 7, :line 7781, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7779, :column 7, :line 7779, :file "cljs/core.cljs"} re-matches ^{:arglists (^{:end-column 9, :end-line 7781, :column 3, :line 7781, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7781, :column 4, :line 7781, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7781, :column 7, :line 7781, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7779, :column 7, :line 7779, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 7781, :column 4, :line 7781, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7781, :column 7, :line 7781, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7781, :column 3, :line 7781, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 7781, :column 4, :line 7781, :file "cljs/core.cljs"} re ^{:end-column 9, :end-line 7781, :column 7, :line 7781, :file "cljs/core.cljs"} s]), :doc "Returns the result of (re-find re s) if re fully matches s.", :end-column 18, :end-line 7779, :column 7, :line 7779, :file "cljs/core.cljs"} re-matches, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 6877, :column 3, :line 6877, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6877, :column 4, :line 6877, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6877, :column 6, :line 6877, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6874, :column 7, :line 6874, :file "cljs/core.cljs"} array-map ^{:arglists (^{:end-column 14, :end-line 6877, :column 3, :line 6877, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6877, :column 4, :line 6877, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6877, :column 6, :line 6877, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6874, :column 7, :line 6874, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMap [& ^{:end-column 14, :end-line 6877, :column 6, :line 6877, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6877, :column 3, :line 6877, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6877, :column 4, :line 6877, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6877, :column 6, :line 6877, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new array map with supplied mappings.", :end-column 17, :end-line 6874, :column 7, :line 6874, :file "cljs/core.cljs"} array-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 28, :end-line 366, :column 14, :line 366, :file "cljs/core.cljs"} ITransientSet ^{:impls (cljs.core/TransientHashSet), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 28, :end-line 366, :column 14, :line 366, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} -disjoin! [^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]]}}, :protocol-symbol true, :end-column 28, :end-line 366, :column 14, :line 366, :file "cljs/core.cljs"} ITransientSet, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1816, :column 30, :line 1816, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1816, :column 31, :line 1816, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1816, :column 8, :line 1816, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1816, :column 15, :line 1816, :file "cljs/core.cljs"} unchecked-byte ^{:arglists (^{:end-column 33, :end-line 1816, :column 30, :line 1816, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1816, :column 31, :line 1816, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1816, :column 8, :line 1816, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1816, :column 15, :line 1816, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1816, :column 31, :line 1816, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1816, :column 30, :line 1816, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1816, :column 31, :line 1816, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1816, :column 8, :line 1816, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1816, :column 15, :line 1816, :file "cljs/core.cljs"} unchecked-byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 20, :end-line 5412, :column 10, :line 5412, :file "cljs/core.cljs"} ArrayNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 5625, :column 10, :line 5625, :file "cljs/core.cljs"} ArrayNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 5625, :column 20, :line 5625, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 5625, :column 21, :line 5625, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 40, :end-line 5625, :column 36, :line 5625, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 54, :end-line 5625, :column 50, :line 5625, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists ([^{:end-column 26, :end-line 4251, :column 22, :line 4251, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4251, :column 26, :line 4251, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4251, :column 31, :line 4251, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4251, :column 33, :line 4251, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4251, :column 37, :line 4251, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4251, :column 52, :line 4251, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 4251, :column 10, :line 4251, :file "cljs/core.cljs"} ->ChunkedSeq ^{:arglists ([^{:end-column 26, :end-line 4251, :column 22, :line 4251, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4251, :column 26, :line 4251, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4251, :column 31, :line 4251, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4251, :column 33, :line 4251, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4251, :column 37, :line 4251, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4251, :column 52, :line 4251, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 4251, :column 10, :line 4251, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 26, :end-line 4251, :column 22, :line 4251, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4251, :column 26, :line 4251, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4251, :column 31, :line 4251, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4251, :column 33, :line 4251, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4251, :column 37, :line 4251, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4251, :column 52, :line 4251, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 4251, :column 22, :line 4251, :file "cljs/core.cljs"} vec ^{:end-column 31, :end-line 4251, :column 26, :line 4251, :file "cljs/core.cljs"} node ^{:end-column 33, :end-line 4251, :column 31, :line 4251, :file "cljs/core.cljs"} i ^{:end-column 37, :end-line 4251, :column 33, :line 4251, :file "cljs/core.cljs"} off ^{:end-column 42, :end-line 4251, :column 37, :line 4251, :file "cljs/core.cljs"} meta ^{:mutable true, :end-column 59, :end-line 4251, :column 52, :line 4251, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IChunkedNext cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/IChunkedSeq cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 21, :end-line 4251, :column 10, :line 4251, :file "cljs/core.cljs"} ->ChunkedSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3456, :column 4, :line 3456, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3456, :column 5, :line 3456, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3464, :column 4, :line 3464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3464, :column 5, :line 3464, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3464, :column 8, :line 3464, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3472, :column 4, :line 3472, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3472, :column 5, :line 3472, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3472, :column 8, :line 3472, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3472, :column 11, :line 3472, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3480, :column 4, :line 3480, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3480, :column 5, :line 3480, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3480, :column 8, :line 3480, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3480, :column 11, :line 3480, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3480, :column 14, :line 3480, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3480, :column 16, :line 3480, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3451, :column 7, :line 3451, :file "cljs/core.cljs"} every-pred ^{:arglists (^{:end-column 7, :end-line 3456, :column 4, :line 3456, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3456, :column 5, :line 3456, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3464, :column 4, :line 3464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3464, :column 5, :line 3464, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3464, :column 8, :line 3464, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3472, :column 4, :line 3472, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3472, :column 5, :line 3472, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3472, :column 8, :line 3472, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3472, :column 11, :line 3472, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3480, :column 4, :line 3480, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3480, :column 5, :line 3480, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3480, :column 8, :line 3480, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3480, :column 11, :line 3480, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3480, :column 14, :line 3480, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3480, :column 16, :line 3480, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3451, :column 7, :line 3451, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3456, :column 5, :line 3456, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 3464, :column 5, :line 3464, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3464, :column 8, :line 3464, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 3472, :column 5, :line 3472, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3472, :column 8, :line 3472, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3472, :column 11, :line 3472, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 3480, :column 5, :line 3480, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3480, :column 8, :line 3480, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3480, :column 11, :line 3480, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 3480, :column 16, :line 3480, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3456, :column 4, :line 3456, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3456, :column 5, :line 3456, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3464, :column 4, :line 3464, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3464, :column 5, :line 3464, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3464, :column 8, :line 3464, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3472, :column 4, :line 3472, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3472, :column 5, :line 3472, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3472, :column 8, :line 3472, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3472, :column 11, :line 3472, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3480, :column 4, :line 3480, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3480, :column 5, :line 3480, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3480, :column 8, :line 3480, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3480, :column 11, :line 3480, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3480, :column 14, :line 3480, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3480, :column 16, :line 3480, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.", :end-column 18, :end-line 3451, :column 7, :line 3451, :file "cljs/core.cljs"} every-pred, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 5083, :column 10, :line 5083, :file "cljs/core.cljs"} keys ^{:arglists (^{:end-column 13, :end-line 6969, :column 3, :line 6969, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6969, :column 4, :line 6969, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6967, :column 7, :line 6967, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 6969, :column 4, :line 6969, :file "cljs/core.cljs"} hash-map]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 6969, :column 3, :line 6969, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 6969, :column 4, :line 6969, :file "cljs/core.cljs"} hash-map]), :doc "Returns a sequence of the map's keys.", :end-column 12, :end-line 6967, :column 7, :line 6967, :file "cljs/core.cljs"} keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} {:arglists (^js/Error [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 135, :column 24, :line 135, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 135, :column 25, :line 135, :file "cljs/core.cljs"} proto ^{:end-column 35, :end-line 135, :column 31, :line 135, :file "cljs/core.cljs"} obj]), :end-column 24, :end-line 135, :column 7, :line 135, :file "cljs/core.cljs"} missing-protocol, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5094, :column 10, :line 5094, :file "cljs/core.cljs"} PersistentArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}, :end-column 29, :end-line 5094, :column 10, :line 5094, :file "cljs/core.cljs"} PersistentArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 60, :end-line 5094, :column 29, :line 5094, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 5094, :column 30, :line 5094, :file "cljs/core.cljs"} meta ^{:end-column 39, :end-line 5094, :column 35, :line 5094, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 5094, :column 39, :line 5094, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 60, :end-line 5094, :column 53, :line 5094, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup cljs.core/IReduce}}, ^{:arglists (^{:end-column 7, :end-line 1498, :column 4, :line 1498, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1498, :column 5, :line 1498, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1499, :column 4, :line 1499, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1499, :column 5, :line 1499, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1499, :column 7, :line 1499, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1500, :column 4, :line 1500, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1500, :column 5, :line 1500, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1500, :column 7, :line 1500, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1500, :column 9, :line 1500, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1500, :column 11, :line 1500, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1496, :column 8, :line 1496, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1496, :column 16, :line 1496, :file "cljs/core.cljs"} distinct? ^{:arglists (^{:end-column 7, :end-line 1498, :column 4, :line 1498, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1498, :column 5, :line 1498, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1499, :column 4, :line 1499, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1499, :column 5, :line 1499, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1499, :column 7, :line 1499, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1500, :column 4, :line 1500, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1500, :column 5, :line 1500, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1500, :column 7, :line 1500, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1500, :column 9, :line 1500, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1500, :column 11, :line 1500, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1496, :column 8, :line 1496, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1496, :column 16, :line 1496, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 1498, :column 5, :line 1498, :file "cljs/core.cljs"} x] ^boolean [^{:end-column 7, :end-line 1499, :column 5, :line 1499, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1499, :column 7, :line 1499, :file "cljs/core.cljs"} y] ^boolean [^{:end-column 7, :end-line 1500, :column 5, :line 1500, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1500, :column 7, :line 1500, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1500, :column 11, :line 1500, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1498, :column 4, :line 1498, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1498, :column 5, :line 1498, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1499, :column 4, :line 1499, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1499, :column 5, :line 1499, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1499, :column 7, :line 1499, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1500, :column 4, :line 1500, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1500, :column 5, :line 1500, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1500, :column 7, :line 1500, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1500, :column 9, :line 1500, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1500, :column 11, :line 1500, :file "cljs/core.cljs"} more]), :doc "Returns true if no two of the arguments are =", :tag ^{:end-column 16, :end-line 1496, :column 8, :line 1496, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 1496, :column 16, :line 1496, :file "cljs/core.cljs"} distinct?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 42, :end-line 4738, :column 1, :line 4738, :file "cljs/core.cljs"} never-equiv ^{:private true, :end-column 42, :end-line 4738, :column 1, :line 4738, :file "cljs/core.cljs"} {:tag cljs.core/NeverEquiv, :op :var, :name ^{:private true, :end-column 42, :end-line 4738, :column 1, :line 4738, :file "cljs/core.cljs"} never-equiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} Stepper {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2973, :column 10, :line 2973, :file "cljs/core.cljs"} Stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 30, :end-line 2973, :column 18, :line 2973, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2973, :column 19, :line 2973, :file "cljs/core.cljs"} xform ^{:end-column 30, :end-line 2973, :column 25, :line 2973, :file "cljs/core.cljs"} iter], :protocols #{Object}}, ^{:arglists (^{:end-column 34, :end-line 1818, :column 31, :line 1818, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1818, :column 32, :line 1818, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1818, :column 8, :line 1818, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1818, :column 15, :line 1818, :file "cljs/core.cljs"} unchecked-short ^{:arglists (^{:end-column 34, :end-line 1818, :column 31, :line 1818, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1818, :column 32, :line 1818, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1818, :column 8, :line 1818, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1818, :column 15, :line 1818, :file "cljs/core.cljs"} {:arglists ([^{:end-column 34, :end-line 1818, :column 32, :line 1818, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 1818, :column 31, :line 1818, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 1818, :column 32, :line 1818, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1818, :column 8, :line 1818, :file "cljs/core.cljs"} number, :end-column 31, :end-line 1818, :column 15, :line 1818, :file "cljs/core.cljs"} unchecked-short, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 22, :end-line 7526, :column 17, :line 7526, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7526, :column 22, :line 7526, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7526, :column 28, :line 7526, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7526, :column 32, :line 7526, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7526, :column 47, :line 7526, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7526, :column 10, :line 7526, :file "cljs/core.cljs"} ->Range ^{:arglists ([^{:end-column 22, :end-line 7526, :column 17, :line 7526, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7526, :column 22, :line 7526, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7526, :column 28, :line 7526, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7526, :column 32, :line 7526, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7526, :column 47, :line 7526, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7526, :column 10, :line 7526, :file "cljs/core.cljs"} {:arglists (^cljs.core/Range [^{:end-column 22, :end-line 7526, :column 17, :line 7526, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7526, :column 22, :line 7526, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7526, :column 28, :line 7526, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7526, :column 32, :line 7526, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7526, :column 47, :line 7526, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 22, :end-line 7526, :column 17, :line 7526, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7526, :column 22, :line 7526, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7526, :column 28, :line 7526, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7526, :column 32, :line 7526, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7526, :column 47, :line 7526, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7526, :column 10, :line 7526, :file "cljs/core.cljs"} ->Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 12, :end-line 8824, :column 3, :line 8824, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8824, :column 4, :line 8824, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8822, :column 7, :line 8822, :file "cljs/core.cljs"} methods ^{:arglists (^{:end-column 12, :end-line 8824, :column 3, :line 8824, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8824, :column 4, :line 8824, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8822, :column 7, :line 8822, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8824, :column 4, :line 8824, :file "cljs/core.cljs"} multifn]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 8824, :column 3, :line 8824, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8824, :column 4, :line 8824, :file "cljs/core.cljs"} multifn]), :doc "Given a multimethod, returns a map of dispatch values -> dispatch fns", :end-column 15, :end-line 8822, :column 7, :line 8822, :file "cljs/core.cljs"} methods, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3171, :column 3, :line 3171, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3171, :column 4, :line 3171, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3169, :column 8, :line 3169, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3169, :column 16, :line 3169, :file "cljs/core.cljs"} odd? ^{:arglists (^{:end-column 6, :end-line 3171, :column 3, :line 3171, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3171, :column 4, :line 3171, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3169, :column 8, :line 3169, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3169, :column 16, :line 3169, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 3171, :column 4, :line 3171, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3171, :column 3, :line 3171, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3171, :column 4, :line 3171, :file "cljs/core.cljs"} n]), :doc "Returns true if n is odd, throws an exception if n is not an integer", :tag ^{:end-column 16, :end-line 3169, :column 8, :line 3169, :file "cljs/core.cljs"} boolean, :end-column 21, :end-line 3169, :column 16, :line 3169, :file "cljs/core.cljs"} odd?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 26, :end-line 2484, :column 22, :line 2484, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2484, :column 26, :line 2484, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2484, :column 30, :line 2484, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2484, :column 10, :line 2484, :file "cljs/core.cljs"} ->ArrayChunk ^{:arglists ([^{:end-column 26, :end-line 2484, :column 22, :line 2484, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2484, :column 26, :line 2484, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2484, :column 30, :line 2484, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2484, :column 10, :line 2484, :file "cljs/core.cljs"} {:arglists (^cljs.core/ArrayChunk [^{:end-column 26, :end-line 2484, :column 22, :line 2484, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2484, :column 26, :line 2484, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2484, :column 30, :line 2484, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 26, :end-line 2484, :column 22, :line 2484, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2484, :column 26, :line 2484, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2484, :column 30, :line 2484, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2484, :column 10, :line 2484, :file "cljs/core.cljs"} ->ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 2970, :column 24, :line 2970, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2970, :column 25, :line 2970, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2970, :column 7, :line 2970, :file "cljs/core.cljs"} lazy-transformer ^{:arglists (^{:end-column 33, :end-line 2970, :column 24, :line 2970, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2970, :column 25, :line 2970, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2970, :column 7, :line 2970, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazyTransformer [^{:end-column 33, :end-line 2970, :column 25, :line 2970, :file "cljs/core.cljs"} stepper]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 2970, :column 24, :line 2970, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 2970, :column 25, :line 2970, :file "cljs/core.cljs"} stepper]), :end-column 24, :end-line 2970, :column 7, :line 2970, :file "cljs/core.cljs"} lazy-transformer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 794, :column 4, :line 794, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 794, :column 5, :line 794, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 794, :column 12, :line 794, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 805, :column 4, :line 805, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 805, :column 5, :line 805, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 805, :column 12, :line 805, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 805, :column 14, :line 805, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 814, :column 4, :line 814, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 814, :column 5, :line 814, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 814, :column 12, :line 814, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 814, :column 14, :line 814, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 814, :column 18, :line 814, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 791, :column 8, :line 791, :file "cljs/core.cljs"} ci-reduce ^{:arglists (^{:end-column 14, :end-line 794, :column 4, :line 794, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 794, :column 5, :line 794, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 794, :column 12, :line 794, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 805, :column 4, :line 805, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 805, :column 5, :line 805, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 805, :column 12, :line 805, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 805, :column 14, :line 805, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 814, :column 4, :line 814, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 814, :column 5, :line 814, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 814, :column 12, :line 814, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 814, :column 14, :line 814, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 814, :column 18, :line 814, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 791, :column 8, :line 791, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 794, :column 5, :line 794, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 794, :column 12, :line 794, :file "cljs/core.cljs"} f] [^{:end-column 12, :end-line 805, :column 5, :line 805, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 805, :column 12, :line 805, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 805, :column 14, :line 805, :file "cljs/core.cljs"} val] [^{:end-column 12, :end-line 814, :column 5, :line 814, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 814, :column 12, :line 814, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 814, :column 14, :line 814, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 814, :column 18, :line 814, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 794, :column 4, :line 794, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 794, :column 5, :line 794, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 794, :column 12, :line 794, :file "cljs/core.cljs"} f] ^{:end-column 18, :end-line 805, :column 4, :line 805, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 805, :column 5, :line 805, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 805, :column 12, :line 805, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 805, :column 14, :line 805, :file "cljs/core.cljs"} val] ^{:end-column 22, :end-line 814, :column 4, :line 814, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 814, :column 5, :line 814, :file "cljs/core.cljs"} cicoll ^{:end-column 14, :end-line 814, :column 12, :line 814, :file "cljs/core.cljs"} f ^{:end-column 18, :end-line 814, :column 14, :line 814, :file "cljs/core.cljs"} val ^{:end-column 22, :end-line 814, :column 18, :line 814, :file "cljs/core.cljs"} idx]), :doc "Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization", :private true, :end-column 18, :end-line 791, :column 8, :line 791, :file "cljs/core.cljs"} ci-reduce, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3 ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} {:op :var, :name ^{:doc "bound in a repl thread to the third most recent value printed", :end-column 6, :end-line 67, :column 1, :line 65, :file "cljs/core.cljs"} *3, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} -get-method ^{:arglists (^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} {:arglists ([^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 8624, :column 16, :line 8624, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 8624, :column 17, :line 8624, :file "cljs/core.cljs"} mf ^{:end-column 33, :end-line 8624, :column 20, :line 8624, :file "cljs/core.cljs"} dispatch-val]), :protocol cljs.core/IMultiFn, :end-column 16, :end-line 8624, :column 4, :line 8624, :file "cljs/core.cljs"} -get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 7691, :column 3, :line 7691, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} frequencies ^{:arglists (^{:end-column 9, :end-line 7691, :column 3, :line 7691, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 7691, :column 3, :line 7691, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7691, :column 4, :line 7691, :file "cljs/core.cljs"} coll]), :doc "Returns a map from distinct items in coll to the number of times\n  they appear.", :end-column 19, :end-line 7688, :column 7, :line 7688, :file "cljs/core.cljs"} frequencies, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1387, :column 3, :line 1387, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1385, :column 8, :line 1385, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1385, :column 16, :line 1385, :file "cljs/core.cljs"} reduceable? ^{:arglists (^{:end-column 6, :end-line 1387, :column 3, :line 1387, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1385, :column 8, :line 1385, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1385, :column 16, :line 1385, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1387, :column 3, :line 1387, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1387, :column 4, :line 1387, :file "cljs/core.cljs"} x]), :doc "Returns true if coll satisfies IReduce", :tag ^{:end-column 16, :end-line 1385, :column 8, :line 1385, :file "cljs/core.cljs"} boolean, :end-column 28, :end-line 1385, :column 16, :line 1385, :file "cljs/core.cljs"} reduceable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 33, :end-line 482, :column 1, :line 482, :file "cljs/core.cljs"} string-hash-cache ^{:end-column 33, :end-line 482, :column 1, :line 482, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:end-column 33, :end-line 482, :column 1, :line 482, :file "cljs/core.cljs"} string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 7504, :column 4, :line 7504, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7504, :column 5, :line 7504, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7504, :column 8, :line 7504, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7504, :column 13, :line 7504, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7510, :column 4, :line 7510, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7510, :column 5, :line 7510, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7510, :column 8, :line 7510, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7510, :column 19, :line 7510, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7510, :column 29, :line 7510, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7510, :column 38, :line 7510, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7500, :column 7, :line 7500, :file "cljs/core.cljs"} rsubseq ^{:arglists (^{:end-column 17, :end-line 7504, :column 4, :line 7504, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7504, :column 5, :line 7504, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7504, :column 8, :line 7504, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7504, :column 13, :line 7504, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7510, :column 4, :line 7510, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7510, :column 5, :line 7510, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7510, :column 8, :line 7510, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7510, :column 19, :line 7510, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7510, :column 29, :line 7510, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7510, :column 38, :line 7510, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7500, :column 7, :line 7500, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7504, :column 5, :line 7504, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7504, :column 8, :line 7504, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7504, :column 13, :line 7504, :file "cljs/core.cljs"} key] [^{:end-column 8, :end-line 7510, :column 5, :line 7510, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7510, :column 8, :line 7510, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7510, :column 19, :line 7510, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7510, :column 29, :line 7510, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7510, :column 38, :line 7510, :file "cljs/core.cljs"} end-key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 7504, :column 4, :line 7504, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7504, :column 5, :line 7504, :file "cljs/core.cljs"} sc ^{:end-column 13, :end-line 7504, :column 8, :line 7504, :file "cljs/core.cljs"} test ^{:end-column 17, :end-line 7504, :column 13, :line 7504, :file "cljs/core.cljs"} key] ^{:end-column 46, :end-line 7510, :column 4, :line 7510, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7510, :column 5, :line 7510, :file "cljs/core.cljs"} sc ^{:end-column 19, :end-line 7510, :column 8, :line 7510, :file "cljs/core.cljs"} start-test ^{:end-column 29, :end-line 7510, :column 19, :line 7510, :file "cljs/core.cljs"} start-key ^{:end-column 38, :end-line 7510, :column 29, :line 7510, :file "cljs/core.cljs"} end-test ^{:end-column 46, :end-line 7510, :column 38, :line 7510, :file "cljs/core.cljs"} end-key]), :doc "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true", :end-column 15, :end-line 7500, :column 7, :line 7500, :file "cljs/core.cljs"} rsubseq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 767, :column 3, :line 767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 767, :column 4, :line 767, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 765, :column 7, :line 765, :file "cljs/core.cljs"} inc ^{:arglists (^{:end-column 6, :end-line 767, :column 3, :line 767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 767, :column 4, :line 767, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 765, :column 7, :line 765, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 767, :column 4, :line 767, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 767, :column 3, :line 767, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 767, :column 4, :line 767, :file "cljs/core.cljs"} x]), :doc "Returns a number one greater than num.", :end-column 11, :end-line 765, :column 7, :line 765, :file "cljs/core.cljs"} inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 144, :column 17, :line 144, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 144, :column 18, :line 144, :file "cljs/core.cljs"} ty]), :end-column 17, :end-line 144, :column 7, :line 144, :file "cljs/core.cljs"} type->str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 4790, :column 18, :line 4790, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4790, :column 19, :line 4790, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4790, :column 23, :line 4790, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4790, :column 8, :line 4790, :file "cljs/core.cljs"} obj-clone ^{:arglists (^{:end-column 26, :end-line 4790, :column 18, :line 4790, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4790, :column 19, :line 4790, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4790, :column 23, :line 4790, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4790, :column 8, :line 4790, :file "cljs/core.cljs"} {:arglists (^object [^{:end-column 23, :end-line 4790, :column 19, :line 4790, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4790, :column 23, :line 4790, :file "cljs/core.cljs"} ks]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 4790, :column 18, :line 4790, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 4790, :column 19, :line 4790, :file "cljs/core.cljs"} obj ^{:end-column 26, :end-line 4790, :column 23, :line 4790, :file "cljs/core.cljs"} ks]), :private true, :end-column 18, :end-line 4790, :column 8, :line 4790, :file "cljs/core.cljs"} obj-clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 8829, :column 3, :line 8829, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8829, :column 4, :line 8829, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8829, :column 12, :line 8829, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8826, :column 7, :line 8826, :file "cljs/core.cljs"} get-method ^{:arglists (^{:end-column 25, :end-line 8829, :column 3, :line 8829, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8829, :column 4, :line 8829, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8829, :column 12, :line 8829, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8826, :column 7, :line 8826, :file "cljs/core.cljs"} {:arglists ([^{:end-column 12, :end-line 8829, :column 4, :line 8829, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8829, :column 12, :line 8829, :file "cljs/core.cljs"} dispatch-val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 8829, :column 3, :line 8829, :file "cljs/core.cljs"} [^{:end-column 12, :end-line 8829, :column 4, :line 8829, :file "cljs/core.cljs"} multifn ^{:end-column 25, :end-line 8829, :column 12, :line 8829, :file "cljs/core.cljs"} dispatch-val]), :doc "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default", :end-column 18, :end-line 8826, :column 7, :line 8826, :file "cljs/core.cljs"} get-method, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 42, :end-line 3965, :column 35, :line 3965, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3965, :column 36, :line 3965, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3965, :column 38, :line 3965, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3965, :column 8, :line 3965, :file "cljs/core.cljs"} vector-index-out-of-bounds ^{:arglists (^{:end-column 42, :end-line 3965, :column 35, :line 3965, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3965, :column 36, :line 3965, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3965, :column 38, :line 3965, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3965, :column 8, :line 3965, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 38, :end-line 3965, :column 36, :line 3965, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3965, :column 38, :line 3965, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 42, :end-line 3965, :column 35, :line 3965, :file "cljs/core.cljs"} [^{:end-column 38, :end-line 3965, :column 36, :line 3965, :file "cljs/core.cljs"} i ^{:end-column 42, :end-line 3965, :column 38, :line 3965, :file "cljs/core.cljs"} cnt]), :private true, :end-column 35, :end-line 3965, :column 8, :line 3965, :file "cljs/core.cljs"} vector-index-out-of-bounds, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4933, :column 28, :line 4933, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4933, :column 7, :line 4933, :file "cljs/core.cljs"} es6-entries-iterator ^{:arglists (^{:end-column 34, :end-line 4933, :column 28, :line 4933, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4933, :column 7, :line 4933, :file "cljs/core.cljs"} {:arglists (^cljs.core/ES6EntriesIterator [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4933, :column 28, :line 4933, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 4933, :column 29, :line 4933, :file "cljs/core.cljs"} coll]), :end-column 28, :end-line 4933, :column 7, :line 4933, :file "cljs/core.cljs"} es6-entries-iterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 8, :end-line 1977, :column 3, :line 1977, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1977, :column 4, :line 1977, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1977, :column 6, :line 1977, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1975, :column 7, :line 1975, :file "cljs/core.cljs"} bit-clear ^{:arglists (^{:end-column 8, :end-line 1977, :column 3, :line 1977, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1977, :column 4, :line 1977, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1977, :column 6, :line 1977, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1975, :column 7, :line 1975, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1977, :column 4, :line 1977, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1977, :column 6, :line 1977, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1977, :column 3, :line 1977, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1977, :column 4, :line 1977, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1977, :column 6, :line 1977, :file "cljs/core.cljs"} n]), :doc "Clear bit at index n", :end-column 17, :end-line 1975, :column 7, :line 1975, :file "cljs/core.cljs"} bit-clear, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7526, :column 10, :line 7526, :file "cljs/core.cljs"} Range {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 16, :end-line 7526, :column 10, :line 7526, :file "cljs/core.cljs"} Range, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 54, :end-line 7526, :column 16, :line 7526, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 7526, :column 17, :line 7526, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 7526, :column 22, :line 7526, :file "cljs/core.cljs"} start ^{:end-column 32, :end-line 7526, :column 28, :line 7526, :file "cljs/core.cljs"} end ^{:end-column 37, :end-line 7526, :column 32, :line 7526, :file "cljs/core.cljs"} step ^{:mutable true, :end-column 54, :end-line 7526, :column 47, :line 7526, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IIndexed cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 10, :end-line 3743, :column 4, :line 3743, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3752, :column 4, :line 3752, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3752, :column 5, :line 3752, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3752, :column 10, :line 3752, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3739, :column 7, :line 3739, :file "cljs/core.cljs"} filter ^{:arglists (^{:end-column 10, :end-line 3743, :column 4, :line 3743, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3752, :column 4, :line 3752, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3752, :column 5, :line 3752, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3752, :column 10, :line 3752, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3739, :column 7, :line 3739, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3752, :column 5, :line 3752, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3752, :column 10, :line 3752, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3743, :column 4, :line 3743, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3743, :column 5, :line 3743, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3752, :column 4, :line 3752, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3752, :column 5, :line 3752, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3752, :column 10, :line 3752, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.", :end-column 14, :end-line 3739, :column 7, :line 3739, :file "cljs/core.cljs"} filter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 37, :end-line 6210, :column 32, :line 6210, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6210, :column 37, :line 6210, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6210, :column 44, :line 6210, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6210, :column 52, :line 6210, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6210, :column 63, :line 6210, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6210, :column 77, :line 6210, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6210, :column 10, :line 6210, :file "cljs/core.cljs"} ->PersistentTreeMapSeq ^{:arglists ([^{:end-column 37, :end-line 6210, :column 32, :line 6210, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6210, :column 37, :line 6210, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6210, :column 44, :line 6210, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6210, :column 52, :line 6210, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6210, :column 63, :line 6210, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6210, :column 77, :line 6210, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6210, :column 10, :line 6210, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 37, :end-line 6210, :column 32, :line 6210, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6210, :column 37, :line 6210, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6210, :column 44, :line 6210, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6210, :column 52, :line 6210, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6210, :column 63, :line 6210, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6210, :column 77, :line 6210, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 37, :end-line 6210, :column 32, :line 6210, :file "cljs/core.cljs"} meta ^{:end-column 43, :end-line 6210, :column 37, :line 6210, :file "cljs/core.cljs"} stack ^{:tag ^{:end-column 52, :end-line 6210, :column 44, :line 6210, :file "cljs/core.cljs"} boolean, :end-column 63, :end-line 6210, :column 52, :line 6210, :file "cljs/core.cljs"} ascending? ^{:end-column 67, :end-line 6210, :column 63, :line 6210, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 84, :end-line 6210, :column 77, :line 6210, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 31, :end-line 6210, :column 10, :line 6210, :file "cljs/core.cljs"} ->PersistentTreeMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 49, :end-line 5353, :column 27, :line 5353, :file "cljs/core.cljs"} create-array-node-seq ^{:arglists (^{:end-column 11, :end-line 5946, :column 4, :line 5946, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5946, :column 5, :line 5946, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5947, :column 4, :line 5947, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5947, :column 5, :line 5947, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5947, :column 10, :line 5947, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5947, :column 16, :line 5947, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5947, :column 18, :line 5947, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5945, :column 8, :line 5945, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 5946, :column 5, :line 5946, :file "cljs/core.cljs"} nodes] [^{:end-column 10, :end-line 5947, :column 5, :line 5947, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5947, :column 10, :line 5947, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5947, :column 16, :line 5947, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5947, :column 18, :line 5947, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 5946, :column 4, :line 5946, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 5946, :column 5, :line 5946, :file "cljs/core.cljs"} nodes] ^{:end-column 20, :end-line 5947, :column 4, :line 5947, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 5947, :column 5, :line 5947, :file "cljs/core.cljs"} meta ^{:end-column 16, :end-line 5947, :column 10, :line 5947, :file "cljs/core.cljs"} nodes ^{:end-column 18, :end-line 5947, :column 16, :line 5947, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 5947, :column 18, :line 5947, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 5945, :column 8, :line 5945, :file "cljs/core.cljs"} create-array-node-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -assoc-n! ^{:arglists (^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 363, :column 19, :line 363, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 363, :column 20, :line 363, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 363, :column 26, :line 363, :file "cljs/core.cljs"} n ^{:end-column 32, :end-line 363, :column 28, :line 363, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientVector, :tag ^{:end-column 9, :end-line 363, :column 5, :line 363, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 363, :column 9, :line 363, :file "cljs/core.cljs"} -assoc-n!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 24, :end-line 293, :column 14, :line 293, :file "cljs/core.cljs"} IWithMeta ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/MetaFn cljs.core/RSeq cljs.core/Symbol), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 24, :end-line 293, :column 14, :line 293, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 294, :column 5, :line 294, :file "cljs/core.cljs"} clj, :end-column 20, :end-line 294, :column 9, :line 294, :file "cljs/core.cljs"} -with-meta [^{:end-column 28, :end-line 294, :column 20, :line 294, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 294, :column 21, :line 294, :file "cljs/core.cljs"} o ^{:end-column 28, :end-line 294, :column 23, :line 294, :file "cljs/core.cljs"} meta]]}}, :protocol-symbol true, :end-column 24, :end-line 293, :column 14, :line 293, :file "cljs/core.cljs"} IWithMeta, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 15, :end-line 479, :column 10, :line 479, :file "cljs/core.cljs"} list ^{:arglists (^{:end-column 18, :end-line 2264, :column 12, :line 2264, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2264, :column 13, :line 2264, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2264, :column 15, :line 2264, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2264, :column 7, :line 2264, :file "cljs/core.cljs"} {:arglists (^^{:end-column 40, :end-line 2274, :column 29, :line 2274, :file "cljs/core.cljs"} not-native [& ^{:end-column 18, :end-line 2264, :column 15, :line 2264, :file "cljs/core.cljs"} xs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2264, :column 12, :line 2264, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 2264, :column 13, :line 2264, :file "cljs/core.cljs"} & ^{:end-column 18, :end-line 2264, :column 15, :line 2264, :file "cljs/core.cljs"} xs]), :end-column 12, :end-line 2264, :column 7, :line 2264, :file "cljs/core.cljs"} list, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1710, :column 4, :line 1710, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1710, :column 5, :line 1710, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1710, :column 7, :line 1710, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1710, :column 9, :line 1710, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1710, :column 11, :line 1710, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1705, :column 8, :line 1705, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1705, :column 15, :line 1705, :file "cljs/core.cljs"} + ^{:arglists (^{:end-column 6, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1710, :column 4, :line 1710, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1710, :column 5, :line 1710, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1710, :column 7, :line 1710, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1710, :column 9, :line 1710, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1710, :column 11, :line 1710, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1705, :column 8, :line 1705, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1705, :column 15, :line 1705, :file "cljs/core.cljs"} {:arglists (^number [] [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x] ^number [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1710, :column 5, :line 1710, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1710, :column 7, :line 1710, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1710, :column 11, :line 1710, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1707, :column 4, :line 1707, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 1708, :column 4, :line 1708, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1708, :column 5, :line 1708, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1709, :column 4, :line 1709, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1709, :column 5, :line 1709, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1709, :column 7, :line 1709, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1710, :column 4, :line 1710, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1710, :column 5, :line 1710, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1710, :column 7, :line 1710, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1710, :column 9, :line 1710, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1710, :column 11, :line 1710, :file "cljs/core.cljs"} more]), :doc "Returns the sum of nums. (+) returns 0.", :tag ^{:end-column 15, :end-line 1705, :column 8, :line 1705, :file "cljs/core.cljs"} number, :end-column 17, :end-line 1705, :column 15, :line 1705, :file "cljs/core.cljs"} +, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 865, :column 10, :line 865, :file "cljs/core.cljs"} IndexedSeqIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 29, :end-line 865, :column 10, :line 865, :file "cljs/core.cljs"} IndexedSeqIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 46, :end-line 865, :column 29, :line 865, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 865, :column 30, :line 865, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 46, :end-line 865, :column 44, :line 865, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 14, :end-line 7644, :column 3, :line 7644, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7644, :column 4, :line 7644, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7644, :column 9, :line 7644, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7642, :column 7, :line 7642, :file "cljs/core.cljs"} split-with ^{:arglists (^{:end-column 14, :end-line 7644, :column 3, :line 7644, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7644, :column 4, :line 7644, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7644, :column 9, :line 7644, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7642, :column 7, :line 7642, :file "cljs/core.cljs"} {:arglists (^cljs.core/IVector [^{:end-column 9, :end-line 7644, :column 4, :line 7644, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7644, :column 9, :line 7644, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 7644, :column 3, :line 7644, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 7644, :column 4, :line 7644, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 7644, :column 9, :line 7644, :file "cljs/core.cljs"} coll]), :doc "Returns a vector of [(take-while pred coll) (drop-while pred coll)]", :end-column 18, :end-line 7642, :column 7, :line 7642, :file "cljs/core.cljs"} split-with, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 27, :end-line 3919, :column 22, :line 3919, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3919, :column 27, :line 3919, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3919, :column 10, :line 3919, :file "cljs/core.cljs"} ->VectorNode ^{:arglists ([^{:end-column 27, :end-line 3919, :column 22, :line 3919, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3919, :column 27, :line 3919, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3919, :column 10, :line 3919, :file "cljs/core.cljs"} {:arglists (^cljs.core/VectorNode [^{:end-column 27, :end-line 3919, :column 22, :line 3919, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3919, :column 27, :line 3919, :file "cljs/core.cljs"} arr]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 27, :end-line 3919, :column 22, :line 3919, :file "cljs/core.cljs"} edit ^{:end-column 31, :end-line 3919, :column 27, :line 3919, :file "cljs/core.cljs"} arr]), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 21, :end-line 3919, :column 10, :line 3919, :file "cljs/core.cljs"} ->VectorNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} aset ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 183, :column 4, :line 183, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 183, :column 5, :line 183, :file "cljs/core.cljs"} array ^{:end-column 13, :end-line 183, :column 11, :line 183, :file "cljs/core.cljs"} i ^{:end-column 17, :end-line 183, :column 13, :line 183, :file "cljs/core.cljs"} val] ^{:end-column 27, :end-line 185, :column 4, :line 185, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 185, :column 5, :line 185, :file "cljs/core.cljs"} array ^{:end-column 15, :end-line 185, :column 11, :line 185, :file "cljs/core.cljs"} idx ^{:end-column 20, :end-line 185, :column 15, :line 185, :file "cljs/core.cljs"} idx2 ^{:end-column 22, :end-line 185, :column 20, :line 185, :file "cljs/core.cljs"} & ^{:end-column 27, :end-line 185, :column 22, :line 185, :file "cljs/core.cljs"} idxv]), :doc "Sets the value at the index.", :end-column 12, :end-line 181, :column 7, :line 181, :file "cljs/core.cljs"} aset, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 36, :end-line 417, :column 31, :line 417, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 417, :column 32, :line 417, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 417, :column 34, :line 417, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 417, :column 8, :line 417, :file "cljs/core.cljs"} number, :end-column 31, :end-line 417, :column 15, :line 417, :file "cljs/core.cljs"} int-rotate-left ^{:arglists (^{:end-column 36, :end-line 417, :column 31, :line 417, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 417, :column 32, :line 417, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 417, :column 34, :line 417, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 417, :column 8, :line 417, :file "cljs/core.cljs"} number, :end-column 31, :end-line 417, :column 15, :line 417, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 34, :end-line 417, :column 32, :line 417, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 417, :column 34, :line 417, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 36, :end-line 417, :column 31, :line 417, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 417, :column 32, :line 417, :file "cljs/core.cljs"} x ^{:end-column 36, :end-line 417, :column 34, :line 417, :file "cljs/core.cljs"} n]), :tag ^{:end-column 15, :end-line 417, :column 8, :line 417, :file "cljs/core.cljs"} number, :end-column 31, :end-line 417, :column 15, :line 417, :file "cljs/core.cljs"} int-rotate-left, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 2389, :column 4, :line 2389, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2389, :column 5, :line 2389, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2398, :column 4, :line 2398, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2398, :column 5, :line 2398, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2398, :column 8, :line 2398, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2386, :column 7, :line 2386, :file "cljs/core.cljs"} keyword ^{:arglists (^{:end-column 10, :end-line 2389, :column 4, :line 2389, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2389, :column 5, :line 2389, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2398, :column 4, :line 2398, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2398, :column 5, :line 2398, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2398, :column 8, :line 2398, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2386, :column 7, :line 2386, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 2389, :column 5, :line 2389, :file "cljs/core.cljs"} name] ^cljs.core/Keyword [^{:end-column 8, :end-line 2398, :column 5, :line 2398, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2398, :column 8, :line 2398, :file "cljs/core.cljs"} name]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 2389, :column 4, :line 2389, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 2389, :column 5, :line 2389, :file "cljs/core.cljs"} name] ^{:end-column 13, :end-line 2398, :column 4, :line 2398, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 2398, :column 5, :line 2398, :file "cljs/core.cljs"} ns ^{:end-column 13, :end-line 2398, :column 8, :line 2398, :file "cljs/core.cljs"} name]), :doc "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.", :end-column 15, :end-line 2386, :column 7, :line 2386, :file "cljs/core.cljs"} keyword, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 21, :end-line 2279, :column 16, :line 2279, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2279, :column 27, :line 2279, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2279, :column 42, :line 2279, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} ->Cons ^{:arglists ([^{:end-column 21, :end-line 2279, :column 16, :line 2279, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2279, :column 27, :line 2279, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2279, :column 42, :line 2279, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} {:arglists (^cljs.core/Cons [^{:end-column 21, :end-line 2279, :column 16, :line 2279, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2279, :column 27, :line 2279, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2279, :column 42, :line 2279, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 21, :end-line 2279, :column 16, :line 2279, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2279, :column 21, :line 2279, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2279, :column 27, :line 2279, :file "cljs/core.cljs"} rest ^{:mutable true, :end-column 49, :end-line 2279, :column 42, :line 2279, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2279, :column 10, :line 2279, :file "cljs/core.cljs"} ->Cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 49, :end-line 6261, :column 28, :line 6261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6261, :column 29, :line 6261, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6261, :column 34, :line 6261, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6261, :column 45, :line 6261, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6261, :column 8, :line 6261, :file "cljs/core.cljs"} create-tree-map-seq ^{:arglists (^{:end-column 49, :end-line 6261, :column 28, :line 6261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6261, :column 29, :line 6261, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6261, :column 34, :line 6261, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6261, :column 45, :line 6261, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6261, :column 8, :line 6261, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMapSeq [^{:end-column 34, :end-line 6261, :column 29, :line 6261, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6261, :column 34, :line 6261, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6261, :column 45, :line 6261, :file "cljs/core.cljs"} cnt]), :tag function, :op :var, :name ^{:arglists (^{:end-column 49, :end-line 6261, :column 28, :line 6261, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 6261, :column 29, :line 6261, :file "cljs/core.cljs"} tree ^{:end-column 45, :end-line 6261, :column 34, :line 6261, :file "cljs/core.cljs"} ascending? ^{:end-column 49, :end-line 6261, :column 45, :line 6261, :file "cljs/core.cljs"} cnt]), :private true, :end-column 28, :end-line 6261, :column 8, :line 6261, :file "cljs/core.cljs"} create-tree-map-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 26, :end-line 240, :column 14, :line 240, :file "cljs/core.cljs"} ICollection ^{:impls (cljs.core/Range cljs.core/PersistentTreeSet cljs.core/PersistentHashSet cljs.core/ValSeq cljs.core/KeySeq cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentTreeMapSeq cljs.core/PersistentHashMap cljs.core/ArrayNodeSeq cljs.core/NodeSeq cljs.core/PersistentArrayMap cljs.core/PersistentArrayMapSeq cljs.core/ObjMap cljs.core/PersistentQueue cljs.core/PersistentQueueSeq cljs.core/Subvec cljs.core/ChunkedSeq cljs.core/PersistentVector cljs.core/LazyTransformer cljs.core/ChunkedCons cljs.core/LazySeq cljs.core/Cons cljs.core/EmptyList cljs.core/List cljs.core/RSeq cljs.core/IndexedSeq), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 26, :end-line 240, :column 14, :line 240, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 241, :column 5, :line 241, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 241, :column 9, :line 241, :file "cljs/core.cljs"} -conj [^{:end-column 23, :end-line 241, :column 15, :line 241, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 241, :column 16, :line 241, :file "cljs/core.cljs"} coll ^{:end-column 23, :end-line 241, :column 21, :line 241, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 26, :end-line 240, :column 14, :line 240, :file "cljs/core.cljs"} ICollection, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 3028, :column 4, :line 3028, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3028, :column 5, :line 3028, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3028, :column 11, :line 3028, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3031, :column 4, :line 3031, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3031, :column 5, :line 3031, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3031, :column 11, :line 3031, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3031, :column 17, :line 3031, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 3027, :column 7, :line 3027, :file "cljs/core.cljs"} multi-stepper ^{:arglists (^{:end-column 17, :end-line 3028, :column 4, :line 3028, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3028, :column 5, :line 3028, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3028, :column 11, :line 3028, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3031, :column 4, :line 3031, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3031, :column 5, :line 3031, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3031, :column 11, :line 3031, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3031, :column 17, :line 3031, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 3027, :column 7, :line 3027, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 3028, :column 5, :line 3028, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3028, :column 11, :line 3028, :file "cljs/core.cljs"} iters] ^cljs.core/MultiStepper [^{:end-column 11, :end-line 3031, :column 5, :line 3031, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3031, :column 11, :line 3031, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3031, :column 17, :line 3031, :file "cljs/core.cljs"} nexts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 3028, :column 4, :line 3028, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3028, :column 5, :line 3028, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3028, :column 11, :line 3028, :file "cljs/core.cljs"} iters] ^{:end-column 23, :end-line 3031, :column 4, :line 3031, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3031, :column 5, :line 3031, :file "cljs/core.cljs"} xform ^{:end-column 17, :end-line 3031, :column 11, :line 3031, :file "cljs/core.cljs"} iters ^{:end-column 23, :end-line 3031, :column 17, :line 3031, :file "cljs/core.cljs"} nexts]), :end-column 21, :end-line 3027, :column 7, :line 3027, :file "cljs/core.cljs"} multi-stepper, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1921, :column 13, :line 1921, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1921, :column 14, :line 1921, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1921, :column 7, :line 1921, :file "cljs/core.cljs"} chars ^{:arglists (^{:end-column 16, :end-line 1921, :column 13, :line 1921, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1921, :column 14, :line 1921, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1921, :column 7, :line 1921, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1921, :column 14, :line 1921, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1921, :column 13, :line 1921, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1921, :column 14, :line 1921, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1921, :column 7, :line 1921, :file "cljs/core.cljs"} chars, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 2062, :column 4, :line 2062, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2063, :column 5, :line 2063, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2066, :column 4, :line 2066, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2066, :column 5, :line 2066, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2066, :column 9, :line 2066, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2058, :column 7, :line 2058, :file "cljs/core.cljs"} str ^{:arglists (^{:end-column 6, :end-line 2062, :column 4, :line 2062, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2063, :column 5, :line 2063, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2066, :column 4, :line 2066, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2066, :column 5, :line 2066, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2066, :column 9, :line 2066, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2058, :column 7, :line 2058, :file "cljs/core.cljs"} {:arglists (^string [] [^{:end-column 7, :end-line 2063, :column 5, :line 2063, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 2066, :column 5, :line 2066, :file "cljs/core.cljs"} x & ^{:end-column 12, :end-line 2066, :column 9, :line 2066, :file "cljs/core.cljs"} ys]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2062, :column 4, :line 2062, :file "cljs/core.cljs"} [] ^{:end-column 7, :end-line 2063, :column 4, :line 2063, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2063, :column 5, :line 2063, :file "cljs/core.cljs"} x] ^{:end-column 12, :end-line 2066, :column 4, :line 2066, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2066, :column 5, :line 2066, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2066, :column 7, :line 2066, :file "cljs/core.cljs"} & ^{:end-column 12, :end-line 2066, :column 9, :line 2066, :file "cljs/core.cljs"} ys]), :doc "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.", :end-column 11, :end-line 2058, :column 7, :line 2058, :file "cljs/core.cljs"} str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 667, :column 8, :line 667, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 667, :column 12, :line 667, :file "cljs/core.cljs"} next ^{:arglists (^{:end-column 9, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 667, :column 8, :line 667, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 667, :column 12, :line 667, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 670, :column 3, :line 670, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 670, :column 4, :line 670, :file "cljs/core.cljs"} coll]), :doc "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil", :tag ^{:end-column 12, :end-line 667, :column 8, :line 667, :file "cljs/core.cljs"} seq, :end-column 17, :end-line 667, :column 12, :line 667, :file "cljs/core.cljs"} next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 249, :column 14, :line 249, :file "cljs/core.cljs"} ASeq ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons cljs.core/Cons cljs.core/List cljs.core/IndexedSeq), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 249, :column 14, :line 249, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 19, :end-line 249, :column 14, :line 249, :file "cljs/core.cljs"} ASeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 39, :end-line 7944, :column 21, :line 7944, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7944, :column 22, :line 7944, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7944, :column 27, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7944, :column 34, :line 7944, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} pr-seq-writer ^{:arglists (^{:end-column 39, :end-line 7944, :column 21, :line 7944, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7944, :column 22, :line 7944, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7944, :column 27, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7944, :column 34, :line 7944, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 7944, :column 22, :line 7944, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7944, :column 27, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7944, :column 34, :line 7944, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 39, :end-line 7944, :column 21, :line 7944, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 7944, :column 22, :line 7944, :file "cljs/core.cljs"} objs ^{:end-column 34, :end-line 7944, :column 27, :line 7944, :file "cljs/core.cljs"} writer ^{:end-column 39, :end-line 7944, :column 34, :line 7944, :file "cljs/core.cljs"} opts]), :end-column 21, :end-line 7944, :column 7, :line 7944, :file "cljs/core.cljs"} pr-seq-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} SeqIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 18, :end-line 2938, :column 10, :line 2938, :file "cljs/core.cljs"} SeqIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 50, :end-line 2938, :column 18, :line 2938, :file "cljs/core.cljs"} [^{:mutable true, :end-column 34, :end-line 2938, :column 29, :line 2938, :file "cljs/core.cljs"} _seq ^{:mutable true, :end-column 50, :end-line 2938, :column 44, :line 2938, :file "cljs/core.cljs"} _next], :protocols #{Object}}, ^{:protocol-info {:methods {^{:end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} IFn ^{:impls (cljs.core/MultiFn cljs.core/PersistentTreeSet cljs.core/TransientHashSet cljs.core/PersistentHashSet cljs.core/PersistentTreeMap cljs.core/RedNode cljs.core/BlackNode cljs.core/PersistentHashMap cljs.core/PersistentArrayMap cljs.core/ObjMap cljs.core/TransientVector cljs.core/Subvec cljs.core/PersistentVector cljs.core/Keyword cljs.core/MetaFn cljs.core/Symbol), :protocol-info {:methods {^{:end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke [^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]]}}, :protocol-symbol true, :end-column 18, :end-line 206, :column 14, :line 206, :file "cljs/core.cljs"} IFn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 7776, :column 15, :line 7776, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7776, :column 16, :line 7776, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7776, :column 7, :line 7776, :file "cljs/core.cljs"} regexp? ^{:arglists (^{:end-column 18, :end-line 7776, :column 15, :line 7776, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7776, :column 16, :line 7776, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7776, :column 7, :line 7776, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 18, :end-line 7776, :column 16, :line 7776, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 7776, :column 15, :line 7776, :file "cljs/core.cljs"} [^{:end-column 18, :end-line 7776, :column 16, :line 7776, :file "cljs/core.cljs"} o]), :end-column 15, :end-line 7776, :column 7, :line 7776, :file "cljs/core.cljs"} regexp?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 732, :column 10, :line 732, :file "cljs/core.cljs"} hash-map ^{:arglists (^{:end-column 14, :end-line 6868, :column 3, :line 6868, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6868, :column 4, :line 6868, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6868, :column 6, :line 6868, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6865, :column 7, :line 6865, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 354, :column 5, :line 354, :file "cljs/core.cljs"} clj [& ^{:end-column 14, :end-line 6868, :column 6, :line 6868, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 6868, :column 3, :line 6868, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 6868, :column 4, :line 6868, :file "cljs/core.cljs"} & ^{:end-column 14, :end-line 6868, :column 6, :line 6868, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new hash map with supplied mappings.", :end-column 16, :end-line 6865, :column 7, :line 6865, :file "cljs/core.cljs"} hash-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8550, :column 4, :line 8550, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8550, :column 5, :line 8550, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8550, :column 9, :line 8550, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8553, :column 4, :line 8553, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8553, :column 5, :line 8553, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8553, :column 11, :line 8553, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8546, :column 7, :line 8546, :file "cljs/core.cljs"} underive ^{:arglists (^{:end-column 16, :end-line 8550, :column 4, :line 8550, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8550, :column 5, :line 8550, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8550, :column 9, :line 8550, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8553, :column 4, :line 8553, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8553, :column 5, :line 8553, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8553, :column 11, :line 8553, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8546, :column 7, :line 8546, :file "cljs/core.cljs"} {:arglists (^clj-nil [^{:end-column 9, :end-line 8550, :column 5, :line 8550, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8550, :column 9, :line 8550, :file "cljs/core.cljs"} parent] [^{:end-column 7, :end-line 8553, :column 5, :line 8553, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8553, :column 11, :line 8553, :file "cljs/core.cljs"} parent]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8550, :column 4, :line 8550, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8550, :column 5, :line 8550, :file "cljs/core.cljs"} tag ^{:end-column 16, :end-line 8550, :column 9, :line 8550, :file "cljs/core.cljs"} parent] ^{:end-column 18, :end-line 8553, :column 4, :line 8553, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8553, :column 5, :line 8553, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8553, :column 7, :line 8553, :file "cljs/core.cljs"} tag ^{:end-column 18, :end-line 8553, :column 11, :line 8553, :file "cljs/core.cljs"} parent]), :doc "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.", :end-column 16, :end-line 8546, :column 7, :line 8546, :file "cljs/core.cljs"} underive, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 1421, :column 4, :line 1421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1421, :column 5, :line 1421, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1421, :column 10, :line 1421, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1421, :column 12, :line 1421, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1421, :column 15, :line 1421, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1421, :column 17, :line 1421, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} array-copy ^{:arglists (^{:end-column 21, :end-line 1421, :column 4, :line 1421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1421, :column 5, :line 1421, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1421, :column 10, :line 1421, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1421, :column 12, :line 1421, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1421, :column 15, :line 1421, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1421, :column 17, :line 1421, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1421, :column 5, :line 1421, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1421, :column 10, :line 1421, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1421, :column 12, :line 1421, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1421, :column 15, :line 1421, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1421, :column 17, :line 1421, :file "cljs/core.cljs"} len]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 1421, :column 4, :line 1421, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1421, :column 5, :line 1421, :file "cljs/core.cljs"} from ^{:end-column 12, :end-line 1421, :column 10, :line 1421, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 1421, :column 12, :line 1421, :file "cljs/core.cljs"} to ^{:end-column 17, :end-line 1421, :column 15, :line 1421, :file "cljs/core.cljs"} j ^{:end-column 21, :end-line 1421, :column 17, :line 1421, :file "cljs/core.cljs"} len]), :private true, :end-column 19, :end-line 1420, :column 8, :line 1420, :file "cljs/core.cljs"} array-copy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 34, :end-line 4768, :column 29, :line 4768, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4768, :column 30, :line 4768, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4768, :column 32, :line 4768, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4768, :column 8, :line 4768, :file "cljs/core.cljs"} obj-map-compare-keys ^{:arglists (^{:end-column 34, :end-line 4768, :column 29, :line 4768, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4768, :column 30, :line 4768, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4768, :column 32, :line 4768, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4768, :column 8, :line 4768, :file "cljs/core.cljs"} {:arglists ([^{:end-column 32, :end-line 4768, :column 30, :line 4768, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4768, :column 32, :line 4768, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 34, :end-line 4768, :column 29, :line 4768, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 4768, :column 30, :line 4768, :file "cljs/core.cljs"} a ^{:end-column 34, :end-line 4768, :column 32, :line 4768, :file "cljs/core.cljs"} b]), :private true, :end-column 29, :end-line 4768, :column 8, :line 4768, :file "cljs/core.cljs"} obj-map-compare-keys, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} -reset! ^{:arglists (^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 389, :column 12, :line 389, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 389, :column 13, :line 389, :file "cljs/core.cljs"} o ^{:end-column 25, :end-line 389, :column 15, :line 389, :file "cljs/core.cljs"} new-value]), :protocol cljs.core/IReset, :end-column 12, :end-line 389, :column 4, :line 389, :file "cljs/core.cljs"} -reset!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} -rest ^{:arglists (^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 253, :column 15, :line 253, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 253, :column 16, :line 253, :file "cljs/core.cljs"} coll]), :protocol cljs.core/ISeq, :tag ^{:end-column 9, :end-line 253, :column 5, :line 253, :file "cljs/core.cljs"} clj, :end-column 15, :end-line 253, :column 9, :line 253, :file "cljs/core.cljs"} -rest, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 18, :end-line 2904, :column 16, :line 2904, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} nil-iter ^{:arglists (^{:end-column 18, :end-line 2904, :column 16, :line 2904, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} {:arglists (^cljs.core/t8427 []), :tag function, :op :var, :name ^{:arglists (^{:end-column 18, :end-line 2904, :column 16, :line 2904, :file "cljs/core.cljs"} []), :end-column 16, :end-line 2904, :column 7, :line 2904, :file "cljs/core.cljs"} nil-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 4036, :column 31, :line 4036, :file "cljs/core.cljs"} pr-writer ^{:arglists (^{:end-column 20, :end-line 7877, :column 3, :line 7877, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7877, :column 4, :line 7877, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7877, :column 8, :line 7877, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7877, :column 15, :line 7877, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 7873, :column 8, :line 7873, :file "cljs/core.cljs"} {:arglists ([^{:end-column 8, :end-line 7877, :column 4, :line 7877, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7877, :column 8, :line 7877, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7877, :column 15, :line 7877, :file "cljs/core.cljs"} opts]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 7877, :column 3, :line 7877, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 7877, :column 4, :line 7877, :file "cljs/core.cljs"} obj ^{:end-column 15, :end-line 7877, :column 8, :line 7877, :file "cljs/core.cljs"} writer ^{:end-column 20, :end-line 7877, :column 15, :line 7877, :file "cljs/core.cljs"} opts]), :doc "Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.", :private true, :end-column 18, :end-line 7873, :column 8, :line 7873, :file "cljs/core.cljs"} pr-writer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} false? ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1442, :column 3, :line 1442, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1442, :column 4, :line 1442, :file "cljs/core.cljs"} x]), :doc "Returns true if x is the value false, false otherwise.", :tag ^{:end-column 16, :end-line 1440, :column 8, :line 1440, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 1440, :column 16, :line 1440, :file "cljs/core.cljs"} false?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 25, :end-line 4016, :column 10, :line 4016, :file "cljs/core.cljs"} RangedIterator {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 25, :end-line 4016, :column 10, :line 4016, :file "cljs/core.cljs"} RangedIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 79, :end-line 4016, :column 25, :line 4016, :file "cljs/core.cljs"} [^{:mutable true, :end-column 38, :end-line 4016, :column 36, :line 4016, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 53, :end-line 4016, :column 48, :line 4016, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 67, :end-line 4016, :column 63, :line 4016, :file "cljs/core.cljs"} arr ^{:end-column 69, :end-line 4016, :column 67, :line 4016, :file "cljs/core.cljs"} v ^{:end-column 75, :end-line 4016, :column 69, :line 4016, :file "cljs/core.cljs"} start ^{:end-column 79, :end-line 4016, :column 75, :line 4016, :file "cljs/core.cljs"} end], :protocols #{Object}}, ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably* ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 38, :end-line 34, :column 1, :line 34, :file "cljs/core.cljs"} *print-readably*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 1923, :column 12, :line 1923, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1923, :column 13, :line 1923, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1923, :column 7, :line 1923, :file "cljs/core.cljs"} ints ^{:arglists (^{:end-column 15, :end-line 1923, :column 12, :line 1923, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1923, :column 13, :line 1923, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1923, :column 7, :line 1923, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 1923, :column 13, :line 1923, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 1923, :column 12, :line 1923, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 1923, :column 13, :line 1923, :file "cljs/core.cljs"} x]), :end-column 12, :end-line 1923, :column 7, :line 1923, :file "cljs/core.cljs"} ints, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3495, :column 4, :line 3495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3495, :column 5, :line 3495, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3503, :column 4, :line 3503, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3503, :column 5, :line 3503, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3503, :column 8, :line 3503, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3511, :column 8, :line 3511, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3511, :column 11, :line 3511, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3519, :column 4, :line 3519, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3519, :column 5, :line 3519, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3519, :column 8, :line 3519, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3519, :column 11, :line 3519, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3519, :column 14, :line 3519, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3519, :column 16, :line 3519, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3490, :column 7, :line 3490, :file "cljs/core.cljs"} some-fn ^{:arglists (^{:end-column 7, :end-line 3495, :column 4, :line 3495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3495, :column 5, :line 3495, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3503, :column 4, :line 3503, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3503, :column 5, :line 3503, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3503, :column 8, :line 3503, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3511, :column 8, :line 3511, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3511, :column 11, :line 3511, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3519, :column 4, :line 3519, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3519, :column 5, :line 3519, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3519, :column 8, :line 3519, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3519, :column 11, :line 3519, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3519, :column 14, :line 3519, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3519, :column 16, :line 3519, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3490, :column 7, :line 3490, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 3495, :column 5, :line 3495, :file "cljs/core.cljs"} p] ^function [^{:end-column 8, :end-line 3503, :column 5, :line 3503, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3503, :column 8, :line 3503, :file "cljs/core.cljs"} p2] ^function [^{:end-column 8, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3511, :column 8, :line 3511, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3511, :column 11, :line 3511, :file "cljs/core.cljs"} p3] ^function [^{:end-column 8, :end-line 3519, :column 5, :line 3519, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3519, :column 8, :line 3519, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3519, :column 11, :line 3519, :file "cljs/core.cljs"} p3 & ^{:end-column 19, :end-line 3519, :column 16, :line 3519, :file "cljs/core.cljs"} ps]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3495, :column 4, :line 3495, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3495, :column 5, :line 3495, :file "cljs/core.cljs"} p] ^{:end-column 11, :end-line 3503, :column 4, :line 3503, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3503, :column 5, :line 3503, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3503, :column 8, :line 3503, :file "cljs/core.cljs"} p2] ^{:end-column 14, :end-line 3511, :column 4, :line 3511, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3511, :column 5, :line 3511, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3511, :column 8, :line 3511, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3511, :column 11, :line 3511, :file "cljs/core.cljs"} p3] ^{:end-column 19, :end-line 3519, :column 4, :line 3519, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3519, :column 5, :line 3519, :file "cljs/core.cljs"} p1 ^{:end-column 11, :end-line 3519, :column 8, :line 3519, :file "cljs/core.cljs"} p2 ^{:end-column 14, :end-line 3519, :column 11, :line 3519, :file "cljs/core.cljs"} p3 ^{:end-column 16, :end-line 3519, :column 14, :line 3519, :file "cljs/core.cljs"} & ^{:end-column 19, :end-line 3519, :column 16, :line 3519, :file "cljs/core.cljs"} ps]), :doc "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.", :end-column 15, :end-line 3490, :column 7, :line 3490, :file "cljs/core.cljs"} some-fn, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline* ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 40, :end-line 32, :column 1, :line 32, :file "cljs/core.cljs"} *flush-on-newline*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 19, :end-line 1572, :column 10, :line 1572, :file "cljs/core.cljs"} to-array ^{:arglists (^{:end-column 6, :end-line 2604, :column 3, :line 2604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2602, :column 7, :line 2602, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 6, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 2604, :column 3, :line 2604, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2604, :column 4, :line 2604, :file "cljs/core.cljs"} s]), :doc "Naive impl of to-array as a start.", :end-column 16, :end-line 2602, :column 7, :line 2602, :file "cljs/core.cljs"} to-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 23, :end-line 4331, :column 10, :line 4331, :file "cljs/core.cljs"} build-subvec ^{:arglists (^{:end-column 46, :end-line 4427, :column 21, :line 4427, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4427, :column 22, :line 4427, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4427, :column 27, :line 4427, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4427, :column 29, :line 4427, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4427, :column 35, :line 4427, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4427, :column 39, :line 4427, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 4427, :column 8, :line 4427, :file "cljs/core.cljs"} {:arglists (^cljs.core/Subvec [^{:end-column 27, :end-line 4427, :column 22, :line 4427, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4427, :column 27, :line 4427, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4427, :column 29, :line 4427, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4427, :column 35, :line 4427, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4427, :column 39, :line 4427, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists (^{:end-column 46, :end-line 4427, :column 21, :line 4427, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 4427, :column 22, :line 4427, :file "cljs/core.cljs"} meta ^{:end-column 29, :end-line 4427, :column 27, :line 4427, :file "cljs/core.cljs"} v ^{:end-column 35, :end-line 4427, :column 29, :line 4427, :file "cljs/core.cljs"} start ^{:end-column 39, :end-line 4427, :column 35, :line 4427, :file "cljs/core.cljs"} end ^{:end-column 46, :end-line 4427, :column 39, :line 4427, :file "cljs/core.cljs"} __hash]), :private true, :end-column 21, :end-line 4427, :column 8, :line 4427, :file "cljs/core.cljs"} build-subvec, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 25, :end-line 2334, :column 22, :line 2334, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2334, :column 23, :line 2334, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2334, :column 8, :line 2334, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2334, :column 16, :line 2334, :file "cljs/core.cljs"} list? ^{:arglists (^{:end-column 25, :end-line 2334, :column 22, :line 2334, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2334, :column 23, :line 2334, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2334, :column 8, :line 2334, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2334, :column 16, :line 2334, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 25, :end-line 2334, :column 23, :line 2334, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 25, :end-line 2334, :column 22, :line 2334, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2334, :column 23, :line 2334, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 2334, :column 8, :line 2334, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 2334, :column 16, :line 2334, :file "cljs/core.cljs"} list?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 6686, :column 24, :line 6686, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6686, :column 25, :line 6686, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6686, :column 30, :line 6686, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6686, :column 35, :line 6686, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6686, :column 37, :line 6686, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6686, :column 8, :line 6686, :file "cljs/core.cljs"} tree-map-remove ^{:arglists (^{:end-column 43, :end-line 6686, :column 24, :line 6686, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6686, :column 25, :line 6686, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6686, :column 30, :line 6686, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6686, :column 35, :line 6686, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6686, :column 37, :line 6686, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6686, :column 8, :line 6686, :file "cljs/core.cljs"} {:arglists ([^{:end-column 30, :end-line 6686, :column 25, :line 6686, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6686, :column 30, :line 6686, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6686, :column 35, :line 6686, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6686, :column 37, :line 6686, :file "cljs/core.cljs"} found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 6686, :column 24, :line 6686, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 6686, :column 25, :line 6686, :file "cljs/core.cljs"} comp ^{:end-column 35, :end-line 6686, :column 30, :line 6686, :file "cljs/core.cljs"} tree ^{:end-column 37, :end-line 6686, :column 35, :line 6686, :file "cljs/core.cljs"} k ^{:end-column 43, :end-line 6686, :column 37, :line 6686, :file "cljs/core.cljs"} found]), :private true, :end-column 24, :end-line 6686, :column 8, :line 6686, :file "cljs/core.cljs"} tree-map-remove, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5731, :column 10, :line 5731, :file "cljs/core.cljs"} HashCollisionNode {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 28, :end-line 5731, :column 10, :line 5731, :file "cljs/core.cljs"} HashCollisionNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 43, :end-line 5734, :column 28, :line 5731, :file "cljs/core.cljs"} [^{:end-column 34, :end-line 5731, :column 29, :line 5731, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 54, :end-line 5732, :column 39, :line 5732, :file "cljs/core.cljs"} collision-hash ^{:mutable true, :end-column 43, :end-line 5733, :column 39, :line 5733, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 5734, :column 39, :line 5734, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array? ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 88, :column 23, :line 88, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 88, :column 24, :line 88, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 88, :column 8, :line 88, :file "cljs/core.cljs"} boolean, :end-column 23, :end-line 88, :column 16, :line 88, :file "cljs/core.cljs"} array?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 8573, :column 3, :line 8573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8573, :column 4, :line 8573, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8573, :column 6, :line 8573, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8573, :column 8, :line 8573, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8572, :column 8, :line 8572, :file "cljs/core.cljs"} prefers* ^{:arglists (^{:end-column 21, :end-line 8573, :column 3, :line 8573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8573, :column 4, :line 8573, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8573, :column 6, :line 8573, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8573, :column 8, :line 8573, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8572, :column 8, :line 8572, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 8573, :column 4, :line 8573, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8573, :column 6, :line 8573, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8573, :column 8, :line 8573, :file "cljs/core.cljs"} prefer-table]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 8573, :column 3, :line 8573, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8573, :column 4, :line 8573, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 8573, :column 6, :line 8573, :file "cljs/core.cljs"} y ^{:end-column 21, :end-line 8573, :column 8, :line 8573, :file "cljs/core.cljs"} prefer-table]), :private true, :end-column 17, :end-line 8572, :column 8, :line 8572, :file "cljs/core.cljs"} prefers*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 20, :end-line 614, :column 13, :line 614, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 614, :column 14, :line 614, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 614, :column 7, :line 614, :file "cljs/core.cljs"} clone ^{:arglists (^{:end-column 20, :end-line 614, :column 13, :line 614, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 614, :column 14, :line 614, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 614, :column 7, :line 614, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 232, :column 5, :line 232, :file "cljs/core.cljs"} clj [^{:end-column 20, :end-line 614, :column 14, :line 614, :file "cljs/core.cljs"} value]), :tag function, :op :var, :name ^{:arglists (^{:end-column 20, :end-line 614, :column 13, :line 614, :file "cljs/core.cljs"} [^{:end-column 20, :end-line 614, :column 14, :line 614, :file "cljs/core.cljs"} value]), :end-column 13, :end-line 614, :column 7, :line 614, :file "cljs/core.cljs"} clone, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 4754, :column 19, :line 4754, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4754, :column 20, :line 4754, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4754, :column 25, :line 4754, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4754, :column 27, :line 4754, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4754, :column 8, :line 4754, :file "cljs/core.cljs"} scan-array ^{:arglists (^{:end-column 33, :end-line 4754, :column 19, :line 4754, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4754, :column 20, :line 4754, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4754, :column 25, :line 4754, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4754, :column 27, :line 4754, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4754, :column 8, :line 4754, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 4754, :column 20, :line 4754, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4754, :column 25, :line 4754, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4754, :column 27, :line 4754, :file "cljs/core.cljs"} array]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 4754, :column 19, :line 4754, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 4754, :column 20, :line 4754, :file "cljs/core.cljs"} incr ^{:end-column 27, :end-line 4754, :column 25, :line 4754, :file "cljs/core.cljs"} k ^{:end-column 33, :end-line 4754, :column 27, :line 4754, :file "cljs/core.cljs"} array]), :private true, :end-column 19, :end-line 4754, :column 8, :line 4754, :file "cljs/core.cljs"} scan-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1987, :column 3, :line 1987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1987, :column 4, :line 1987, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1985, :column 7, :line 1985, :file "cljs/core.cljs"} bit-not ^{:arglists (^{:end-column 6, :end-line 1987, :column 3, :line 1987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1987, :column 4, :line 1987, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1985, :column 7, :line 1985, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 6, :end-line 1987, :column 4, :line 1987, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1987, :column 3, :line 1987, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1987, :column 4, :line 1987, :file "cljs/core.cljs"} x]), :doc "Bitwise complement", :end-column 15, :end-line 1985, :column 7, :line 1985, :file "cljs/core.cljs"} bit-not, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 7865, :column 3, :line 7865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7865, :column 4, :line 7865, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7864, :column 17, :line 7864, :file "cljs/core.cljs"} quote-string ^{:arglists (^{:end-column 6, :end-line 7865, :column 3, :line 7865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7865, :column 4, :line 7865, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7864, :column 17, :line 7864, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 7865, :column 4, :line 7865, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 7865, :column 3, :line 7865, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 7865, :column 4, :line 7865, :file "cljs/core.cljs"} s]), :private true, :end-column 30, :end-line 7864, :column 17, :line 7864, :file "cljs/core.cljs"} quote-string, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 23, :end-line 1802, :column 20, :line 1802, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1802, :column 21, :line 1802, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1802, :column 8, :line 1802, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1802, :column 15, :line 1802, :file "cljs/core.cljs"} byte ^{:arglists (^{:end-column 23, :end-line 1802, :column 20, :line 1802, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1802, :column 21, :line 1802, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1802, :column 8, :line 1802, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1802, :column 15, :line 1802, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 1802, :column 21, :line 1802, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 23, :end-line 1802, :column 20, :line 1802, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 1802, :column 21, :line 1802, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1802, :column 8, :line 1802, :file "cljs/core.cljs"} number, :end-column 20, :end-line 1802, :column 15, :line 1802, :file "cljs/core.cljs"} byte, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} max ^{:arglists (^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] [^{:end-column 7, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1790, :column 4, :line 1790, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1790, :column 5, :line 1790, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 1791, :column 4, :line 1791, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1791, :column 5, :line 1791, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1791, :column 7, :line 1791, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 1792, :column 4, :line 1792, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1792, :column 5, :line 1792, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 1792, :column 7, :line 1792, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 1792, :column 9, :line 1792, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 1792, :column 11, :line 1792, :file "cljs/core.cljs"} more]), :doc "Returns the greatest of the nums.", :tag ^{:end-column 15, :end-line 1788, :column 8, :line 1788, :file "cljs/core.cljs"} number, :end-column 19, :end-line 1788, :column 15, :line 1788, :file "cljs/core.cljs"} max, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 26, :end-line 369, :column 14, :line 369, :file "cljs/core.cljs"} IComparable ^{:impls (cljs.core/Symbol cljs.core/Keyword cljs.core/Subvec cljs.core/PersistentVector), :protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 26, :end-line 369, :column 14, :line 369, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 12, :end-line 370, :column 5, :line 370, :file "cljs/core.cljs"} number, :end-column 21, :end-line 370, :column 12, :line 370, :file "cljs/core.cljs"} -compare [^{:end-column 26, :end-line 370, :column 21, :line 370, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 370, :column 22, :line 370, :file "cljs/core.cljs"} x ^{:end-column 26, :end-line 370, :column 24, :line 370, :file "cljs/core.cljs"} y]]}}, :protocol-symbol true, :end-column 26, :end-line 369, :column 14, :line 369, :file "cljs/core.cljs"} IComparable, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 2026, :column 4, :line 2026, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2026, :column 5, :line 2026, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2027, :column 4, :line 2027, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2027, :column 5, :line 2027, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2027, :column 7, :line 2027, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2028, :column 5, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2028, :column 7, :line 2028, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2028, :column 9, :line 2028, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2028, :column 11, :line 2028, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 2022, :column 8, :line 2022, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 2022, :column 16, :line 2022, :file "cljs/core.cljs"} == ^{:arglists (^{:end-column 7, :end-line 2026, :column 4, :line 2026, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2026, :column 5, :line 2026, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2027, :column 4, :line 2027, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2027, :column 5, :line 2027, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2027, :column 7, :line 2027, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2028, :column 5, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2028, :column 7, :line 2028, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2028, :column 9, :line 2028, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2028, :column 11, :line 2028, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 2022, :column 8, :line 2022, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 2022, :column 16, :line 2022, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 7, :end-line 2026, :column 5, :line 2026, :file "cljs/core.cljs"} x] ^^{:end-column 13, :end-line 303, :column 5, :line 303, :file "cljs/core.cljs"} boolean [^{:end-column 7, :end-line 2027, :column 5, :line 2027, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2027, :column 7, :line 2027, :file "cljs/core.cljs"} y] [^{:end-column 7, :end-line 2028, :column 5, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2028, :column 7, :line 2028, :file "cljs/core.cljs"} y & ^{:end-column 16, :end-line 2028, :column 11, :line 2028, :file "cljs/core.cljs"} more]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 2026, :column 4, :line 2026, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2026, :column 5, :line 2026, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 2027, :column 4, :line 2027, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2027, :column 5, :line 2027, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2027, :column 7, :line 2027, :file "cljs/core.cljs"} y] ^{:end-column 16, :end-line 2028, :column 4, :line 2028, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2028, :column 5, :line 2028, :file "cljs/core.cljs"} x ^{:end-column 9, :end-line 2028, :column 7, :line 2028, :file "cljs/core.cljs"} y ^{:end-column 11, :end-line 2028, :column 9, :line 2028, :file "cljs/core.cljs"} & ^{:end-column 16, :end-line 2028, :column 11, :line 2028, :file "cljs/core.cljs"} more]), :doc "Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.", :tag ^{:end-column 16, :end-line 2022, :column 8, :line 2022, :file "cljs/core.cljs"} boolean, :end-column 19, :end-line 2022, :column 16, :line 2022, :file "cljs/core.cljs"} ==, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8493, :column 4, :line 8493, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8493, :column 5, :line 8493, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8493, :column 7, :line 8493, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8487, :column 7, :line 8487, :file "cljs/core.cljs"} parents ^{:arglists (^{:end-column 9, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8493, :column 4, :line 8493, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8493, :column 5, :line 8493, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8493, :column 7, :line 8493, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8487, :column 7, :line 8487, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} tag] [^{:end-column 7, :end-line 8493, :column 5, :line 8493, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8493, :column 7, :line 8493, :file "cljs/core.cljs"} tag]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8492, :column 4, :line 8492, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8492, :column 5, :line 8492, :file "cljs/core.cljs"} tag] ^{:end-column 11, :end-line 8493, :column 4, :line 8493, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8493, :column 5, :line 8493, :file "cljs/core.cljs"} h ^{:end-column 11, :end-line 8493, :column 7, :line 8493, :file "cljs/core.cljs"} tag]), :doc "Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy", :end-column 15, :end-line 8487, :column 7, :line 8487, :file "cljs/core.cljs"} parents, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1077, :column 3, :line 1077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1077, :column 4, :line 1077, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} count ^{:arglists (^{:end-column 9, :end-line 1077, :column 3, :line 1077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1077, :column 4, :line 1077, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1077, :column 4, :line 1077, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1077, :column 3, :line 1077, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1077, :column 4, :line 1077, :file "cljs/core.cljs"} coll]), :doc "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps", :end-column 13, :end-line 1074, :column 7, :line 1074, :file "cljs/core.cljs"} count, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} -disjoin! ^{:arglists (^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} {:arglists ([^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 28, :end-line 367, :column 19, :line 367, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 367, :column 20, :line 367, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 367, :column 26, :line 367, :file "cljs/core.cljs"} v]), :protocol cljs.core/ITransientSet, :tag ^{:end-column 9, :end-line 367, :column 5, :line 367, :file "cljs/core.cljs"} clj, :end-column 19, :end-line 367, :column 9, :line 367, :file "cljs/core.cljs"} -disjoin!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6098, :column 39, :line 6098, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6098, :column 47, :line 6098, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6099, :column 38, :line 6099, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6100, :column 38, :line 6100, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6101, :column 39, :line 6101, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6101, :column 47, :line 6101, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6102, :column 38, :line 6102, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 6098, :column 10, :line 6098, :file "cljs/core.cljs"} ->TransientHashMap ^{:arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6098, :column 39, :line 6098, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6098, :column 47, :line 6098, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6099, :column 38, :line 6099, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6100, :column 38, :line 6100, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6101, :column 39, :line 6101, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6101, :column 47, :line 6101, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6102, :column 38, :line 6102, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 6098, :column 10, :line 6098, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientHashMap [^{:mutable true, :tag ^{:end-column 47, :end-line 6098, :column 39, :line 6098, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6098, :column 47, :line 6098, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6099, :column 38, :line 6099, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6100, :column 38, :line 6100, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6101, :column 39, :line 6101, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6101, :column 47, :line 6101, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6102, :column 38, :line 6102, :file "cljs/core.cljs"} nil-val]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :tag ^{:end-column 47, :end-line 6098, :column 39, :line 6098, :file "cljs/core.cljs"} boolean, :end-column 52, :end-line 6098, :column 47, :line 6098, :file "cljs/core.cljs"} edit ^{:mutable true, :end-column 43, :end-line 6099, :column 38, :line 6099, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 44, :end-line 6100, :column 38, :line 6100, :file "cljs/core.cljs"} count ^{:mutable true, :tag ^{:end-column 47, :end-line 6101, :column 39, :line 6101, :file "cljs/core.cljs"} boolean, :end-column 56, :end-line 6101, :column 47, :line 6101, :file "cljs/core.cljs"} has-nil? ^{:mutable true, :end-column 46, :end-line 6102, :column 38, :line 6102, :file "cljs/core.cljs"} nil-val]), :factory :positional, :skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{Object cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 27, :end-line 6098, :column 10, :line 6098, :file "cljs/core.cljs"} ->TransientHashMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 2465, :column 10, :line 2465, :file "cljs/core.cljs"} ArrayChunk {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IReduce}, :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}, :end-column 21, :end-line 2484, :column 10, :line 2484, :file "cljs/core.cljs"} ArrayChunk, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 34, :end-line 2484, :column 21, :line 2484, :file "cljs/core.cljs"} [^{:end-column 26, :end-line 2484, :column 22, :line 2484, :file "cljs/core.cljs"} arr ^{:end-column 30, :end-line 2484, :column 26, :line 2484, :file "cljs/core.cljs"} off ^{:end-column 34, :end-line 2484, :column 30, :line 2484, :file "cljs/core.cljs"} end], :protocols #{cljs.core/IIndexed cljs.core/ICounted cljs.core/IChunk cljs.core/IReduce}}, ^{:arglists (^{:end-column 26, :end-line 6905, :column 4, :line 6905, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6905, :column 5, :line 6905, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6905, :column 16, :line 6905, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6905, :column 18, :line 6905, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6902, :column 7, :line 6902, :file "cljs/core.cljs"} sorted-map-by ^{:arglists (^{:end-column 26, :end-line 6905, :column 4, :line 6905, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6905, :column 5, :line 6905, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6905, :column 16, :line 6905, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6905, :column 18, :line 6905, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6902, :column 7, :line 6902, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentTreeMap [^{:end-column 16, :end-line 6905, :column 5, :line 6905, :file "cljs/core.cljs"} comparator & ^{:end-column 26, :end-line 6905, :column 18, :line 6905, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 6905, :column 4, :line 6905, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 6905, :column 5, :line 6905, :file "cljs/core.cljs"} comparator ^{:end-column 18, :end-line 6905, :column 16, :line 6905, :file "cljs/core.cljs"} & ^{:end-column 26, :end-line 6905, :column 18, :line 6905, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.", :end-column 21, :end-line 6902, :column 7, :line 6902, :file "cljs/core.cljs"} sorted-map-by, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 172, :column 10, :line 172, :file "cljs/core.cljs"} apply ^{:arglists (^{:end-column 12, :end-line 2831, :column 4, :line 2831, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2831, :column 5, :line 2831, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2831, :column 7, :line 2831, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2839, :column 4, :line 2839, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2839, :column 5, :line 2839, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2839, :column 9, :line 2839, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2848, :column 4, :line 2848, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2848, :column 5, :line 2848, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2848, :column 7, :line 2848, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2848, :column 9, :line 2848, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2848, :column 11, :line 2848, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2857, :column 4, :line 2857, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2857, :column 5, :line 2857, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2857, :column 7, :line 2857, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2857, :column 9, :line 2857, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2857, :column 11, :line 2857, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2857, :column 13, :line 2857, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2866, :column 4, :line 2866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2866, :column 5, :line 2866, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2866, :column 7, :line 2866, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2866, :column 9, :line 2866, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2866, :column 11, :line 2866, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2866, :column 13, :line 2866, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2866, :column 15, :line 2866, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2866, :column 17, :line 2866, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 2831, :column 5, :line 2831, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2831, :column 7, :line 2831, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2839, :column 5, :line 2839, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2839, :column 9, :line 2839, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2848, :column 5, :line 2848, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2848, :column 7, :line 2848, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2848, :column 9, :line 2848, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2848, :column 11, :line 2848, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2857, :column 5, :line 2857, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2857, :column 7, :line 2857, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2857, :column 9, :line 2857, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2857, :column 11, :line 2857, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2857, :column 13, :line 2857, :file "cljs/core.cljs"} args] [^{:end-column 7, :end-line 2866, :column 5, :line 2866, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2866, :column 7, :line 2866, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2866, :column 9, :line 2866, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2866, :column 11, :line 2866, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2866, :column 13, :line 2866, :file "cljs/core.cljs"} d & ^{:end-column 22, :end-line 2866, :column 17, :line 2866, :file "cljs/core.cljs"} args]), :tag function, :op :var, :name ^{:arglists (^{:end-column 12, :end-line 2831, :column 4, :line 2831, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2831, :column 5, :line 2831, :file "cljs/core.cljs"} f ^{:end-column 12, :end-line 2831, :column 7, :line 2831, :file "cljs/core.cljs"} args] ^{:end-column 14, :end-line 2839, :column 4, :line 2839, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2839, :column 5, :line 2839, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2839, :column 7, :line 2839, :file "cljs/core.cljs"} x ^{:end-column 14, :end-line 2839, :column 9, :line 2839, :file "cljs/core.cljs"} args] ^{:end-column 16, :end-line 2848, :column 4, :line 2848, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2848, :column 5, :line 2848, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2848, :column 7, :line 2848, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2848, :column 9, :line 2848, :file "cljs/core.cljs"} y ^{:end-column 16, :end-line 2848, :column 11, :line 2848, :file "cljs/core.cljs"} args] ^{:end-column 18, :end-line 2857, :column 4, :line 2857, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2857, :column 5, :line 2857, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2857, :column 7, :line 2857, :file "cljs/core.cljs"} x ^{:end-column 11, :end-line 2857, :column 9, :line 2857, :file "cljs/core.cljs"} y ^{:end-column 13, :end-line 2857, :column 11, :line 2857, :file "cljs/core.cljs"} z ^{:end-column 18, :end-line 2857, :column 13, :line 2857, :file "cljs/core.cljs"} args] ^{:end-column 22, :end-line 2866, :column 4, :line 2866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 2866, :column 5, :line 2866, :file "cljs/core.cljs"} f ^{:end-column 9, :end-line 2866, :column 7, :line 2866, :file "cljs/core.cljs"} a ^{:end-column 11, :end-line 2866, :column 9, :line 2866, :file "cljs/core.cljs"} b ^{:end-column 13, :end-line 2866, :column 11, :line 2866, :file "cljs/core.cljs"} c ^{:end-column 15, :end-line 2866, :column 13, :line 2866, :file "cljs/core.cljs"} d ^{:end-column 17, :end-line 2866, :column 15, :line 2866, :file "cljs/core.cljs"} & ^{:end-column 22, :end-line 2866, :column 17, :line 2866, :file "cljs/core.cljs"} args]), :doc "Applies fn f to the argument list formed by prepending intervening arguments to args.\n  First cut.  Not lazy.  Needs to use emitted toApply.", :end-column 13, :end-line 2828, :column 7, :line 2828, :file "cljs/core.cljs"} apply, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 8459, :column 29, :line 8459, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8459, :column 8, :line 8459, :file "cljs/core.cljs"} get-global-hierarchy ^{:arglists (^{:end-column 31, :end-line 8459, :column 29, :line 8459, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8459, :column 8, :line 8459, :file "cljs/core.cljs"} {:arglists (^clj-nil []), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 8459, :column 29, :line 8459, :file "cljs/core.cljs"} []), :private true, :end-column 29, :end-line 8459, :column 8, :line 8459, :file "cljs/core.cljs"} get-global-hierarchy, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 35, :end-line 497, :column 32, :line 497, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 497, :column 33, :line 497, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} add-to-string-hash-cache ^{:arglists (^{:end-column 35, :end-line 497, :column 32, :line 497, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 497, :column 33, :line 497, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 35, :end-line 497, :column 33, :line 497, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 35, :end-line 497, :column 32, :line 497, :file "cljs/core.cljs"} [^{:end-column 35, :end-line 497, :column 33, :line 497, :file "cljs/core.cljs"} k]), :end-column 32, :end-line 497, :column 7, :line 497, :file "cljs/core.cljs"} add-to-string-hash-cache, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 18, :end-line 8325, :column 10, :line 8325, :file "cljs/core.cljs"} clj->js ^{:arglists (^{:end-column 7, :end-line 8341, :column 4, :line 8341, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8341, :column 5, :line 8341, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 8337, :column 7, :line 8337, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 8341, :column 5, :line 8341, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8341, :column 4, :line 8341, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8341, :column 5, :line 8341, :file "cljs/core.cljs"} x]), :doc "Recursively transforms ClojureScript values to JavaScript.\nsets/vectors/lists become Arrays, Keywords and Symbol become Strings,\nMaps become Objects. Arbitrary keys are encoded to by key->js.", :end-column 15, :end-line 8337, :column 7, :line 8337, :file "cljs/core.cljs"} clj->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 28, :end-line 5024, :column 10, :line 5024, :file "cljs/core.cljs"} TransientArrayMap {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 28, :end-line 5272, :column 10, :line 5272, :file "cljs/core.cljs"} TransientArrayMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 33, :end-line 5274, :column 28, :line 5272, :file "cljs/core.cljs"} [^{:mutable true, :end-column 49, :end-line 5272, :column 39, :line 5272, :file "cljs/core.cljs"} editable? ^{:mutable true, :end-column 43, :end-line 5273, :column 39, :line 5273, :file "cljs/core.cljs"} len ^{:end-column 33, :end-line 5274, :column 29, :line 5274, :file "cljs/core.cljs"} arr], :protocols #{cljs.core/ITransientMap cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientAssociative cljs.core/ILookup}}, ^{:arglists ([^{:mutable true, :end-column 41, :end-line 4504, :column 37, :line 4504, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4505, :column 37, :line 4505, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4506, :column 37, :line 4506, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4507, :column 37, :line 4507, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 4504, :column 10, :line 4504, :file "cljs/core.cljs"} ->TransientVector ^{:arglists ([^{:mutable true, :end-column 41, :end-line 4504, :column 37, :line 4504, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4505, :column 37, :line 4505, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4506, :column 37, :line 4506, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4507, :column 37, :line 4507, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 4504, :column 10, :line 4504, :file "cljs/core.cljs"} {:arglists (^cljs.core/TransientVector [^{:mutable true, :end-column 41, :end-line 4504, :column 37, :line 4504, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4505, :column 37, :line 4505, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4506, :column 37, :line 4506, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4507, :column 37, :line 4507, :file "cljs/core.cljs"} tail]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 41, :end-line 4504, :column 37, :line 4504, :file "cljs/core.cljs"} cnt ^{:mutable true, :end-column 43, :end-line 4505, :column 37, :line 4505, :file "cljs/core.cljs"} shift ^{:mutable true, :end-column 42, :end-line 4506, :column 37, :line 4506, :file "cljs/core.cljs"} root ^{:mutable true, :end-column 42, :end-line 4507, :column 37, :line 4507, :file "cljs/core.cljs"} tail]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :protocols #{cljs.core/IIndexed cljs.core/IFn cljs.core/ICounted cljs.core/ITransientCollection cljs.core/ITransientVector cljs.core/ITransientAssociative cljs.core/ILookup}, :end-column 26, :end-line 4504, :column 10, :line 4504, :file "cljs/core.cljs"} ->TransientVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 27, :end-line 379, :column 14, :line 379, :file "cljs/core.cljs"} IChunkedNext ^{:impls (cljs.core/ChunkedSeq cljs.core/ChunkedCons), :protocol-info {:methods {^{:end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 27, :end-line 379, :column 14, :line 379, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 18, :end-line 380, :column 4, :line 380, :file "cljs/core.cljs"} -chunked-next [^{:end-column 24, :end-line 380, :column 18, :line 380, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 380, :column 19, :line 380, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 27, :end-line 379, :column 14, :line 379, :file "cljs/core.cljs"} IChunkedNext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3711, :column 8, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3709, :column 7, :line 3709, :file "cljs/core.cljs"} interpose ^{:arglists (^{:end-column 13, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3711, :column 8, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3709, :column 7, :line 3709, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 8, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3711, :column 8, :line 3711, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 3711, :column 3, :line 3711, :file "cljs/core.cljs"} [^{:end-column 8, :end-line 3711, :column 4, :line 3711, :file "cljs/core.cljs"} sep ^{:end-column 13, :end-line 3711, :column 8, :line 3711, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy seq of the elements of coll separated by sep", :end-column 17, :end-line 3709, :column 7, :line 3709, :file "cljs/core.cljs"} interpose, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 25, :end-line 6367, :column 21, :line 6367, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6367, :column 25, :line 6367, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6367, :column 29, :line 6367, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6367, :column 34, :line 6367, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6367, :column 50, :line 6367, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 6367, :column 10, :line 6367, :file "cljs/core.cljs"} ->BlackNode ^{:arglists ([^{:end-column 25, :end-line 6367, :column 21, :line 6367, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6367, :column 25, :line 6367, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6367, :column 29, :line 6367, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6367, :column 34, :line 6367, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6367, :column 50, :line 6367, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 6367, :column 10, :line 6367, :file "cljs/core.cljs"} {:arglists (^cljs.core/BlackNode [^{:end-column 25, :end-line 6367, :column 21, :line 6367, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6367, :column 25, :line 6367, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6367, :column 29, :line 6367, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6367, :column 34, :line 6367, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6367, :column 50, :line 6367, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 25, :end-line 6367, :column 21, :line 6367, :file "cljs/core.cljs"} key ^{:end-column 29, :end-line 6367, :column 25, :line 6367, :file "cljs/core.cljs"} val ^{:end-column 34, :end-line 6367, :column 29, :line 6367, :file "cljs/core.cljs"} left ^{:end-column 40, :end-line 6367, :column 34, :line 6367, :file "cljs/core.cljs"} right ^{:mutable true, :end-column 57, :end-line 6367, :column 50, :line 6367, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 20, :end-line 6367, :column 10, :line 6367, :file "cljs/core.cljs"} ->BlackNode, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 16, :end-line 769, :column 10, :line 769, :file "cljs/core.cljs"} deref ^{:declared true, :end-column 79, :end-line 5353, :column 73, :line 5353, :file "cljs/core.cljs"} {:op :var, :name ^{:declared true, :end-column 79, :end-line 5353, :column 73, :line 5353, :file "cljs/core.cljs"} deref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 3924, :column 16, :line 3924, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3924, :column 17, :line 3924, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3924, :column 22, :line 3924, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3924, :column 8, :line 3924, :file "cljs/core.cljs"} pv-aget ^{:arglists (^{:end-column 26, :end-line 3924, :column 16, :line 3924, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3924, :column 17, :line 3924, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3924, :column 22, :line 3924, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3924, :column 8, :line 3924, :file "cljs/core.cljs"} {:arglists ([^{:end-column 22, :end-line 3924, :column 17, :line 3924, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3924, :column 22, :line 3924, :file "cljs/core.cljs"} idx]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 3924, :column 16, :line 3924, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 3924, :column 17, :line 3924, :file "cljs/core.cljs"} node ^{:end-column 26, :end-line 3924, :column 22, :line 3924, :file "cljs/core.cljs"} idx]), :private true, :end-column 16, :end-line 3924, :column 8, :line 3924, :file "cljs/core.cljs"} pv-aget, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 1228, :column 4, :line 1228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1228, :column 5, :line 1228, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1228, :column 10, :line 1228, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1228, :column 12, :line 1228, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1232, :column 10, :line 1232, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1232, :column 12, :line 1232, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1232, :column 14, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1223, :column 7, :line 1223, :file "cljs/core.cljs"} assoc ^{:arglists (^{:end-column 14, :end-line 1228, :column 4, :line 1228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1228, :column 5, :line 1228, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1228, :column 10, :line 1228, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1228, :column 12, :line 1228, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1232, :column 10, :line 1232, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1232, :column 12, :line 1232, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1232, :column 14, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1223, :column 7, :line 1223, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 1228, :column 5, :line 1228, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1228, :column 10, :line 1228, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1228, :column 12, :line 1228, :file "cljs/core.cljs"} v] [^{:end-column 10, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1232, :column 10, :line 1232, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1232, :column 12, :line 1232, :file "cljs/core.cljs"} v & ^{:end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} kvs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 1228, :column 4, :line 1228, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1228, :column 5, :line 1228, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1228, :column 10, :line 1228, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1228, :column 12, :line 1228, :file "cljs/core.cljs"} v] ^{:end-column 20, :end-line 1232, :column 4, :line 1232, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 1232, :column 5, :line 1232, :file "cljs/core.cljs"} coll ^{:end-column 12, :end-line 1232, :column 10, :line 1232, :file "cljs/core.cljs"} k ^{:end-column 14, :end-line 1232, :column 12, :line 1232, :file "cljs/core.cljs"} v ^{:end-column 16, :end-line 1232, :column 14, :line 1232, :file "cljs/core.cljs"} & ^{:end-column 20, :end-line 1232, :column 16, :line 1232, :file "cljs/core.cljs"} kvs]), :doc "assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.", :end-column 13, :end-line 1223, :column 7, :line 1223, :file "cljs/core.cljs"} assoc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 2759, :column 3, :line 2759, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2759, :column 4, :line 2759, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2757, :column 7, :line 2757, :file "cljs/core.cljs"} transient ^{:arglists (^{:end-column 9, :end-line 2759, :column 3, :line 2759, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2759, :column 4, :line 2759, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2757, :column 7, :line 2757, :file "cljs/core.cljs"} {:arglists (^^{:end-column 9, :end-line 350, :column 5, :line 350, :file "cljs/core.cljs"} clj [^{:end-column 9, :end-line 2759, :column 4, :line 2759, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 2759, :column 3, :line 2759, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2759, :column 4, :line 2759, :file "cljs/core.cljs"} coll]), :doc "Returns a new, transient version of the collection, in constant time.", :end-column 17, :end-line 2757, :column 7, :line 2757, :file "cljs/core.cljs"} transient, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -disjoin ^{:arglists (^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :tag function, :op :var, :name ^{:arglists (^{:end-column 26, :end-line 275, :column 18, :line 275, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 275, :column 19, :line 275, :file "cljs/core.cljs"} coll ^{:end-column 26, :end-line 275, :column 24, :line 275, :file "cljs/core.cljs"} v]), :protocol cljs.core/ISet, :tag ^{:end-column 9, :end-line 275, :column 5, :line 275, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 275, :column 9, :line 275, :file "cljs/core.cljs"} -disjoin, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2578, :column 18, :line 2578, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2578, :column 19, :line 2578, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2578, :column 25, :line 2578, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2578, :column 7, :line 2578, :file "cljs/core.cljs"} chunk-cons ^{:arglists (^{:end-column 30, :end-line 2578, :column 18, :line 2578, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2578, :column 19, :line 2578, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2578, :column 25, :line 2578, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2578, :column 7, :line 2578, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 2578, :column 19, :line 2578, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2578, :column 25, :line 2578, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2578, :column 18, :line 2578, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2578, :column 19, :line 2578, :file "cljs/core.cljs"} chunk ^{:end-column 30, :end-line 2578, :column 25, :line 2578, :file "cljs/core.cljs"} rest]), :end-column 18, :end-line 2578, :column 7, :line 2578, :file "cljs/core.cljs"} chunk-cons, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2923, :column 10, :line 2923, :file "cljs/core.cljs"} ArrayIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 2923, :column 10, :line 2923, :file "cljs/core.cljs"} ArrayIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 37, :end-line 2923, :column 20, :line 2923, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 2923, :column 21, :line 2923, :file "cljs/core.cljs"} arr ^{:mutable true, :end-column 37, :end-line 2923, :column 35, :line 2923, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 9, :end-line 8899, :column 3, :line 8899, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8899, :column 4, :line 8899, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8897, :column 7, :line 8897, :file "cljs/core.cljs"} comparator ^{:arglists (^{:end-column 9, :end-line 8899, :column 3, :line 8899, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8899, :column 4, :line 8899, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8897, :column 7, :line 8897, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 9, :end-line 8899, :column 4, :line 8899, :file "cljs/core.cljs"} pred]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 8899, :column 3, :line 8899, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 8899, :column 4, :line 8899, :file "cljs/core.cljs"} pred]), :doc "Returns an JavaScript compatible comparator based upon pred.", :end-column 18, :end-line 8897, :column 7, :line 8897, :file "cljs/core.cljs"} comparator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 15, :end-line 6896, :column 4, :line 6896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6896, :column 5, :line 6896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6896, :column 7, :line 6896, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6893, :column 7, :line 6893, :file "cljs/core.cljs"} sorted-map ^{:arglists (^{:end-column 15, :end-line 6896, :column 4, :line 6896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6896, :column 5, :line 6896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6896, :column 7, :line 6896, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6893, :column 7, :line 6893, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 15, :end-line 6896, :column 7, :line 6896, :file "cljs/core.cljs"} keyvals]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 6896, :column 4, :line 6896, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 6896, :column 5, :line 6896, :file "cljs/core.cljs"} & ^{:end-column 15, :end-line 6896, :column 7, :line 6896, :file "cljs/core.cljs"} keyvals]), :doc "keyval => key val\n  Returns a new sorted map with supplied mappings.", :end-column 18, :end-line 6893, :column 7, :line 6893, :file "cljs/core.cljs"} sorted-map, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3642, :column 4, :line 3642, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3642, :column 5, :line 3642, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3655, :column 4, :line 3655, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3655, :column 5, :line 3655, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3655, :column 10, :line 3655, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3638, :column 7, :line 3638, :file "cljs/core.cljs"} drop-while ^{:arglists (^{:end-column 10, :end-line 3642, :column 4, :line 3642, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3642, :column 5, :line 3642, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3655, :column 4, :line 3655, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3655, :column 5, :line 3655, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3655, :column 10, :line 3655, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3638, :column 7, :line 3638, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 10, :end-line 3642, :column 5, :line 3642, :file "cljs/core.cljs"} pred] ^cljs.core/LazySeq [^{:end-column 10, :end-line 3655, :column 5, :line 3655, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3655, :column 10, :line 3655, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3642, :column 4, :line 3642, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3642, :column 5, :line 3642, :file "cljs/core.cljs"} pred] ^{:end-column 15, :end-line 3655, :column 4, :line 3655, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3655, :column 5, :line 3655, :file "cljs/core.cljs"} pred ^{:end-column 15, :end-line 3655, :column 10, :line 3655, :file "cljs/core.cljs"} coll]), :doc "Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.", :end-column 18, :end-line 3638, :column 7, :line 3638, :file "cljs/core.cljs"} drop-while, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]], ^{:end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 22, :end-line 329, :column 14, :line 329, :file "cljs/core.cljs"} IWriter ^{:impls (cljs.core/StringBufferWriter), :protocol-info {:methods {^{:end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]], ^{:end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 22, :end-line 329, :column 14, :line 329, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 11, :end-line 330, :column 4, :line 330, :file "cljs/core.cljs"} -write [^{:end-column 21, :end-line 330, :column 11, :line 330, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 330, :column 12, :line 330, :file "cljs/core.cljs"} writer ^{:end-column 21, :end-line 330, :column 19, :line 330, :file "cljs/core.cljs"} s]], ^{:end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} -flush [^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]]}}, :protocol-symbol true, :end-column 22, :end-line 329, :column 14, :line 329, :file "cljs/core.cljs"} IWriter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6912, :column 10, :line 6912, :file "cljs/core.cljs"} KeySeq {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 17, :end-line 6912, :column 10, :line 6912, :file "cljs/core.cljs"} KeySeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 41, :end-line 6912, :column 17, :line 6912, :file "cljs/core.cljs"} [^{:tag ^{:end-column 30, :end-line 6912, :column 19, :line 6912, :file "cljs/core.cljs"} not-native, :end-column 35, :end-line 6912, :column 30, :line 6912, :file "cljs/core.cljs"} mseq ^{:end-column 41, :end-line 6912, :column 35, :line 6912, :file "cljs/core.cljs"} _meta], :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 6, :end-line 8247, :column 3, :line 8247, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8245, :column 8, :line 8245, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8245, :column 16, :line 8245, :file "cljs/core.cljs"} realized? ^{:arglists (^{:end-column 6, :end-line 8247, :column 3, :line 8247, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8245, :column 8, :line 8245, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8245, :column 16, :line 8245, :file "cljs/core.cljs"} {:arglists (^^{:end-column 13, :end-line 342, :column 5, :line 342, :file "cljs/core.cljs"} boolean [^{:end-column 6, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} d]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 8247, :column 3, :line 8247, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8247, :column 4, :line 8247, :file "cljs/core.cljs"} d]), :doc "Returns true if a value has been produced for a promise, delay, future or lazy sequence.", :tag ^{:end-column 16, :end-line 8245, :column 8, :line 8245, :file "cljs/core.cljs"} boolean, :end-column 26, :end-line 8245, :column 16, :line 8245, :file "cljs/core.cljs"} realized?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 45, :end-line 4959, :column 36, :line 4959, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4959, :column 37, :line 4959, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4959, :column 41, :line 4959, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4959, :column 43, :line 4959, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4959, :column 8, :line 4959, :file "cljs/core.cljs"} array-map-index-of-keyword? ^{:arglists (^{:end-column 45, :end-line 4959, :column 36, :line 4959, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4959, :column 37, :line 4959, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4959, :column 41, :line 4959, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4959, :column 43, :line 4959, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4959, :column 8, :line 4959, :file "cljs/core.cljs"} {:arglists ([^{:end-column 41, :end-line 4959, :column 37, :line 4959, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4959, :column 41, :line 4959, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4959, :column 43, :line 4959, :file "cljs/core.cljs"} k]), :tag function, :op :var, :name ^{:arglists (^{:end-column 45, :end-line 4959, :column 36, :line 4959, :file "cljs/core.cljs"} [^{:end-column 41, :end-line 4959, :column 37, :line 4959, :file "cljs/core.cljs"} arr ^{:end-column 43, :end-line 4959, :column 41, :line 4959, :file "cljs/core.cljs"} m ^{:end-column 45, :end-line 4959, :column 43, :line 4959, :file "cljs/core.cljs"} k]), :private true, :end-column 36, :end-line 4959, :column 8, :line 4959, :file "cljs/core.cljs"} array-map-index-of-keyword?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn* ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} {:arglists (^ignore [^{:end-column 10, :end-line 25, :column 8, :line 25, :file "cljs/core.cljs"} _]), :tag function, :op :var, :name ^{:dynamic true, :doc "Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.", :end-column 76, :end-line 26, :column 1, :line 20, :file "cljs/core.cljs"} *print-fn*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 32, :end-line 479, :column 24, :line 479, :file "cljs/core.cljs"} compare ^{:arglists (^{:end-column 8, :end-line 1527, :column 3, :line 1527, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1527, :column 6, :line 1527, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1522, :column 8, :line 1522, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1522, :column 15, :line 1522, :file "cljs/core.cljs"} {:arglists ([^{:end-column 6, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1527, :column 6, :line 1527, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 1527, :column 3, :line 1527, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1527, :column 4, :line 1527, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 1527, :column 6, :line 1527, :file "cljs/core.cljs"} y]), :doc "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.", :tag ^{:end-column 15, :end-line 1522, :column 8, :line 1522, :file "cljs/core.cljs"} number, :end-column 23, :end-line 1522, :column 15, :line 1522, :file "cljs/core.cljs"} compare, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3176, :column 3, :line 3176, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3173, :column 8, :line 3173, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3173, :column 16, :line 3173, :file "cljs/core.cljs"} complement ^{:arglists (^{:end-column 6, :end-line 3176, :column 3, :line 3176, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3173, :column 8, :line 3173, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3173, :column 16, :line 3173, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} f]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3176, :column 3, :line 3176, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3176, :column 4, :line 3176, :file "cljs/core.cljs"} f]), :doc "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.", :tag ^{:end-column 16, :end-line 3173, :column 8, :line 3173, :file "cljs/core.cljs"} boolean, :end-column 27, :end-line 3173, :column 16, :line 3173, :file "cljs/core.cljs"} complement, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:private true, :end-column 41, :end-line 1438, :column 1, :line 1438, :file "cljs/core.cljs"} lookup-sentinel ^{:private true, :end-column 41, :end-line 1438, :column 1, :line 1438, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:private true, :end-column 41, :end-line 1438, :column 1, :line 1438, :file "cljs/core.cljs"} lookup-sentinel, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} -assoc! ^{:arglists (^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 32, :end-line 357, :column 17, :line 357, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 357, :column 18, :line 357, :file "cljs/core.cljs"} tcoll ^{:end-column 28, :end-line 357, :column 24, :line 357, :file "cljs/core.cljs"} key ^{:end-column 32, :end-line 357, :column 28, :line 357, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientAssociative, :tag ^{:end-column 9, :end-line 357, :column 5, :line 357, :file "cljs/core.cljs"} clj, :end-column 17, :end-line 357, :column 9, :line 357, :file "cljs/core.cljs"} -assoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup* ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:dynamic true, :end-column 34, :end-line 36, :column 1, :line 36, :file "cljs/core.cljs"} *print-dup*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 22, :end-line 2920, :column 19, :line 2920, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2920, :column 20, :line 2920, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2920, :column 7, :line 2920, :file "cljs/core.cljs"} string-iter ^{:arglists (^{:end-column 22, :end-line 2920, :column 19, :line 2920, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2920, :column 20, :line 2920, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2920, :column 7, :line 2920, :file "cljs/core.cljs"} {:arglists (^cljs.core/StringIter [^{:end-column 22, :end-line 2920, :column 20, :line 2920, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 22, :end-line 2920, :column 19, :line 2920, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 2920, :column 20, :line 2920, :file "cljs/core.cljs"} x]), :end-column 19, :end-line 2920, :column 7, :line 2920, :file "cljs/core.cljs"} string-iter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} -key->js ^{:arglists (^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 8322, :column 13, :line 8322, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 8322, :column 14, :line 8322, :file "cljs/core.cljs"} x]), :protocol cljs.core/IEncodeJS, :end-column 13, :end-line 8322, :column 4, :line 8322, :file "cljs/core.cljs"} -key->js, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 21, :end-line 284, :column 14, :line 284, :file "cljs/core.cljs"} IDeref ^{:impls (cljs.core/Delay cljs.core/Atom cljs.core/Reduced), :protocol-info {:methods {^{:end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 21, :end-line 284, :column 14, :line 284, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:end-column 10, :end-line 285, :column 3, :line 285, :file "cljs/core.cljs"} -deref [^{:end-column 13, :end-line 285, :column 10, :line 285, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 285, :column 11, :line 285, :file "cljs/core.cljs"} o]]}}, :protocol-symbol true, :end-column 21, :end-line 284, :column 14, :line 284, :file "cljs/core.cljs"} IDeref, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1517, :column 3, :line 1517, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1517, :column 4, :line 1517, :file "cljs/core.cljs"} coll]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()", :tag ^{:end-column 12, :end-line 1514, :column 8, :line 1514, :file "cljs/core.cljs"} seq, :end-column 21, :end-line 1514, :column 12, :line 1514, :file "cljs/core.cljs"} sequence ^{:arglists (^{:end-column 10, :end-line 3126, :column 4, :line 3126, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3126, :column 5, :line 3126, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3130, :column 4, :line 3130, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3130, :column 5, :line 3130, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3130, :column 11, :line 3130, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3132, :column 4, :line 3132, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3132, :column 5, :line 3132, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3132, :column 11, :line 3132, :file "cljs/core.cljs"} coll ^{:end-column 18, :end-line 3132, :column 16, :line 3132, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3132, :column 18, :line 3132, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 16, :end-line 3117, :column 7, :line 3117, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 3126, :column 5, :line 3126, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 3130, :column 5, :line 3130, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3130, :column 11, :line 3130, :file "cljs/core.cljs"} coll] [^{:end-column 11, :end-line 3132, :column 5, :line 3132, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3132, :column 11, :line 3132, :file "cljs/core.cljs"} coll & ^{:end-column 24, :end-line 3132, :column 18, :line 3132, :file "cljs/core.cljs"} colls]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3126, :column 4, :line 3126, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 3126, :column 5, :line 3126, :file "cljs/core.cljs"} coll] ^{:end-column 16, :end-line 3130, :column 4, :line 3130, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3130, :column 5, :line 3130, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3130, :column 11, :line 3130, :file "cljs/core.cljs"} coll] ^{:end-column 24, :end-line 3132, :column 4, :line 3132, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 3132, :column 5, :line 3132, :file "cljs/core.cljs"} xform ^{:end-column 16, :end-line 3132, :column 11, :line 3132, :file "cljs/core.cljs"} coll ^{:end-column 18, :end-line 3132, :column 16, :line 3132, :file "cljs/core.cljs"} & ^{:end-column 24, :end-line 3132, :column 18, :line 3132, :file "cljs/core.cljs"} colls]), :doc "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments", :end-column 16, :end-line 3117, :column 7, :line 3117, :file "cljs/core.cljs"} sequence, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 3185, :column 3, :line 3185, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3185, :column 4, :line 3185, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} constantly ^{:arglists (^{:end-column 6, :end-line 3185, :column 3, :line 3185, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3185, :column 4, :line 3185, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 6, :end-line 3185, :column 4, :line 3185, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 3185, :column 3, :line 3185, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 3185, :column 4, :line 3185, :file "cljs/core.cljs"} x]), :doc "Returns a function that takes any number of arguments and returns x.", :end-column 18, :end-line 3183, :column 7, :line 3183, :file "cljs/core.cljs"} constantly, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:mutable true, :end-column 38, :end-line 4016, :column 36, :line 4016, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 53, :end-line 4016, :column 48, :line 4016, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 67, :end-line 4016, :column 63, :line 4016, :file "cljs/core.cljs"} arr ^{:end-column 69, :end-line 4016, :column 67, :line 4016, :file "cljs/core.cljs"} v ^{:end-column 75, :end-line 4016, :column 69, :line 4016, :file "cljs/core.cljs"} start ^{:end-column 79, :end-line 4016, :column 75, :line 4016, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 25, :end-line 4016, :column 10, :line 4016, :file "cljs/core.cljs"} ->RangedIterator ^{:arglists ([^{:mutable true, :end-column 38, :end-line 4016, :column 36, :line 4016, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 53, :end-line 4016, :column 48, :line 4016, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 67, :end-line 4016, :column 63, :line 4016, :file "cljs/core.cljs"} arr ^{:end-column 69, :end-line 4016, :column 67, :line 4016, :file "cljs/core.cljs"} v ^{:end-column 75, :end-line 4016, :column 69, :line 4016, :file "cljs/core.cljs"} start ^{:end-column 79, :end-line 4016, :column 75, :line 4016, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 25, :end-line 4016, :column 10, :line 4016, :file "cljs/core.cljs"} {:arglists (^cljs.core/RangedIterator [^{:mutable true, :end-column 38, :end-line 4016, :column 36, :line 4016, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 53, :end-line 4016, :column 48, :line 4016, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 67, :end-line 4016, :column 63, :line 4016, :file "cljs/core.cljs"} arr ^{:end-column 69, :end-line 4016, :column 67, :line 4016, :file "cljs/core.cljs"} v ^{:end-column 75, :end-line 4016, :column 69, :line 4016, :file "cljs/core.cljs"} start ^{:end-column 79, :end-line 4016, :column 75, :line 4016, :file "cljs/core.cljs"} end]), :tag function, :op :var, :name ^{:arglists ([^{:mutable true, :end-column 38, :end-line 4016, :column 36, :line 4016, :file "cljs/core.cljs"} i ^{:mutable true, :end-column 53, :end-line 4016, :column 48, :line 4016, :file "cljs/core.cljs"} base ^{:mutable true, :end-column 67, :end-line 4016, :column 63, :line 4016, :file "cljs/core.cljs"} arr ^{:end-column 69, :end-line 4016, :column 67, :line 4016, :file "cljs/core.cljs"} v ^{:end-column 75, :end-line 4016, :column 69, :line 4016, :file "cljs/core.cljs"} start ^{:end-column 79, :end-line 4016, :column 75, :line 4016, :file "cljs/core.cljs"} end]), :factory :positional, :skip-protocol-flag nil, :protocols #{Object}, :end-column 25, :end-line 4016, :column 10, :line 4016, :file "cljs/core.cljs"} ->RangedIterator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 53, :end-line 4036, :column 41, :line 4036, :file "cljs/core.cljs"} chunked-seq ^{:arglists (^{:end-column 15, :end-line 4326, :column 4, :line 4326, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4326, :column 5, :line 4326, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4326, :column 9, :line 4326, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4326, :column 11, :line 4326, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4327, :column 4, :line 4327, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4327, :column 5, :line 4327, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4327, :column 9, :line 4327, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4327, :column 14, :line 4327, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4327, :column 16, :line 4327, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4328, :column 4, :line 4328, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4328, :column 5, :line 4328, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4328, :column 9, :line 4328, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4328, :column 14, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4328, :column 16, :line 4328, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4328, :column 20, :line 4328, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 4325, :column 7, :line 4325, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4326, :column 5, :line 4326, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4326, :column 9, :line 4326, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4326, :column 11, :line 4326, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4327, :column 5, :line 4327, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4327, :column 9, :line 4327, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4327, :column 14, :line 4327, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4327, :column 16, :line 4327, :file "cljs/core.cljs"} off] ^cljs.core/ChunkedSeq [^{:end-column 9, :end-line 4328, :column 5, :line 4328, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4328, :column 9, :line 4328, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4328, :column 14, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4328, :column 16, :line 4328, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4328, :column 20, :line 4328, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 4326, :column 4, :line 4326, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4326, :column 5, :line 4326, :file "cljs/core.cljs"} vec ^{:end-column 11, :end-line 4326, :column 9, :line 4326, :file "cljs/core.cljs"} i ^{:end-column 15, :end-line 4326, :column 11, :line 4326, :file "cljs/core.cljs"} off] ^{:end-column 20, :end-line 4327, :column 4, :line 4327, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4327, :column 5, :line 4327, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4327, :column 9, :line 4327, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4327, :column 14, :line 4327, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4327, :column 16, :line 4327, :file "cljs/core.cljs"} off] ^{:end-column 25, :end-line 4328, :column 4, :line 4328, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 4328, :column 5, :line 4328, :file "cljs/core.cljs"} vec ^{:end-column 14, :end-line 4328, :column 9, :line 4328, :file "cljs/core.cljs"} node ^{:end-column 16, :end-line 4328, :column 14, :line 4328, :file "cljs/core.cljs"} i ^{:end-column 20, :end-line 4328, :column 16, :line 4328, :file "cljs/core.cljs"} off ^{:end-column 25, :end-line 4328, :column 20, :line 4328, :file "cljs/core.cljs"} meta]), :end-column 19, :end-line 4325, :column 7, :line 4325, :file "cljs/core.cljs"} chunked-seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]], ^{:end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]], ^{:end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 323, :column 14, :line 323, :file "cljs/core.cljs"} ISorted ^{:impls (cljs.core/PersistentTreeSet cljs.core/PersistentTreeMap), :protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]], ^{:end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]], ^{:end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 323, :column 14, :line 323, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {^{:tag ^{:end-column 9, :end-line 324, :column 5, :line 324, :file "cljs/core.cljs"} clj, :end-column 21, :end-line 324, :column 9, :line 324, :file "cljs/core.cljs"} -sorted-seq [^{:end-column 38, :end-line 324, :column 21, :line 324, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 324, :column 22, :line 324, :file "cljs/core.cljs"} coll ^{:end-column 38, :end-line 324, :column 27, :line 324, :file "cljs/core.cljs"} ascending?]], ^{:tag ^{:end-column 9, :end-line 325, :column 5, :line 325, :file "cljs/core.cljs"} clj, :end-column 26, :end-line 325, :column 9, :line 325, :file "cljs/core.cljs"} -sorted-seq-from [^{:end-column 45, :end-line 325, :column 26, :line 325, :file "cljs/core.cljs"} [^{:end-column 32, :end-line 325, :column 27, :line 325, :file "cljs/core.cljs"} coll ^{:end-column 34, :end-line 325, :column 32, :line 325, :file "cljs/core.cljs"} k ^{:end-column 45, :end-line 325, :column 34, :line 325, :file "cljs/core.cljs"} ascending?]], ^{:end-column 15, :end-line 326, :column 4, :line 326, :file "cljs/core.cljs"} -entry-key [^{:end-column 27, :end-line 326, :column 15, :line 326, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 326, :column 16, :line 326, :file "cljs/core.cljs"} coll ^{:end-column 27, :end-line 326, :column 21, :line 326, :file "cljs/core.cljs"} entry]], ^{:end-column 16, :end-line 327, :column 4, :line 327, :file "cljs/core.cljs"} -comparator [^{:end-column 22, :end-line 327, :column 16, :line 327, :file "cljs/core.cljs"} [^{:end-column 22, :end-line 327, :column 17, :line 327, :file "cljs/core.cljs"} coll]]}}, :protocol-symbol true, :end-column 22, :end-line 323, :column 14, :line 323, :file "cljs/core.cljs"} ISorted, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} make-array ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} {:arglists (^array [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^array [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 152, :column 4, :line 152, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 152, :column 5, :line 152, :file "cljs/core.cljs"} size] ^{:end-column 15, :end-line 154, :column 4, :line 154, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 154, :column 5, :line 154, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 154, :column 10, :line 154, :file "cljs/core.cljs"} size]), :tag ^{:end-column 14, :end-line 151, :column 8, :line 151, :file "cljs/core.cljs"} array, :end-column 25, :end-line 151, :column 14, :line 151, :file "cljs/core.cljs"} make-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 17, :end-line 1922, :column 14, :line 1922, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1922, :column 7, :line 1922, :file "cljs/core.cljs"} shorts ^{:arglists (^{:end-column 17, :end-line 1922, :column 14, :line 1922, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1922, :column 7, :line 1922, :file "cljs/core.cljs"} {:arglists ([^{:end-column 17, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 17, :end-line 1922, :column 14, :line 1922, :file "cljs/core.cljs"} [^{:end-column 17, :end-line 1922, :column 15, :line 1922, :file "cljs/core.cljs"} x]), :end-column 14, :end-line 1922, :column 7, :line 1922, :file "cljs/core.cljs"} shorts, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if* ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} {:tag boolean, :op :var, :name ^{:end-column 27, :end-line 18, :column 1, :line 18, :file "cljs/core.cljs"} *unchecked-if*, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 19, :end-line 957, :column 16, :line 957, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 957, :column 19, :line 957, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 957, :column 21, :line 957, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 957, :column 10, :line 957, :file "cljs/core.cljs"} ->RSeq ^{:arglists ([^{:end-column 19, :end-line 957, :column 16, :line 957, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 957, :column 19, :line 957, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 957, :column 21, :line 957, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 957, :column 10, :line 957, :file "cljs/core.cljs"} {:arglists (^cljs.core/RSeq [^{:end-column 19, :end-line 957, :column 16, :line 957, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 957, :column 19, :line 957, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 957, :column 21, :line 957, :file "cljs/core.cljs"} meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 19, :end-line 957, :column 16, :line 957, :file "cljs/core.cljs"} ci ^{:end-column 21, :end-line 957, :column 19, :line 957, :file "cljs/core.cljs"} i ^{:end-column 26, :end-line 957, :column 21, :line 957, :file "cljs/core.cljs"} meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 957, :column 10, :line 957, :file "cljs/core.cljs"} ->RSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print! ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} {:arglists (^function []), :tag function, :op :var, :name ^{:arglists (^{:end-column 5, :end-line 51, :column 3, :line 51, :file "cljs/core.cljs"} []), :doc "Set *print-fn* to console.log", :end-column 29, :end-line 49, :column 7, :line 49, :file "cljs/core.cljs"} enable-console-print!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} -flush ^{:arglists (^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} {:arglists ([^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]), :tag function, :op :var, :name ^{:arglists (^{:end-column 19, :end-line 331, :column 11, :line 331, :file "cljs/core.cljs"} [^{:end-column 19, :end-line 331, :column 12, :line 331, :file "cljs/core.cljs"} writer]), :protocol cljs.core/IWriter, :end-column 11, :end-line 331, :column 4, :line 331, :file "cljs/core.cljs"} -flush, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 1680, :column 4, :line 1680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1680, :column 5, :line 1680, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1681, :column 7, :line 1681, :file "cljs/core.cljs"} cf]), :end-column 18, :end-line 1679, :column 7, :line 1679, :file "cljs/core.cljs"} completing ^{:arglists (^{:end-column 7, :end-line 1680, :column 4, :line 1680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1680, :column 5, :line 1680, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1681, :column 7, :line 1681, :file "cljs/core.cljs"} cf]), :end-column 18, :end-line 1679, :column 7, :line 1679, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 1680, :column 5, :line 1680, :file "cljs/core.cljs"} f] ^function [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1681, :column 7, :line 1681, :file "cljs/core.cljs"} cf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 1680, :column 4, :line 1680, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1680, :column 5, :line 1680, :file "cljs/core.cljs"} f] ^{:end-column 10, :end-line 1681, :column 4, :line 1681, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 1681, :column 5, :line 1681, :file "cljs/core.cljs"} f ^{:end-column 10, :end-line 1681, :column 7, :line 1681, :file "cljs/core.cljs"} cf]), :end-column 18, :end-line 1679, :column 7, :line 1679, :file "cljs/core.cljs"} completing, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 31, :end-line 1872, :column 28, :line 1872, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1872, :column 29, :line 1872, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1872, :column 7, :line 1872, :file "cljs/core.cljs"} unchecked-negate-int ^{:arglists (^{:end-column 31, :end-line 1872, :column 28, :line 1872, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1872, :column 29, :line 1872, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1872, :column 7, :line 1872, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 31, :end-line 1872, :column 29, :line 1872, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 31, :end-line 1872, :column 28, :line 1872, :file "cljs/core.cljs"} [^{:end-column 31, :end-line 1872, :column 29, :line 1872, :file "cljs/core.cljs"} x]), :end-column 28, :end-line 1872, :column 7, :line 1872, :file "cljs/core.cljs"} unchecked-negate-int, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 33, :end-line 4038, :column 28, :line 4038, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4038, :column 33, :line 4038, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4038, :column 37, :line 4038, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 4038, :column 43, :line 4038, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 4038, :column 48, :line 4038, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 4038, :column 63, :line 4038, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 4038, :column 10, :line 4038, :file "cljs/core.cljs"} ->PersistentVector ^{:arglists ([^{:end-column 33, :end-line 4038, :column 28, :line 4038, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4038, :column 33, :line 4038, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4038, :column 37, :line 4038, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 4038, :column 43, :line 4038, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 4038, :column 48, :line 4038, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 4038, :column 63, :line 4038, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 4038, :column 10, :line 4038, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentVector [^{:end-column 33, :end-line 4038, :column 28, :line 4038, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4038, :column 33, :line 4038, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4038, :column 37, :line 4038, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 4038, :column 43, :line 4038, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 4038, :column 48, :line 4038, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 4038, :column 63, :line 4038, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 33, :end-line 4038, :column 28, :line 4038, :file "cljs/core.cljs"} meta ^{:end-column 37, :end-line 4038, :column 33, :line 4038, :file "cljs/core.cljs"} cnt ^{:end-column 43, :end-line 4038, :column 37, :line 4038, :file "cljs/core.cljs"} shift ^{:end-column 48, :end-line 4038, :column 43, :line 4038, :file "cljs/core.cljs"} root ^{:end-column 53, :end-line 4038, :column 48, :line 4038, :file "cljs/core.cljs"} tail ^{:mutable true, :end-column 70, :end-line 4038, :column 63, :line 4038, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :protocols #{Object cljs.core/IIndexed cljs.core/IVector cljs.core/IReversible cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/IMapEntry cljs.core/IIterable cljs.core/ISequential cljs.core/IWithMeta cljs.core/IAssociative cljs.core/ILookup cljs.core/IReduce}, :end-column 27, :end-line 4038, :column 10, :line 4038, :file "cljs/core.cljs"} ->PersistentVector, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 41, :end-line 732, :column 24, :line 732, :file "cljs/core.cljs"} equiv-sequential ^{:arglists (^{:end-column 8, :end-line 2083, :column 3, :line 2083, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2083, :column 4, :line 2083, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2083, :column 6, :line 2083, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 2080, :column 8, :line 2080, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 2083, :column 4, :line 2083, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2083, :column 6, :line 2083, :file "cljs/core.cljs"} y]), :tag function, :op :var, :name ^{:arglists (^{:end-column 8, :end-line 2083, :column 3, :line 2083, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 2083, :column 4, :line 2083, :file "cljs/core.cljs"} x ^{:end-column 8, :end-line 2083, :column 6, :line 2083, :file "cljs/core.cljs"} y]), :doc "Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.", :private true, :end-column 25, :end-line 2080, :column 8, :line 2080, :file "cljs/core.cljs"} equiv-sequential, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 725, :column 3, :line 725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 725, :column 4, :line 725, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 719, :column 8, :line 719, :file "cljs/core.cljs"} number, :end-column 35, :end-line 719, :column 15, :line 719, :file "cljs/core.cljs"} hash-unordered-coll ^{:arglists (^{:end-column 9, :end-line 725, :column 3, :line 725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 725, :column 4, :line 725, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 719, :column 8, :line 719, :file "cljs/core.cljs"} number, :end-column 35, :end-line 719, :column 15, :line 719, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 9, :end-line 725, :column 4, :line 725, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 725, :column 3, :line 725, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 725, :column 4, :line 725, :file "cljs/core.cljs"} coll]), :doc "Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms.", :tag ^{:end-column 15, :end-line 719, :column 8, :line 719, :file "cljs/core.cljs"} number, :end-column 35, :end-line 719, :column 15, :line 719, :file "cljs/core.cljs"} hash-unordered-coll, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 3676, :column 4, :line 3676, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3676, :column 5, :line 3676, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3677, :column 4, :line 3677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3677, :column 5, :line 3677, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3677, :column 7, :line 3677, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} repeat ^{:arglists (^{:end-column 7, :end-line 3676, :column 4, :line 3676, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3676, :column 5, :line 3676, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3677, :column 4, :line 3677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3677, :column 5, :line 3677, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3677, :column 7, :line 3677, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} {:arglists (^cljs.core/LazySeq [^{:end-column 7, :end-line 3676, :column 5, :line 3676, :file "cljs/core.cljs"} x] ^cljs.core/LazySeq [^{:end-column 7, :end-line 3677, :column 5, :line 3677, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3677, :column 7, :line 3677, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 3676, :column 4, :line 3676, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3676, :column 5, :line 3676, :file "cljs/core.cljs"} x] ^{:end-column 9, :end-line 3677, :column 4, :line 3677, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3677, :column 5, :line 3677, :file "cljs/core.cljs"} n ^{:end-column 9, :end-line 3677, :column 7, :line 3677, :file "cljs/core.cljs"} x]), :doc "Returns a lazy (infinite!, or length n if supplied) sequence of xs.", :end-column 14, :end-line 3674, :column 7, :line 3674, :file "cljs/core.cljs"} repeat, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 1849, :column 21, :line 1849, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1849, :column 22, :line 1849, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1849, :column 7, :line 1849, :file "cljs/core.cljs"} unchecked-inc ^{:arglists (^{:end-column 24, :end-line 1849, :column 21, :line 1849, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1849, :column 22, :line 1849, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1849, :column 7, :line 1849, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 24, :end-line 1849, :column 22, :line 1849, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 1849, :column 21, :line 1849, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 1849, :column 22, :line 1849, :file "cljs/core.cljs"} x]), :end-column 21, :end-line 1849, :column 7, :line 1849, :file "cljs/core.cljs"} unchecked-inc, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 11, :end-line 2050, :column 3, :line 2050, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2050, :column 9, :line 2050, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2048, :column 7, :line 2048, :file "cljs/core.cljs"} nthnext ^{:arglists (^{:end-column 11, :end-line 2050, :column 3, :line 2050, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2050, :column 9, :line 2050, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2048, :column 7, :line 2048, :file "cljs/core.cljs"} {:arglists (^^{:end-column 12, :end-line 620, :column 8, :line 620, :file "cljs/core.cljs"} seq [^{:end-column 9, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2050, :column 9, :line 2050, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 2050, :column 3, :line 2050, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 2050, :column 4, :line 2050, :file "cljs/core.cljs"} coll ^{:end-column 11, :end-line 2050, :column 9, :line 2050, :file "cljs/core.cljs"} n]), :doc "Returns the nth next of coll, (seq coll) when n is 0.", :end-column 15, :end-line 2048, :column 7, :line 2048, :file "cljs/core.cljs"} nthnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 7, :end-line 8251, :column 3, :line 8251, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8251, :column 4, :line 8251, :file "cljs/core.cljs"} rf]), :private true, :end-column 27, :end-line 8250, :column 8, :line 8250, :file "cljs/core.cljs"} preserving-reduced ^{:arglists (^{:end-column 7, :end-line 8251, :column 3, :line 8251, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8251, :column 4, :line 8251, :file "cljs/core.cljs"} rf]), :private true, :end-column 27, :end-line 8250, :column 8, :line 8250, :file "cljs/core.cljs"} {:arglists (^function [^{:end-column 7, :end-line 8251, :column 4, :line 8251, :file "cljs/core.cljs"} rf]), :tag function, :op :var, :name ^{:arglists (^{:end-column 7, :end-line 8251, :column 3, :line 8251, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 8251, :column 4, :line 8251, :file "cljs/core.cljs"} rf]), :private true, :end-column 27, :end-line 8250, :column 8, :line 8250, :file "cljs/core.cljs"} preserving-reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 3412, :column 3, :line 3412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3412, :column 4, :line 3412, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3410, :column 7, :line 3410, :file "cljs/core.cljs"} get-validator ^{:arglists (^{:end-column 9, :end-line 3412, :column 3, :line 3412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3412, :column 4, :line 3412, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3410, :column 7, :line 3410, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 3412, :column 4, :line 3412, :file "cljs/core.cljs"} iref]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 3412, :column 3, :line 3412, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3412, :column 4, :line 3412, :file "cljs/core.cljs"} iref]), :doc "Gets the validator-fn for a var/ref/agent/atom.", :end-column 21, :end-line 3410, :column 7, :line 3410, :file "cljs/core.cljs"} get-validator, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2911, :column 10, :line 2911, :file "cljs/core.cljs"} StringIter {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 21, :end-line 2911, :column 10, :line 2911, :file "cljs/core.cljs"} StringIter, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 36, :end-line 2911, :column 21, :line 2911, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 2911, :column 22, :line 2911, :file "cljs/core.cljs"} s ^{:mutable true, :end-column 36, :end-line 2911, :column 34, :line 2911, :file "cljs/core.cljs"} i], :protocols #{Object}}, ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number? ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 91, :column 24, :line 91, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 91, :column 25, :line 91, :file "cljs/core.cljs"} n]), :tag ^{:end-column 16, :end-line 91, :column 8, :line 91, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 91, :column 16, :line 91, :file "cljs/core.cljs"} number?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -conj! ^{:arglists (^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} {:arglists ([^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 353, :column 16, :line 353, :file "cljs/core.cljs"} [^{:end-column 23, :end-line 353, :column 17, :line 353, :file "cljs/core.cljs"} tcoll ^{:end-column 27, :end-line 353, :column 23, :line 353, :file "cljs/core.cljs"} val]), :protocol cljs.core/ITransientCollection, :tag ^{:end-column 9, :end-line 353, :column 5, :line 353, :file "cljs/core.cljs"} clj, :end-column 16, :end-line 353, :column 9, :line 353, :file "cljs/core.cljs"} -conj!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 37, :end-line 5026, :column 33, :line 5026, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5026, :column 37, :line 5026, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5026, :column 39, :line 5026, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 5026, :column 10, :line 5026, :file "cljs/core.cljs"} ->PersistentArrayMapSeq ^{:arglists ([^{:end-column 37, :end-line 5026, :column 33, :line 5026, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5026, :column 37, :line 5026, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5026, :column 39, :line 5026, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 5026, :column 10, :line 5026, :file "cljs/core.cljs"} {:arglists (^cljs.core/PersistentArrayMapSeq [^{:end-column 37, :end-line 5026, :column 33, :line 5026, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5026, :column 37, :line 5026, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5026, :column 39, :line 5026, :file "cljs/core.cljs"} _meta]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 37, :end-line 5026, :column 33, :line 5026, :file "cljs/core.cljs"} arr ^{:end-column 39, :end-line 5026, :column 37, :line 5026, :file "cljs/core.cljs"} i ^{:end-column 45, :end-line 5026, :column 39, :line 5026, :file "cljs/core.cljs"} _meta]), :factory :positional, :skip-protocol-flag #{cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 32, :end-line 5026, :column 10, :line 5026, :file "cljs/core.cljs"} ->PersistentArrayMapSeq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 21, :end-line 2595, :column 18, :line 2595, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2595, :column 19, :line 2595, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} chunk-next ^{:arglists (^{:end-column 21, :end-line 2595, :column 18, :line 2595, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2595, :column 19, :line 2595, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} {:arglists ([^{:end-column 21, :end-line 2595, :column 19, :line 2595, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 21, :end-line 2595, :column 18, :line 2595, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2595, :column 19, :line 2595, :file "cljs/core.cljs"} s]), :end-column 18, :end-line 2595, :column 7, :line 2595, :file "cljs/core.cljs"} chunk-next, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7418, :column 10, :line 7418, :file "cljs/core.cljs"} ArrayList {:op :var, :type true, :name ^{:skip-protocol-flag nil, :protocols #{Object}, :end-column 20, :end-line 7418, :column 10, :line 7418, :file "cljs/core.cljs"} ArrayList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 35, :end-line 7418, :column 20, :line 7418, :file "cljs/core.cljs"} [^{:mutable true, :end-column 35, :end-line 7418, :column 31, :line 7418, :file "cljs/core.cljs"} arr], :protocols #{Object}}, ^{:arglists (^{:end-column 11, :end-line 8012, :column 3, :line 8012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8012, :column 4, :line 8012, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8012, :column 6, :line 8012, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 8010, :column 7, :line 8010, :file "cljs/core.cljs"} print-str ^{:arglists (^{:end-column 11, :end-line 8012, :column 3, :line 8012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8012, :column 4, :line 8012, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8012, :column 6, :line 8012, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 8010, :column 7, :line 8010, :file "cljs/core.cljs"} {:arglists ([& ^{:end-column 11, :end-line 8012, :column 6, :line 8012, :file "cljs/core.cljs"} objs]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 8012, :column 3, :line 8012, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 8012, :column 4, :line 8012, :file "cljs/core.cljs"} & ^{:end-column 11, :end-line 8012, :column 6, :line 8012, :file "cljs/core.cljs"} objs]), :doc "print to a string, returning it", :end-column 17, :end-line 8010, :column 7, :line 8010, :file "cljs/core.cljs"} print-str, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 14, :end-line 3161, :column 3, :line 3161, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3161, :column 4, :line 3161, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3161, :column 9, :line 3161, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3158, :column 8, :line 3158, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3158, :column 16, :line 3158, :file "cljs/core.cljs"} not-any? ^{:arglists (^{:end-column 14, :end-line 3161, :column 3, :line 3161, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3161, :column 4, :line 3161, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3161, :column 9, :line 3161, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3158, :column 8, :line 3158, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3158, :column 16, :line 3158, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 9, :end-line 3161, :column 4, :line 3161, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3161, :column 9, :line 3161, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 14, :end-line 3161, :column 3, :line 3161, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 3161, :column 4, :line 3161, :file "cljs/core.cljs"} pred ^{:end-column 14, :end-line 3161, :column 9, :line 3161, :file "cljs/core.cljs"} coll]), :doc "Returns false if (pred x) is logical true for any x in coll,\n  else true.", :tag ^{:end-column 16, :end-line 3158, :column 8, :line 3158, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 3158, :column 16, :line 3158, :file "cljs/core.cljs"} not-any?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 21, :end-line 47, :column 10, :line 47, :file "cljs/core.cljs"} into-array ^{:arglists (^{:end-column 10, :end-line 196, :column 4, :line 196, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 198, :column 4, :line 198, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 195, :column 8, :line 195, :file "cljs/core.cljs"} array, :end-column 25, :end-line 195, :column 14, :line 195, :file "cljs/core.cljs"} {:arglists ([^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 196, :column 4, :line 196, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 196, :column 5, :line 196, :file "cljs/core.cljs"} aseq] ^{:end-column 15, :end-line 198, :column 4, :line 198, :file "cljs/core.cljs"} [^{:end-column 10, :end-line 198, :column 5, :line 198, :file "cljs/core.cljs"} type ^{:end-column 15, :end-line 198, :column 10, :line 198, :file "cljs/core.cljs"} aseq]), :tag ^{:end-column 14, :end-line 195, :column 8, :line 195, :file "cljs/core.cljs"} array, :end-column 25, :end-line 195, :column 14, :line 195, :file "cljs/core.cljs"} into-array, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} -hash ^{:arglists (^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} {:arglists ([^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 13, :end-line 306, :column 10, :line 306, :file "cljs/core.cljs"} [^{:end-column 13, :end-line 306, :column 11, :line 306, :file "cljs/core.cljs"} o]), :protocol cljs.core/IHash, :end-column 10, :end-line 306, :column 4, :line 306, :file "cljs/core.cljs"} -hash, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} -dissoc! ^{:arglists (^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} {:arglists ([^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 360, :column 18, :line 360, :file "cljs/core.cljs"} [^{:end-column 25, :end-line 360, :column 19, :line 360, :file "cljs/core.cljs"} tcoll ^{:end-column 29, :end-line 360, :column 25, :line 360, :file "cljs/core.cljs"} key]), :protocol cljs.core/ITransientMap, :tag ^{:end-column 9, :end-line 360, :column 5, :line 360, :file "cljs/core.cljs"} clj, :end-column 18, :end-line 360, :column 9, :line 360, :file "cljs/core.cljs"} -dissoc!, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 771, :column 19, :line 771, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 771, :column 10, :line 771, :file "cljs/core.cljs"} ->Reduced ^{:arglists ([^{:end-column 23, :end-line 771, :column 19, :line 771, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 771, :column 10, :line 771, :file "cljs/core.cljs"} {:arglists (^cljs.core/Reduced [^{:end-column 23, :end-line 771, :column 19, :line 771, :file "cljs/core.cljs"} val]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 771, :column 19, :line 771, :file "cljs/core.cljs"} val]), :factory :positional, :skip-protocol-flag #{cljs.core/IDeref}, :protocols #{cljs.core/IDeref}, :end-column 18, :end-line 771, :column 10, :line 771, :file "cljs/core.cljs"} ->Reduced, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 30, :end-line 2481, :column 20, :line 2481, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2481, :column 21, :line 2481, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2481, :column 7, :line 2481, :file "cljs/core.cljs"} chunk-buffer ^{:arglists (^{:end-column 30, :end-line 2481, :column 20, :line 2481, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2481, :column 21, :line 2481, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2481, :column 7, :line 2481, :file "cljs/core.cljs"} {:arglists (^cljs.core/ChunkBuffer [^{:end-column 30, :end-line 2481, :column 21, :line 2481, :file "cljs/core.cljs"} capacity]), :tag function, :op :var, :name ^{:arglists (^{:end-column 30, :end-line 2481, :column 20, :line 2481, :file "cljs/core.cljs"} [^{:end-column 30, :end-line 2481, :column 21, :line 2481, :file "cljs/core.cljs"} capacity]), :end-column 20, :end-line 2481, :column 7, :line 2481, :file "cljs/core.cljs"} chunk-buffer, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1460, :column 3, :line 1460, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1460, :column 4, :line 1460, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1458, :column 8, :line 1458, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1458, :column 16, :line 1458, :file "cljs/core.cljs"} seqable? ^{:arglists (^{:end-column 6, :end-line 1460, :column 3, :line 1460, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1460, :column 4, :line 1460, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1458, :column 8, :line 1458, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1458, :column 16, :line 1458, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1460, :column 4, :line 1460, :file "cljs/core.cljs"} s]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1460, :column 3, :line 1460, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1460, :column 4, :line 1460, :file "cljs/core.cljs"} s]), :doc "Return true if s satisfies ISeqable", :tag ^{:end-column 16, :end-line 1458, :column 8, :line 1458, :file "cljs/core.cljs"} boolean, :end-column 25, :end-line 1458, :column 16, :line 1458, :file "cljs/core.cljs"} seqable?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 27, :end-line 542, :column 24, :line 542, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 542, :column 25, :line 542, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 542, :column 8, :line 542, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 542, :column 16, :line 542, :file "cljs/core.cljs"} symbol? ^{:arglists (^{:end-column 27, :end-line 542, :column 24, :line 542, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 542, :column 25, :line 542, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 542, :column 8, :line 542, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 542, :column 16, :line 542, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 27, :end-line 542, :column 25, :line 542, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 27, :end-line 542, :column 24, :line 542, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 542, :column 25, :line 542, :file "cljs/core.cljs"} x]), :tag ^{:end-column 16, :end-line 542, :column 8, :line 542, :file "cljs/core.cljs"} boolean, :end-column 24, :end-line 542, :column 16, :line 542, :file "cljs/core.cljs"} symbol?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 43, :end-line 463, :column 39, :line 463, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 463, :column 40, :line 463, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 463, :column 8, :line 463, :file "cljs/core.cljs"} number, :end-column 39, :end-line 463, :column 15, :line 463, :file "cljs/core.cljs"} m3-hash-unencoded-chars ^{:arglists (^{:end-column 43, :end-line 463, :column 39, :line 463, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 463, :column 40, :line 463, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 463, :column 8, :line 463, :file "cljs/core.cljs"} number, :end-column 39, :end-line 463, :column 15, :line 463, :file "cljs/core.cljs"} {:arglists (^number [^{:end-column 43, :end-line 463, :column 40, :line 463, :file "cljs/core.cljs"} in]), :tag function, :op :var, :name ^{:arglists (^{:end-column 43, :end-line 463, :column 39, :line 463, :file "cljs/core.cljs"} [^{:end-column 43, :end-line 463, :column 40, :line 463, :file "cljs/core.cljs"} in]), :tag ^{:end-column 15, :end-line 463, :column 8, :line 463, :file "cljs/core.cljs"} number, :end-column 39, :end-line 463, :column 15, :line 463, :file "cljs/core.cljs"} m3-hash-unencoded-chars, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 33, :end-line 1817, :column 30, :line 1817, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1817, :column 31, :line 1817, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} unchecked-char ^{:arglists (^{:end-column 33, :end-line 1817, :column 30, :line 1817, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1817, :column 31, :line 1817, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} {:arglists ([^{:end-column 33, :end-line 1817, :column 31, :line 1817, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 33, :end-line 1817, :column 30, :line 1817, :file "cljs/core.cljs"} [^{:end-column 33, :end-line 1817, :column 31, :line 1817, :file "cljs/core.cljs"} x]), :tag ^{:end-column 15, :end-line 1817, :column 8, :line 1817, :file "cljs/core.cljs"} number, :end-column 30, :end-line 1817, :column 15, :line 1817, :file "cljs/core.cljs"} unchecked-char, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4731, :column 10, :line 4731, :file "cljs/core.cljs"} NeverEquiv {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IEquiv}, :protocols #{Object cljs.core/IEquiv}, :end-column 21, :end-line 4731, :column 10, :line 4731, :file "cljs/core.cljs"} NeverEquiv, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 23, :end-line 4731, :column 21, :line 4731, :file "cljs/core.cljs"} [], :protocols #{Object cljs.core/IEquiv}}, ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} {:arglists ([^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]), :tag function, :op :var, :name ^{:arglists (^{:end-column 11, :end-line 208, :column 5, :line 208, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 208, :column 6, :line 208, :file "cljs/core.cljs"} this] ^{:end-column 13, :end-line 209, :column 5, :line 209, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 209, :column 6, :line 209, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 209, :column 11, :line 209, :file "cljs/core.cljs"} a] ^{:end-column 15, :end-line 210, :column 5, :line 210, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 210, :column 6, :line 210, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 210, :column 11, :line 210, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 210, :column 13, :line 210, :file "cljs/core.cljs"} b] ^{:end-column 17, :end-line 211, :column 5, :line 211, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 211, :column 6, :line 211, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 211, :column 11, :line 211, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 211, :column 13, :line 211, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 211, :column 15, :line 211, :file "cljs/core.cljs"} c] ^{:end-column 19, :end-line 212, :column 5, :line 212, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 212, :column 6, :line 212, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 212, :column 11, :line 212, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 212, :column 13, :line 212, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 212, :column 15, :line 212, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 212, :column 17, :line 212, :file "cljs/core.cljs"} d] ^{:end-column 21, :end-line 213, :column 5, :line 213, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 213, :column 6, :line 213, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 213, :column 11, :line 213, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 213, :column 13, :line 213, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 213, :column 15, :line 213, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 213, :column 17, :line 213, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 213, :column 19, :line 213, :file "cljs/core.cljs"} e] ^{:end-column 23, :end-line 214, :column 5, :line 214, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 214, :column 6, :line 214, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 214, :column 11, :line 214, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 214, :column 13, :line 214, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 214, :column 15, :line 214, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 214, :column 17, :line 214, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 214, :column 19, :line 214, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 214, :column 21, :line 214, :file "cljs/core.cljs"} f] ^{:end-column 25, :end-line 215, :column 5, :line 215, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 215, :column 6, :line 215, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 215, :column 11, :line 215, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 215, :column 13, :line 215, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 215, :column 15, :line 215, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 215, :column 17, :line 215, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 215, :column 19, :line 215, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 215, :column 21, :line 215, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 215, :column 23, :line 215, :file "cljs/core.cljs"} g] ^{:end-column 27, :end-line 216, :column 5, :line 216, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 216, :column 6, :line 216, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 216, :column 11, :line 216, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 216, :column 13, :line 216, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 216, :column 15, :line 216, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 216, :column 17, :line 216, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 216, :column 19, :line 216, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 216, :column 21, :line 216, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 216, :column 23, :line 216, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 216, :column 25, :line 216, :file "cljs/core.cljs"} h] ^{:end-column 29, :end-line 217, :column 5, :line 217, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 217, :column 6, :line 217, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 217, :column 11, :line 217, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 217, :column 13, :line 217, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 217, :column 15, :line 217, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 217, :column 17, :line 217, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 217, :column 19, :line 217, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 217, :column 21, :line 217, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 217, :column 23, :line 217, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 217, :column 25, :line 217, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 217, :column 27, :line 217, :file "cljs/core.cljs"} i] ^{:end-column 31, :end-line 218, :column 5, :line 218, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 218, :column 6, :line 218, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 218, :column 11, :line 218, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 218, :column 13, :line 218, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 218, :column 15, :line 218, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 218, :column 17, :line 218, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 218, :column 19, :line 218, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 218, :column 21, :line 218, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 218, :column 23, :line 218, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 218, :column 25, :line 218, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 218, :column 27, :line 218, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 218, :column 29, :line 218, :file "cljs/core.cljs"} j] ^{:end-column 33, :end-line 219, :column 5, :line 219, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 219, :column 6, :line 219, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 219, :column 11, :line 219, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 219, :column 13, :line 219, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 219, :column 15, :line 219, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 219, :column 17, :line 219, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 219, :column 19, :line 219, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 219, :column 21, :line 219, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 219, :column 23, :line 219, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 219, :column 25, :line 219, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 219, :column 27, :line 219, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 219, :column 29, :line 219, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 219, :column 31, :line 219, :file "cljs/core.cljs"} k] ^{:end-column 35, :end-line 220, :column 5, :line 220, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 220, :column 6, :line 220, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 220, :column 11, :line 220, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 220, :column 13, :line 220, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 220, :column 15, :line 220, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 220, :column 17, :line 220, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 220, :column 19, :line 220, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 220, :column 21, :line 220, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 220, :column 23, :line 220, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 220, :column 25, :line 220, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 220, :column 27, :line 220, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 220, :column 29, :line 220, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 220, :column 31, :line 220, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 220, :column 33, :line 220, :file "cljs/core.cljs"} l] ^{:end-column 37, :end-line 221, :column 5, :line 221, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 221, :column 6, :line 221, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 221, :column 11, :line 221, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 221, :column 13, :line 221, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 221, :column 15, :line 221, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 221, :column 17, :line 221, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 221, :column 19, :line 221, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 221, :column 21, :line 221, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 221, :column 23, :line 221, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 221, :column 25, :line 221, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 221, :column 27, :line 221, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 221, :column 29, :line 221, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 221, :column 31, :line 221, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 221, :column 33, :line 221, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 221, :column 35, :line 221, :file "cljs/core.cljs"} m] ^{:end-column 39, :end-line 222, :column 5, :line 222, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 222, :column 6, :line 222, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 222, :column 11, :line 222, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 222, :column 13, :line 222, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 222, :column 15, :line 222, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 222, :column 17, :line 222, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 222, :column 19, :line 222, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 222, :column 21, :line 222, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 222, :column 23, :line 222, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 222, :column 25, :line 222, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 222, :column 27, :line 222, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 222, :column 29, :line 222, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 222, :column 31, :line 222, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 222, :column 33, :line 222, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 222, :column 35, :line 222, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 222, :column 37, :line 222, :file "cljs/core.cljs"} n] ^{:end-column 41, :end-line 223, :column 5, :line 223, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 223, :column 6, :line 223, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 223, :column 11, :line 223, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 223, :column 13, :line 223, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 223, :column 15, :line 223, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 223, :column 17, :line 223, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 223, :column 19, :line 223, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 223, :column 21, :line 223, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 223, :column 23, :line 223, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 223, :column 25, :line 223, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 223, :column 27, :line 223, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 223, :column 29, :line 223, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 223, :column 31, :line 223, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 223, :column 33, :line 223, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 223, :column 35, :line 223, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 223, :column 37, :line 223, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 223, :column 39, :line 223, :file "cljs/core.cljs"} o] ^{:end-column 43, :end-line 224, :column 5, :line 224, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 224, :column 6, :line 224, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 224, :column 11, :line 224, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 224, :column 13, :line 224, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 224, :column 15, :line 224, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 224, :column 17, :line 224, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 224, :column 19, :line 224, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 224, :column 21, :line 224, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 224, :column 23, :line 224, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 224, :column 25, :line 224, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 224, :column 27, :line 224, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 224, :column 29, :line 224, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 224, :column 31, :line 224, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 224, :column 33, :line 224, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 224, :column 35, :line 224, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 224, :column 37, :line 224, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 224, :column 39, :line 224, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 224, :column 41, :line 224, :file "cljs/core.cljs"} p] ^{:end-column 45, :end-line 225, :column 5, :line 225, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 225, :column 6, :line 225, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 225, :column 11, :line 225, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 225, :column 13, :line 225, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 225, :column 15, :line 225, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 225, :column 17, :line 225, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 225, :column 19, :line 225, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 225, :column 21, :line 225, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 225, :column 23, :line 225, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 225, :column 25, :line 225, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 225, :column 27, :line 225, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 225, :column 29, :line 225, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 225, :column 31, :line 225, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 225, :column 33, :line 225, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 225, :column 35, :line 225, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 225, :column 37, :line 225, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 225, :column 39, :line 225, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 225, :column 41, :line 225, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 225, :column 43, :line 225, :file "cljs/core.cljs"} q] ^{:end-column 47, :end-line 226, :column 5, :line 226, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 226, :column 6, :line 226, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 226, :column 11, :line 226, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 226, :column 13, :line 226, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 226, :column 15, :line 226, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 226, :column 17, :line 226, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 226, :column 19, :line 226, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 226, :column 21, :line 226, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 226, :column 23, :line 226, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 226, :column 25, :line 226, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 226, :column 27, :line 226, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 226, :column 29, :line 226, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 226, :column 31, :line 226, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 226, :column 33, :line 226, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 226, :column 35, :line 226, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 226, :column 37, :line 226, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 226, :column 39, :line 226, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 226, :column 41, :line 226, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 226, :column 43, :line 226, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 226, :column 45, :line 226, :file "cljs/core.cljs"} r] ^{:end-column 49, :end-line 227, :column 5, :line 227, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 227, :column 6, :line 227, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 227, :column 11, :line 227, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 227, :column 13, :line 227, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 227, :column 15, :line 227, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 227, :column 17, :line 227, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 227, :column 19, :line 227, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 227, :column 21, :line 227, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 227, :column 23, :line 227, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 227, :column 25, :line 227, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 227, :column 27, :line 227, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 227, :column 29, :line 227, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 227, :column 31, :line 227, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 227, :column 33, :line 227, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 227, :column 35, :line 227, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 227, :column 37, :line 227, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 227, :column 39, :line 227, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 227, :column 41, :line 227, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 227, :column 43, :line 227, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 227, :column 45, :line 227, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 227, :column 47, :line 227, :file "cljs/core.cljs"} s] ^{:end-column 51, :end-line 228, :column 5, :line 228, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 228, :column 6, :line 228, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 228, :column 11, :line 228, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 228, :column 13, :line 228, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 228, :column 15, :line 228, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 228, :column 17, :line 228, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 228, :column 19, :line 228, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 228, :column 21, :line 228, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 228, :column 23, :line 228, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 228, :column 25, :line 228, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 228, :column 27, :line 228, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 228, :column 29, :line 228, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 228, :column 31, :line 228, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 228, :column 33, :line 228, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 228, :column 35, :line 228, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 228, :column 37, :line 228, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 228, :column 39, :line 228, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 228, :column 41, :line 228, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 228, :column 43, :line 228, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 228, :column 45, :line 228, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 228, :column 47, :line 228, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 228, :column 49, :line 228, :file "cljs/core.cljs"} t] ^{:end-column 56, :end-line 229, :column 5, :line 229, :file "cljs/core.cljs"} [^{:end-column 11, :end-line 229, :column 6, :line 229, :file "cljs/core.cljs"} this ^{:end-column 13, :end-line 229, :column 11, :line 229, :file "cljs/core.cljs"} a ^{:end-column 15, :end-line 229, :column 13, :line 229, :file "cljs/core.cljs"} b ^{:end-column 17, :end-line 229, :column 15, :line 229, :file "cljs/core.cljs"} c ^{:end-column 19, :end-line 229, :column 17, :line 229, :file "cljs/core.cljs"} d ^{:end-column 21, :end-line 229, :column 19, :line 229, :file "cljs/core.cljs"} e ^{:end-column 23, :end-line 229, :column 21, :line 229, :file "cljs/core.cljs"} f ^{:end-column 25, :end-line 229, :column 23, :line 229, :file "cljs/core.cljs"} g ^{:end-column 27, :end-line 229, :column 25, :line 229, :file "cljs/core.cljs"} h ^{:end-column 29, :end-line 229, :column 27, :line 229, :file "cljs/core.cljs"} i ^{:end-column 31, :end-line 229, :column 29, :line 229, :file "cljs/core.cljs"} j ^{:end-column 33, :end-line 229, :column 31, :line 229, :file "cljs/core.cljs"} k ^{:end-column 35, :end-line 229, :column 33, :line 229, :file "cljs/core.cljs"} l ^{:end-column 37, :end-line 229, :column 35, :line 229, :file "cljs/core.cljs"} m ^{:end-column 39, :end-line 229, :column 37, :line 229, :file "cljs/core.cljs"} n ^{:end-column 41, :end-line 229, :column 39, :line 229, :file "cljs/core.cljs"} o ^{:end-column 43, :end-line 229, :column 41, :line 229, :file "cljs/core.cljs"} p ^{:end-column 45, :end-line 229, :column 43, :line 229, :file "cljs/core.cljs"} q ^{:end-column 47, :end-line 229, :column 45, :line 229, :file "cljs/core.cljs"} r ^{:end-column 49, :end-line 229, :column 47, :line 229, :file "cljs/core.cljs"} s ^{:end-column 51, :end-line 229, :column 49, :line 229, :file "cljs/core.cljs"} t ^{:end-column 56, :end-line 229, :column 51, :line 229, :file "cljs/core.cljs"} rest]), :protocol cljs.core/IFn, :end-column 12, :end-line 207, :column 4, :line 207, :file "cljs/core.cljs"} -invoke, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 6, :end-line 1361, :column 3, :line 1361, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1361, :column 4, :line 1361, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1359, :column 8, :line 1359, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1359, :column 16, :line 1359, :file "cljs/core.cljs"} coll? ^{:arglists (^{:end-column 6, :end-line 1361, :column 3, :line 1361, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1361, :column 4, :line 1361, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1359, :column 8, :line 1359, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1359, :column 16, :line 1359, :file "cljs/core.cljs"} {:arglists (^boolean [^{:end-column 6, :end-line 1361, :column 4, :line 1361, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 6, :end-line 1361, :column 3, :line 1361, :file "cljs/core.cljs"} [^{:end-column 6, :end-line 1361, :column 4, :line 1361, :file "cljs/core.cljs"} x]), :doc "Returns true if x satisfies ICollection", :tag ^{:end-column 16, :end-line 1359, :column 8, :line 1359, :file "cljs/core.cljs"} boolean, :end-column 22, :end-line 1359, :column 16, :line 1359, :file "cljs/core.cljs"} coll?, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 10, :end-line 3866, :column 4, :line 3866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3866, :column 5, :line 3866, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3866, :column 7, :line 3866, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3860, :column 7, :line 3860, :file "cljs/core.cljs"} get-in ^{:arglists (^{:end-column 10, :end-line 3866, :column 4, :line 3866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3866, :column 5, :line 3866, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3866, :column 7, :line 3866, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3860, :column 7, :line 3860, :file "cljs/core.cljs"} {:arglists ([^{:end-column 7, :end-line 3866, :column 5, :line 3866, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3866, :column 7, :line 3866, :file "cljs/core.cljs"} ks] [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} not-found]), :tag function, :op :var, :name ^{:arglists (^{:end-column 10, :end-line 3866, :column 4, :line 3866, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3866, :column 5, :line 3866, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3866, :column 7, :line 3866, :file "cljs/core.cljs"} ks] ^{:end-column 20, :end-line 3868, :column 4, :line 3868, :file "cljs/core.cljs"} [^{:end-column 7, :end-line 3868, :column 5, :line 3868, :file "cljs/core.cljs"} m ^{:end-column 10, :end-line 3868, :column 7, :line 3868, :file "cljs/core.cljs"} ks ^{:end-column 20, :end-line 3868, :column 10, :line 3868, :file "cljs/core.cljs"} not-found]), :static true, :added "1.2", :doc "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.", :end-column 14, :end-line 3860, :column 7, :line 3860, :file "cljs/core.cljs"} get-in, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 9, :end-line 1027, :column 3, :line 1027, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1025, :column 7, :line 1025, :file "cljs/core.cljs"} fnext ^{:arglists (^{:end-column 9, :end-line 1027, :column 3, :line 1027, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1025, :column 7, :line 1025, :file "cljs/core.cljs"} {:arglists ([^{:end-column 9, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 9, :end-line 1027, :column 3, :line 1027, :file "cljs/core.cljs"} [^{:end-column 9, :end-line 1027, :column 4, :line 1027, :file "cljs/core.cljs"} coll]), :doc "Same as (first (next x))", :end-column 13, :end-line 1025, :column 7, :line 1025, :file "cljs/core.cljs"} fnext, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 314, :column 14, :line 314, :file "cljs/core.cljs"} IList ^{:impls (cljs.core/Cons cljs.core/EmptyList cljs.core/List), :protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 314, :column 14, :line 314, :file "cljs/core.cljs"} {:tag object, :op :var, :name ^{:protocol-info {:methods {}}, :protocol-symbol true, :end-column 20, :end-line 314, :column 14, :line 314, :file "cljs/core.cljs"} IList, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:declared true, :end-column 35, :end-line 855, :column 30, :line 855, :file "cljs/core.cljs"} List {:op :var, :type true, :name ^{:skip-protocol-flag #{cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}, :end-column 15, :end-line 2138, :column 10, :line 2138, :file "cljs/core.cljs"} List, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core, :fields ^{:end-column 55, :end-line 2138, :column 15, :line 2138, :file "cljs/core.cljs"} [^{:end-column 21, :end-line 2138, :column 16, :line 2138, :file "cljs/core.cljs"} meta ^{:end-column 27, :end-line 2138, :column 21, :line 2138, :file "cljs/core.cljs"} first ^{:end-column 32, :end-line 2138, :column 27, :line 2138, :file "cljs/core.cljs"} rest ^{:end-column 38, :end-line 2138, :column 32, :line 2138, :file "cljs/core.cljs"} count ^{:mutable true, :end-column 55, :end-line 2138, :column 48, :line 2138, :file "cljs/core.cljs"} __hash], :protocols #{Object cljs.core/IList cljs.core/IEquiv cljs.core/IHash cljs.core/ASeq cljs.core/ICollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeq cljs.core/INext cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IStack cljs.core/ISequential cljs.core/IWithMeta cljs.core/IReduce}}, ^{:arglists (^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} -val ^{:arglists (^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} {:arglists ([^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]), :tag function, :op :var, :name ^{:arglists (^{:end-column 15, :end-line 272, :column 9, :line 272, :file "cljs/core.cljs"} [^{:end-column 15, :end-line 272, :column 10, :line 272, :file "cljs/core.cljs"} coll]), :protocol cljs.core/IMapEntry, :end-column 9, :end-line 272, :column 4, :line 272, :file "cljs/core.cljs"} -val, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 16, :end-line 1920, :column 13, :line 1920, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1920, :column 14, :line 1920, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1920, :column 7, :line 1920, :file "cljs/core.cljs"} bytes ^{:arglists (^{:end-column 16, :end-line 1920, :column 13, :line 1920, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1920, :column 14, :line 1920, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1920, :column 7, :line 1920, :file "cljs/core.cljs"} {:arglists ([^{:end-column 16, :end-line 1920, :column 14, :line 1920, :file "cljs/core.cljs"} x]), :tag function, :op :var, :name ^{:arglists (^{:end-column 16, :end-line 1920, :column 13, :line 1920, :file "cljs/core.cljs"} [^{:end-column 16, :end-line 1920, :column 14, :line 1920, :file "cljs/core.cljs"} x]), :end-column 13, :end-line 1920, :column 7, :line 1920, :file "cljs/core.cljs"} bytes, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists ([^{:end-column 23, :end-line 4800, :column 18, :line 4800, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4800, :column 23, :line 4800, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4800, :column 28, :line 4800, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4800, :column 35, :line 4800, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4800, :column 58, :line 4800, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4800, :column 10, :line 4800, :file "cljs/core.cljs"} ->ObjMap ^{:arglists ([^{:end-column 23, :end-line 4800, :column 18, :line 4800, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4800, :column 23, :line 4800, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4800, :column 28, :line 4800, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4800, :column 35, :line 4800, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4800, :column 58, :line 4800, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4800, :column 10, :line 4800, :file "cljs/core.cljs"} {:arglists (^cljs.core/ObjMap [^{:end-column 23, :end-line 4800, :column 18, :line 4800, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4800, :column 23, :line 4800, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4800, :column 28, :line 4800, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4800, :column 35, :line 4800, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4800, :column 58, :line 4800, :file "cljs/core.cljs"} __hash]), :tag function, :op :var, :name ^{:arglists ([^{:end-column 23, :end-line 4800, :column 18, :line 4800, :file "cljs/core.cljs"} meta ^{:end-column 28, :end-line 4800, :column 23, :line 4800, :file "cljs/core.cljs"} keys ^{:end-column 35, :end-line 4800, :column 28, :line 4800, :file "cljs/core.cljs"} strobj ^{:end-column 48, :end-line 4800, :column 35, :line 4800, :file "cljs/core.cljs"} update-count ^{:mutable true, :end-column 65, :end-line 4800, :column 58, :line 4800, :file "cljs/core.cljs"} __hash]), :factory :positional, :skip-protocol-flag #{cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :protocols #{Object cljs.core/IKVReduce cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/IEditableCollection cljs.core/IEmptyableCollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :end-column 17, :end-line 4800, :column 10, :line 4800, :file "cljs/core.cljs"} ->ObjMap, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 29, :end-line 550, :column 24, :line 550, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 550, :column 25, :line 550, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 550, :column 27, :line 550, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 550, :column 8, :line 550, :file "cljs/core.cljs"} compare-symbols ^{:arglists (^{:end-column 29, :end-line 550, :column 24, :line 550, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 550, :column 25, :line 550, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 550, :column 27, :line 550, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 550, :column 8, :line 550, :file "cljs/core.cljs"} {:arglists ([^{:end-column 27, :end-line 550, :column 25, :line 550, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 550, :column 27, :line 550, :file "cljs/core.cljs"} b]), :tag function, :op :var, :name ^{:arglists (^{:end-column 29, :end-line 550, :column 24, :line 550, :file "cljs/core.cljs"} [^{:end-column 27, :end-line 550, :column 25, :line 550, :file "cljs/core.cljs"} a ^{:end-column 29, :end-line 550, :column 27, :line 550, :file "cljs/core.cljs"} b]), :private true, :end-column 24, :end-line 550, :column 8, :line 550, :file "cljs/core.cljs"} compare-symbols, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}, ^{:arglists (^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} -seq ^{:arglists (^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} {:arglists ([^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]), :tag function, :op :var, :name ^{:arglists (^{:end-column 24, :end-line 309, :column 21, :line 309, :file "cljs/core.cljs"} [^{:end-column 24, :end-line 309, :column 22, :line 309, :file "cljs/core.cljs"} o]), :protocol cljs.core/ISeqable, :tag ^{:end-column 16, :end-line 309, :column 5, :line 309, :file "cljs/core.cljs"} clj-or-nil, :end-column 21, :end-line 309, :column 16, :line 309, :file "cljs/core.cljs"} -seq, :ns ^{:end-column 15, :end-line 9, :column 5, :line 9, :file "cljs/core.cljs"} cljs.core}}, :aliases {}, :macro-mappings {unsafe-bit-and #=(var clojure.tools.analyzer.js.cljs.core/unsafe-bit-and), unchecked-remainder-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-remainder-int), when-first #=(var clojure.tools.analyzer.js.cljs.core/when-first), cond->> #=(var clojure.tools.analyzer.js.cljs.core/cond->>), bit-set #=(var clojure.tools.analyzer.js.cljs.core/bit-set), import-macros #=(var clojure.tools.analyzer.js.cljs.core/import-macros), while #=(var clojure.tools.analyzer.js.cljs.core/while), satisfies? #=(var clojure.tools.analyzer.js.cljs.core/satisfies?), unchecked-subtract-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-subtract-int), bit-shift-right #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-right), aget #=(var clojure.tools.analyzer.js.cljs.core/aget), specify #=(var clojure.tools.analyzer.js.cljs.core/specify), caching-hash #=(var clojure.tools.analyzer.js.cljs.core/caching-hash), bit-shift-left #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-left), coercive-not #=(var clojure.tools.analyzer.js.cljs.core/coercive-not), dec #=(var clojure.tools.analyzer.js.cljs.core/dec), < #=(var clojure.tools.analyzer.js.cljs.core/<), this-as #=(var clojure.tools.analyzer.js.cljs.core/this-as), .. #=(var clojure.tools.analyzer.js.cljs.core/..), delay #=(var clojure.tools.analyzer.js.cljs.core/delay), unchecked-negate #=(var clojure.tools.analyzer.js.cljs.core/unchecked-negate), simple-benchmark #=(var clojure.tools.analyzer.js.cljs.core/simple-benchmark), unchecked-inc-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-inc-int), js-str #=(var clojure.tools.analyzer.js.cljs.core/js-str), bit-shift-right-zero-fill #=(var clojure.tools.analyzer.js.cljs.core/bit-shift-right-zero-fill), implements? #=(var clojure.tools.analyzer.js.cljs.core/implements?), pos? #=(var clojure.tools.analyzer.js.cljs.core/pos?), specify! #=(var clojure.tools.analyzer.js.cljs.core/specify!), if-not #=(var clojure.tools.analyzer.js.cljs.core/if-not), alength #=(var clojure.tools.analyzer.js.cljs.core/alength), bit-xor #=(var clojure.tools.analyzer.js.cljs.core/bit-xor), doseq #=(var clojure.tools.analyzer.js.cljs.core/doseq), unsigned-bit-shift-right #=(var clojure.tools.analyzer.js.cljs.core/unsigned-bit-shift-right), neg? #=(var clojure.tools.analyzer.js.cljs.core/neg?), unchecked-float #=(var clojure.tools.analyzer.js.cljs.core/unchecked-float), undefined? #=(var clojure.tools.analyzer.js.cljs.core/undefined?), deftype #=(var clojure.tools.analyzer.js.cljs.core/deftype), mask #=(var clojure.tools.analyzer.js.cljs.core/mask), when-let #=(var clojure.tools.analyzer.js.cljs.core/when-let), divide #=(var clojure.tools.analyzer.js.cljs.core/divide), coercive-boolean #=(var clojure.tools.analyzer.js.cljs.core/coercive-boolean), <= #=(var clojure.tools.analyzer.js.cljs.core/<=), if-some #=(var clojure.tools.analyzer.js.cljs.core/if-some), * #=(var clojure.tools.analyzer.js.cljs.core/*), min #=(var clojure.tools.analyzer.js.cljs.core/min), lazy-seq #=(var clojure.tools.analyzer.js.cljs.core/lazy-seq), js-delete #=(var clojure.tools.analyzer.js.cljs.core/js-delete), truth_ #=(var clojure.tools.analyzer.js.cljs.core/truth_), defcurried #=(var clojure.tools.analyzer.js.cljs.core/defcurried), let #=(var clojure.tools.analyzer.js.cljs.core/let), -> #=(var clojure.tools.analyzer.js.cljs.core/->), coercive-not= #=(var clojure.tools.analyzer.js.cljs.core/coercive-not=), doto #=(var clojure.tools.analyzer.js.cljs.core/doto), areduce #=(var clojure.tools.analyzer.js.cljs.core/areduce), double #=(var clojure.tools.analyzer.js.cljs.core/double), bit-and-not #=(var clojure.tools.analyzer.js.cljs.core/bit-and-not), unchecked-add-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-add-int), fn #=(var clojure.tools.analyzer.js.cljs.core/fn), short #=(var clojure.tools.analyzer.js.cljs.core/short), js-this #=(var clojure.tools.analyzer.js.cljs.core/js-this), unchecked-double #=(var clojure.tools.analyzer.js.cljs.core/unchecked-double), string? #=(var clojure.tools.analyzer.js.cljs.core/string?), js-arguments #=(var clojure.tools.analyzer.js.cljs.core/js-arguments), unchecked-multiply-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-multiply-int), as-> #=(var clojure.tools.analyzer.js.cljs.core/as->), when-not #=(var clojure.tools.analyzer.js.cljs.core/when-not), when #=(var clojure.tools.analyzer.js.cljs.core/when), int #=(var clojure.tools.analyzer.js.cljs.core/int), > #=(var clojure.tools.analyzer.js.cljs.core/>), keyword? #=(var clojure.tools.analyzer.js.cljs.core/keyword?), unchecked-multiply #=(var clojure.tools.analyzer.js.cljs.core/unchecked-multiply), gen-apply-to #=(var clojure.tools.analyzer.js.cljs.core/gen-apply-to), some->> #=(var clojure.tools.analyzer.js.cljs.core/some->>), unchecked-dec #=(var clojure.tools.analyzer.js.cljs.core/unchecked-dec), defn #=(var clojure.tools.analyzer.js.cljs.core/defn), float #=(var clojure.tools.analyzer.js.cljs.core/float), js-in #=(var clojure.tools.analyzer.js.cljs.core/js-in), es6-iterable #=(var clojure.tools.analyzer.js.cljs.core/es6-iterable), amap #=(var clojure.tools.analyzer.js.cljs.core/amap), declare #=(var clojure.tools.analyzer.js.cljs.core/declare), - #=(var clojure.tools.analyzer.js.cljs.core/-), hash-set #=(var clojure.tools.analyzer.js.cljs.core/hash-set), or #=(var clojure.tools.analyzer.js.cljs.core/or), assert-args #=(var clojure.tools.analyzer.js.cljs.core/assert-args), extend-type #=(var clojure.tools.analyzer.js.cljs.core/extend-type), bit-test #=(var clojure.tools.analyzer.js.cljs.core/bit-test), defmethod #=(var clojure.tools.analyzer.js.cljs.core/defmethod), time #=(var clojure.tools.analyzer.js.cljs.core/time), zero? #=(var clojure.tools.analyzer.js.cljs.core/zero?), unchecked-dec-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-dec-int), memfn #=(var clojure.tools.analyzer.js.cljs.core/memfn), js-obj #=(var clojure.tools.analyzer.js.cljs.core/js-obj), nil? #=(var clojure.tools.analyzer.js.cljs.core/nil?), extend-protocol #=(var clojure.tools.analyzer.js.cljs.core/extend-protocol), cond-> #=(var clojure.tools.analyzer.js.cljs.core/cond->), dotimes #=(var clojure.tools.analyzer.js.cljs.core/dotimes), bit-and #=(var clojure.tools.analyzer.js.cljs.core/bit-and), reify #=(var clojure.tools.analyzer.js.cljs.core/reify), instance? #=(var clojure.tools.analyzer.js.cljs.core/instance?), defonce #=(var clojure.tools.analyzer.js.cljs.core/defonce), unchecked-add #=(var clojure.tools.analyzer.js.cljs.core/unchecked-add), rfn #=(var clojure.tools.analyzer.js.cljs.core/rfn), identical? #=(var clojure.tools.analyzer.js.cljs.core/identical?), unchecked-divide-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-divide-int), defn- #=(var clojure.tools.analyzer.js.cljs.core/defn-), defprotocol #=(var clojure.tools.analyzer.js.cljs.core/defprotocol), unchecked-subtract #=(var clojure.tools.analyzer.js.cljs.core/unchecked-subtract), assert #=(var clojure.tools.analyzer.js.cljs.core/assert), true? #=(var clojure.tools.analyzer.js.cljs.core/true?), array #=(var clojure.tools.analyzer.js.cljs.core/array), letfn #=(var clojure.tools.analyzer.js.cljs.core/letfn), / #=(var clojure.tools.analyzer.js.cljs.core//), bitpos #=(var clojure.tools.analyzer.js.cljs.core/bitpos), bit-or #=(var clojure.tools.analyzer.js.cljs.core/bit-or), vector #=(var clojure.tools.analyzer.js.cljs.core/vector), >= #=(var clojure.tools.analyzer.js.cljs.core/>=), loop #=(var clojure.tools.analyzer.js.cljs.core/loop), bit-flip #=(var clojure.tools.analyzer.js.cljs.core/bit-flip), js-mod #=(var clojure.tools.analyzer.js.cljs.core/js-mod), with-out-str #=(var clojure.tools.analyzer.js.cljs.core/with-out-str), condp #=(var clojure.tools.analyzer.js.cljs.core/condp), cond #=(var clojure.tools.analyzer.js.cljs.core/cond), some-> #=(var clojure.tools.analyzer.js.cljs.core/some->), for #=(var clojure.tools.analyzer.js.cljs.core/for), binding #=(var clojure.tools.analyzer.js.cljs.core/binding), array-map #=(var clojure.tools.analyzer.js.cljs.core/array-map), unchecked-byte #=(var clojure.tools.analyzer.js.cljs.core/unchecked-byte), unchecked-short #=(var clojure.tools.analyzer.js.cljs.core/unchecked-short), inc #=(var clojure.tools.analyzer.js.cljs.core/inc), with-redefs #=(var clojure.tools.analyzer.js.cljs.core/with-redefs), bit-clear #=(var clojure.tools.analyzer.js.cljs.core/bit-clear), list #=(var clojure.tools.analyzer.js.cljs.core/list), + #=(var clojure.tools.analyzer.js.cljs.core/+), aset #=(var clojure.tools.analyzer.js.cljs.core/aset), defmulti #=(var clojure.tools.analyzer.js.cljs.core/defmulti), str #=(var clojure.tools.analyzer.js.cljs.core/str), coercive-= #=(var clojure.tools.analyzer.js.cljs.core/coercive-=), hash-map #=(var clojure.tools.analyzer.js.cljs.core/hash-map), if-let #=(var clojure.tools.analyzer.js.cljs.core/if-let), false? #=(var clojure.tools.analyzer.js.cljs.core/false?), case #=(var clojure.tools.analyzer.js.cljs.core/case), array? #=(var clojure.tools.analyzer.js.cljs.core/array?), exists? #=(var clojure.tools.analyzer.js.cljs.core/exists?), bit-not #=(var clojure.tools.analyzer.js.cljs.core/bit-not), byte #=(var clojure.tools.analyzer.js.cljs.core/byte), max #=(var clojure.tools.analyzer.js.cljs.core/max), == #=(var clojure.tools.analyzer.js.cljs.core/==), lazy-cat #=(var clojure.tools.analyzer.js.cljs.core/lazy-cat), comment #=(var clojure.tools.analyzer.js.cljs.core/comment), defrecord #=(var clojure.tools.analyzer.js.cljs.core/defrecord), make-array #=(var clojure.tools.analyzer.js.cljs.core/make-array), unchecked-negate-int #=(var clojure.tools.analyzer.js.cljs.core/unchecked-negate-int), unchecked-inc #=(var clojure.tools.analyzer.js.cljs.core/unchecked-inc), and #=(var clojure.tools.analyzer.js.cljs.core/and), number? #=(var clojure.tools.analyzer.js.cljs.core/number?), symbol? #=(var clojure.tools.analyzer.js.cljs.core/symbol?), when-some #=(var clojure.tools.analyzer.js.cljs.core/when-some), unchecked-char #=(var clojure.tools.analyzer.js.cljs.core/unchecked-char), ->> #=(var clojure.tools.analyzer.js.cljs.core/->>)}, :macro-aliases {}}, goog {:mappings {}, :js-namespace true, :ns goog}, Math {:mappings {}, :js-namespace true, :ns Math}}